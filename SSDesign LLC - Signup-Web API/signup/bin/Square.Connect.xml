<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Square.Connect</name>
    </assembly>
    <members>
        <member name="T:Square.Connect.Api.IApplePayApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IApplePayApi.RegisterDomain(Square.Connect.Model.RegisterDomainRequest)">
            <summary>
            RegisterDomain
            </summary>
            <remarks>
            Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](/payment-form/add-digital-wallets/apple-pay) guide.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>RegisterDomainResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IApplePayApi.RegisterDomainWithHttpInfo(Square.Connect.Model.RegisterDomainRequest)">
            <summary>
            RegisterDomain
            </summary>
            <remarks>
            Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](/payment-form/add-digital-wallets/apple-pay) guide.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of RegisterDomainResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IApplePayApi.RegisterDomainAsync(Square.Connect.Model.RegisterDomainRequest)">
            <summary>
            RegisterDomain
            </summary>
            <remarks>
            Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](/payment-form/add-digital-wallets/apple-pay) guide.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of RegisterDomainResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IApplePayApi.RegisterDomainAsyncWithHttpInfo(Square.Connect.Model.RegisterDomainRequest)">
            <summary>
            RegisterDomain
            </summary>
            <remarks>
            Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](/payment-form/add-digital-wallets/apple-pay) guide.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (RegisterDomainResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.ApplePayApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.ApplePayApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.ApplePayApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.ApplePayApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.ApplePayApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.RegisterDomain(Square.Connect.Model.RegisterDomainRequest)">
            <summary>
            RegisterDomain Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](/payment-form/add-digital-wallets/apple-pay) guide.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>RegisterDomainResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.RegisterDomainWithHttpInfo(Square.Connect.Model.RegisterDomainRequest)">
            <summary>
            RegisterDomain Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](/payment-form/add-digital-wallets/apple-pay) guide.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of RegisterDomainResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.RegisterDomainAsync(Square.Connect.Model.RegisterDomainRequest)">
            <summary>
            RegisterDomain Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](/payment-form/add-digital-wallets/apple-pay) guide.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of RegisterDomainResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ApplePayApi.RegisterDomainAsyncWithHttpInfo(Square.Connect.Model.RegisterDomainRequest)">
            <summary>
            RegisterDomain Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](/payment-form/add-digital-wallets/apple-pay) guide.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (RegisterDomainResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.ICatalogApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchDeleteCatalogObjects(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
            <summary>
            BatchDeleteCatalogObjects
            </summary>
            <remarks>
            Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  &#x60;BatchDeleteCatalogObjects&#x60; succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchDeleteCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchDeleteCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
            <summary>
            BatchDeleteCatalogObjects
            </summary>
            <remarks>
            Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  &#x60;BatchDeleteCatalogObjects&#x60; succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchDeleteCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchRetrieveCatalogObjects(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
            <summary>
            BatchRetrieveCatalogObjects
            </summary>
            <remarks>
            Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchRetrieveCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchRetrieveCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
            <summary>
            BatchRetrieveCatalogObjects
            </summary>
            <remarks>
            Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchRetrieveCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchUpsertCatalogObjects(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
            <summary>
            BatchUpsertCatalogObjects
            </summary>
            <remarks>
            Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchUpsertCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchUpsertCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
            <summary>
            BatchUpsertCatalogObjects
            </summary>
            <remarks>
            Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchUpsertCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.CatalogInfo">
            <summary>
            CatalogInfo
            </summary>
            <remarks>
            Returns information about the Square Catalog API, such as batch size limits for &#x60;BatchUpsertCatalogObjects&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>CatalogInfoResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.CatalogInfoWithHttpInfo">
            <summary>
            CatalogInfo
            </summary>
            <remarks>
            Returns information about the Square Catalog API, such as batch size limits for &#x60;BatchUpsertCatalogObjects&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of CatalogInfoResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.DeleteCatalogObject(System.String)">
            <summary>
            DeleteCatalogObject
            </summary>
            <remarks>
            Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
            <returns>DeleteCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.DeleteCatalogObjectWithHttpInfo(System.String)">
            <summary>
            DeleteCatalogObject
            </summary>
            <remarks>
            Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
            <returns>ApiResponse of DeleteCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.ListCatalog(System.String,System.String)">
            <summary>
            ListCatalog
            </summary>
            <remarks>
            Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The &#x60;types&#x60; parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set &#x60;include_deleted_objects&#x60; to &#x60;true&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)</param>
            <returns>ListCatalogResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.ListCatalogWithHttpInfo(System.String,System.String)">
            <summary>
            ListCatalog
            </summary>
            <remarks>
            Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The &#x60;types&#x60; parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set &#x60;include_deleted_objects&#x60; to &#x60;true&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)</param>
            <returns>ApiResponse of ListCatalogResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.RetrieveCatalogObject(System.String,System.Nullable{System.Boolean})">
            <summary>
            RetrieveCatalogObject
            </summary>
            <remarks>
            Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
            <param name="includeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)</param>
            <returns>RetrieveCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.RetrieveCatalogObjectWithHttpInfo(System.String,System.Nullable{System.Boolean})">
            <summary>
            RetrieveCatalogObject
            </summary>
            <remarks>
            Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
            <param name="includeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)</param>
            <returns>ApiResponse of RetrieveCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.SearchCatalogObjects(Square.Connect.Model.SearchCatalogObjectsRequest)">
            <summary>
            SearchCatalogObjects
            </summary>
            <remarks>
            Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>SearchCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.SearchCatalogObjectsWithHttpInfo(Square.Connect.Model.SearchCatalogObjectsRequest)">
            <summary>
            SearchCatalogObjects
            </summary>
            <remarks>
            Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of SearchCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemModifierLists(Square.Connect.Model.UpdateItemModifierListsRequest)">
            <summary>
            UpdateItemModifierLists
            </summary>
            <remarks>
            Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateItemModifierListsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemModifierListsWithHttpInfo(Square.Connect.Model.UpdateItemModifierListsRequest)">
            <summary>
            UpdateItemModifierLists
            </summary>
            <remarks>
            Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateItemModifierListsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemTaxes(Square.Connect.Model.UpdateItemTaxesRequest)">
            <summary>
            UpdateItemTaxes
            </summary>
            <remarks>
            Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateItemTaxesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemTaxesWithHttpInfo(Square.Connect.Model.UpdateItemTaxesRequest)">
            <summary>
            UpdateItemTaxes
            </summary>
            <remarks>
            Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateItemTaxesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpsertCatalogObject(Square.Connect.Model.UpsertCatalogObjectRequest)">
            <summary>
            UpsertCatalogObject
            </summary>
            <remarks>
            Creates or updates the target [CatalogObject](#type-catalogobject).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpsertCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpsertCatalogObjectWithHttpInfo(Square.Connect.Model.UpsertCatalogObjectRequest)">
            <summary>
            UpsertCatalogObject
            </summary>
            <remarks>
            Creates or updates the target [CatalogObject](#type-catalogobject).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpsertCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchDeleteCatalogObjectsAsync(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
            <summary>
            BatchDeleteCatalogObjects
            </summary>
            <remarks>
            Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  &#x60;BatchDeleteCatalogObjects&#x60; succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchDeleteCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchDeleteCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
            <summary>
            BatchDeleteCatalogObjects
            </summary>
            <remarks>
            Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  &#x60;BatchDeleteCatalogObjects&#x60; succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchDeleteCatalogObjectsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchRetrieveCatalogObjectsAsync(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
            <summary>
            BatchRetrieveCatalogObjects
            </summary>
            <remarks>
            Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchRetrieveCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchRetrieveCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
            <summary>
            BatchRetrieveCatalogObjects
            </summary>
            <remarks>
            Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchRetrieveCatalogObjectsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchUpsertCatalogObjectsAsync(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
            <summary>
            BatchUpsertCatalogObjects
            </summary>
            <remarks>
            Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchUpsertCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchUpsertCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
            <summary>
            BatchUpsertCatalogObjects
            </summary>
            <remarks>
            Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchUpsertCatalogObjectsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.CatalogInfoAsync">
            <summary>
            CatalogInfo
            </summary>
            <remarks>
            Returns information about the Square Catalog API, such as batch size limits for &#x60;BatchUpsertCatalogObjects&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of CatalogInfoResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.CatalogInfoAsyncWithHttpInfo">
            <summary>
            CatalogInfo
            </summary>
            <remarks>
            Returns information about the Square Catalog API, such as batch size limits for &#x60;BatchUpsertCatalogObjects&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (CatalogInfoResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.DeleteCatalogObjectAsync(System.String)">
            <summary>
            DeleteCatalogObject
            </summary>
            <remarks>
            Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
            <returns>Task of DeleteCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.DeleteCatalogObjectAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteCatalogObject
            </summary>
            <remarks>
            Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
            <returns>Task of ApiResponse (DeleteCatalogObjectResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.ListCatalogAsync(System.String,System.String)">
            <summary>
            ListCatalog
            </summary>
            <remarks>
            Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The &#x60;types&#x60; parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set &#x60;include_deleted_objects&#x60; to &#x60;true&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)</param>
            <returns>Task of ListCatalogResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.ListCatalogAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            ListCatalog
            </summary>
            <remarks>
            Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The &#x60;types&#x60; parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set &#x60;include_deleted_objects&#x60; to &#x60;true&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)</param>
            <returns>Task of ApiResponse (ListCatalogResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.RetrieveCatalogObjectAsync(System.String,System.Nullable{System.Boolean})">
            <summary>
            RetrieveCatalogObject
            </summary>
            <remarks>
            Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
            <param name="includeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)</param>
            <returns>Task of RetrieveCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.RetrieveCatalogObjectAsyncWithHttpInfo(System.String,System.Nullable{System.Boolean})">
            <summary>
            RetrieveCatalogObject
            </summary>
            <remarks>
            Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
            <param name="includeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)</param>
            <returns>Task of ApiResponse (RetrieveCatalogObjectResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.SearchCatalogObjectsAsync(Square.Connect.Model.SearchCatalogObjectsRequest)">
            <summary>
            SearchCatalogObjects
            </summary>
            <remarks>
            Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of SearchCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.SearchCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.SearchCatalogObjectsRequest)">
            <summary>
            SearchCatalogObjects
            </summary>
            <remarks>
            Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (SearchCatalogObjectsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemModifierListsAsync(Square.Connect.Model.UpdateItemModifierListsRequest)">
            <summary>
            UpdateItemModifierLists
            </summary>
            <remarks>
            Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateItemModifierListsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemModifierListsAsyncWithHttpInfo(Square.Connect.Model.UpdateItemModifierListsRequest)">
            <summary>
            UpdateItemModifierLists
            </summary>
            <remarks>
            Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateItemModifierListsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemTaxesAsync(Square.Connect.Model.UpdateItemTaxesRequest)">
            <summary>
            UpdateItemTaxes
            </summary>
            <remarks>
            Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateItemTaxesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemTaxesAsyncWithHttpInfo(Square.Connect.Model.UpdateItemTaxesRequest)">
            <summary>
            UpdateItemTaxes
            </summary>
            <remarks>
            Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateItemTaxesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpsertCatalogObjectAsync(Square.Connect.Model.UpsertCatalogObjectRequest)">
            <summary>
            UpsertCatalogObject
            </summary>
            <remarks>
            Creates or updates the target [CatalogObject](#type-catalogobject).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpsertCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpsertCatalogObjectAsyncWithHttpInfo(Square.Connect.Model.UpsertCatalogObjectRequest)">
            <summary>
            UpsertCatalogObject
            </summary>
            <remarks>
            Creates or updates the target [CatalogObject](#type-catalogobject).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpsertCatalogObjectResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.CatalogApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.CatalogApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.CatalogApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.CatalogApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.CatalogApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchDeleteCatalogObjects(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
            <summary>
            BatchDeleteCatalogObjects Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  &#x60;BatchDeleteCatalogObjects&#x60; succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchDeleteCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchDeleteCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
            <summary>
            BatchDeleteCatalogObjects Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  &#x60;BatchDeleteCatalogObjects&#x60; succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchDeleteCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchDeleteCatalogObjectsAsync(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
            <summary>
            BatchDeleteCatalogObjects Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  &#x60;BatchDeleteCatalogObjects&#x60; succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchDeleteCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchDeleteCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
            <summary>
            BatchDeleteCatalogObjects Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  &#x60;BatchDeleteCatalogObjects&#x60; succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchDeleteCatalogObjectsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchRetrieveCatalogObjects(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
            <summary>
            BatchRetrieveCatalogObjects Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchRetrieveCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchRetrieveCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
            <summary>
            BatchRetrieveCatalogObjects Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchRetrieveCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchRetrieveCatalogObjectsAsync(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
            <summary>
            BatchRetrieveCatalogObjects Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchRetrieveCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchRetrieveCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
            <summary>
            BatchRetrieveCatalogObjects Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchRetrieveCatalogObjectsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchUpsertCatalogObjects(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
            <summary>
            BatchUpsertCatalogObjects Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchUpsertCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchUpsertCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
            <summary>
            BatchUpsertCatalogObjects Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchUpsertCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchUpsertCatalogObjectsAsync(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
            <summary>
            BatchUpsertCatalogObjects Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchUpsertCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchUpsertCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
            <summary>
            BatchUpsertCatalogObjects Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchUpsertCatalogObjectsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.CatalogInfo">
            <summary>
            CatalogInfo Returns information about the Square Catalog API, such as batch size limits for &#x60;BatchUpsertCatalogObjects&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>CatalogInfoResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.CatalogInfoWithHttpInfo">
            <summary>
            CatalogInfo Returns information about the Square Catalog API, such as batch size limits for &#x60;BatchUpsertCatalogObjects&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of CatalogInfoResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.CatalogInfoAsync">
            <summary>
            CatalogInfo Returns information about the Square Catalog API, such as batch size limits for &#x60;BatchUpsertCatalogObjects&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of CatalogInfoResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.CatalogInfoAsyncWithHttpInfo">
            <summary>
            CatalogInfo Returns information about the Square Catalog API, such as batch size limits for &#x60;BatchUpsertCatalogObjects&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (CatalogInfoResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.DeleteCatalogObject(System.String)">
            <summary>
            DeleteCatalogObject Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
            <returns>DeleteCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.DeleteCatalogObjectWithHttpInfo(System.String)">
            <summary>
            DeleteCatalogObject Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
            <returns>ApiResponse of DeleteCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.DeleteCatalogObjectAsync(System.String)">
            <summary>
            DeleteCatalogObject Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
            <returns>Task of DeleteCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.DeleteCatalogObjectAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteCatalogObject Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
            <returns>Task of ApiResponse (DeleteCatalogObjectResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.ListCatalog(System.String,System.String)">
            <summary>
            ListCatalog Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The &#x60;types&#x60; parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set &#x60;include_deleted_objects&#x60; to &#x60;true&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)</param>
            <returns>ListCatalogResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.ListCatalogWithHttpInfo(System.String,System.String)">
            <summary>
            ListCatalog Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The &#x60;types&#x60; parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set &#x60;include_deleted_objects&#x60; to &#x60;true&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)</param>
            <returns>ApiResponse of ListCatalogResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.ListCatalogAsync(System.String,System.String)">
            <summary>
            ListCatalog Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The &#x60;types&#x60; parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set &#x60;include_deleted_objects&#x60; to &#x60;true&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)</param>
            <returns>Task of ListCatalogResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.ListCatalogAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            ListCatalog Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The &#x60;types&#x60; parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set &#x60;include_deleted_objects&#x60; to &#x60;true&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;. (optional)</param>
            <returns>Task of ApiResponse (ListCatalogResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.RetrieveCatalogObject(System.String,System.Nullable{System.Boolean})">
            <summary>
            RetrieveCatalogObject Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
            <param name="includeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)</param>
            <returns>RetrieveCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.RetrieveCatalogObjectWithHttpInfo(System.String,System.Nullable{System.Boolean})">
            <summary>
            RetrieveCatalogObject Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
            <param name="includeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)</param>
            <returns>ApiResponse of RetrieveCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.RetrieveCatalogObjectAsync(System.String,System.Nullable{System.Boolean})">
            <summary>
            RetrieveCatalogObject Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
            <param name="includeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)</param>
            <returns>Task of RetrieveCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.RetrieveCatalogObjectAsyncWithHttpInfo(System.String,System.Nullable{System.Boolean})">
            <summary>
            RetrieveCatalogObject Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
            <param name="includeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60; (optional)</param>
            <returns>Task of ApiResponse (RetrieveCatalogObjectResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.SearchCatalogObjects(Square.Connect.Model.SearchCatalogObjectsRequest)">
            <summary>
            SearchCatalogObjects Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>SearchCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.SearchCatalogObjectsWithHttpInfo(Square.Connect.Model.SearchCatalogObjectsRequest)">
            <summary>
            SearchCatalogObjects Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of SearchCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.SearchCatalogObjectsAsync(Square.Connect.Model.SearchCatalogObjectsRequest)">
            <summary>
            SearchCatalogObjects Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of SearchCatalogObjectsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.SearchCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.SearchCatalogObjectsRequest)">
            <summary>
            SearchCatalogObjects Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (SearchCatalogObjectsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemModifierLists(Square.Connect.Model.UpdateItemModifierListsRequest)">
            <summary>
            UpdateItemModifierLists Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateItemModifierListsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemModifierListsWithHttpInfo(Square.Connect.Model.UpdateItemModifierListsRequest)">
            <summary>
            UpdateItemModifierLists Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateItemModifierListsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemModifierListsAsync(Square.Connect.Model.UpdateItemModifierListsRequest)">
            <summary>
            UpdateItemModifierLists Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateItemModifierListsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemModifierListsAsyncWithHttpInfo(Square.Connect.Model.UpdateItemModifierListsRequest)">
            <summary>
            UpdateItemModifierLists Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateItemModifierListsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemTaxes(Square.Connect.Model.UpdateItemTaxesRequest)">
            <summary>
            UpdateItemTaxes Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateItemTaxesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemTaxesWithHttpInfo(Square.Connect.Model.UpdateItemTaxesRequest)">
            <summary>
            UpdateItemTaxes Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateItemTaxesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemTaxesAsync(Square.Connect.Model.UpdateItemTaxesRequest)">
            <summary>
            UpdateItemTaxes Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateItemTaxesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemTaxesAsyncWithHttpInfo(Square.Connect.Model.UpdateItemTaxesRequest)">
            <summary>
            UpdateItemTaxes Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateItemTaxesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpsertCatalogObject(Square.Connect.Model.UpsertCatalogObjectRequest)">
            <summary>
            UpsertCatalogObject Creates or updates the target [CatalogObject](#type-catalogobject).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpsertCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpsertCatalogObjectWithHttpInfo(Square.Connect.Model.UpsertCatalogObjectRequest)">
            <summary>
            UpsertCatalogObject Creates or updates the target [CatalogObject](#type-catalogobject).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpsertCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpsertCatalogObjectAsync(Square.Connect.Model.UpsertCatalogObjectRequest)">
            <summary>
            UpsertCatalogObject Creates or updates the target [CatalogObject](#type-catalogobject).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpsertCatalogObjectResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpsertCatalogObjectAsyncWithHttpInfo(Square.Connect.Model.UpsertCatalogObjectRequest)">
            <summary>
            UpsertCatalogObject Creates or updates the target [CatalogObject](#type-catalogobject).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpsertCatalogObjectResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.ICheckoutApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckout(System.String,Square.Connect.Model.CreateCheckoutRequest)">
            <summary>
            CreateCheckout
            </summary>
            <remarks>
            Links a &#x60;checkoutId&#x60; to a &#x60;checkout_page_url&#x60; that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the checkout with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateCheckoutResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckoutWithHttpInfo(System.String,Square.Connect.Model.CreateCheckoutRequest)">
            <summary>
            CreateCheckout
            </summary>
            <remarks>
            Links a &#x60;checkoutId&#x60; to a &#x60;checkout_page_url&#x60; that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the checkout with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateCheckoutResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckoutAsync(System.String,Square.Connect.Model.CreateCheckoutRequest)">
            <summary>
            CreateCheckout
            </summary>
            <remarks>
            Links a &#x60;checkoutId&#x60; to a &#x60;checkout_page_url&#x60; that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the checkout with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateCheckoutResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckoutAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCheckoutRequest)">
            <summary>
            CreateCheckout
            </summary>
            <remarks>
            Links a &#x60;checkoutId&#x60; to a &#x60;checkout_page_url&#x60; that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the checkout with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateCheckoutResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.CheckoutApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.CheckoutApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.CheckoutApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.CheckoutApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.CheckoutApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckout(System.String,Square.Connect.Model.CreateCheckoutRequest)">
            <summary>
            CreateCheckout Links a &#x60;checkoutId&#x60; to a &#x60;checkout_page_url&#x60; that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the checkout with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateCheckoutResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckoutWithHttpInfo(System.String,Square.Connect.Model.CreateCheckoutRequest)">
            <summary>
            CreateCheckout Links a &#x60;checkoutId&#x60; to a &#x60;checkout_page_url&#x60; that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the checkout with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateCheckoutResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckoutAsync(System.String,Square.Connect.Model.CreateCheckoutRequest)">
            <summary>
            CreateCheckout Links a &#x60;checkoutId&#x60; to a &#x60;checkout_page_url&#x60; that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the checkout with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateCheckoutResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckoutAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCheckoutRequest)">
            <summary>
            CreateCheckout Links a &#x60;checkoutId&#x60; to a &#x60;checkout_page_url&#x60; that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the checkout with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateCheckoutResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.ICustomersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomer(Square.Connect.Model.CreateCustomerRequest)">
            <summary>
            CreateCustomer
            </summary>
            <remarks>
            Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - &#x60;given_name&#x60; - &#x60;family_name&#x60; - &#x60;company_name&#x60; - &#x60;email_address&#x60; - &#x60;phone_number&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerWithHttpInfo(Square.Connect.Model.CreateCustomerRequest)">
            <summary>
            CreateCustomer
            </summary>
            <remarks>
            Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - &#x60;given_name&#x60; - &#x60;family_name&#x60; - &#x60;company_name&#x60; - &#x60;email_address&#x60; - &#x60;phone_number&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerCard(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
            <summary>
            CreateCustomerCard
            </summary>
            <remarks>
            Adds a card on file to an existing customer.  As with charges, calls to &#x60;CreateCustomerCard&#x60; are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.  Cards on file are automatically updated on a monthly basis to confirm they are still valid and can be charged.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The Square ID of the customer profile the card is linked to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerCardWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
            <summary>
            CreateCustomerCard
            </summary>
            <remarks>
            Adds a card on file to an existing customer.  As with charges, calls to &#x60;CreateCustomerCard&#x60; are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.  Cards on file are automatically updated on a monthly basis to confirm they are still valid and can be charged.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The Square ID of the customer profile the card is linked to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomer(System.String)">
            <summary>
            DeleteCustomer
            </summary>
            <remarks>
            Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to delete merged profiles.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to delete.</param>
            <returns>DeleteCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerWithHttpInfo(System.String)">
            <summary>
            DeleteCustomer
            </summary>
            <remarks>
            Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to delete merged profiles.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to delete.</param>
            <returns>ApiResponse of DeleteCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerCard(System.String,System.String)">
            <summary>
            DeleteCustomerCard
            </summary>
            <remarks>
            Removes a card on file from a customer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer that the card on file belongs to.</param>
            <param name="cardId">The ID of the card on file to delete.</param>
            <returns>DeleteCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerCardWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteCustomerCard
            </summary>
            <remarks>
            Removes a card on file from a customer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer that the card on file belongs to.</param>
            <param name="cardId">The ID of the card on file to delete.</param>
            <returns>ApiResponse of DeleteCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.ListCustomers(System.String,System.String,System.String)">
            <summary>
            ListCustomers
            </summary>
            <remarks>
            Lists a business&#39;s customers.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="sortField">Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)</param>
            <param name="sortOrder">Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)</param>
            <returns>ListCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.ListCustomersWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ListCustomers
            </summary>
            <remarks>
            Lists a business&#39;s customers.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="sortField">Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)</param>
            <param name="sortOrder">Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)</param>
            <returns>ApiResponse of ListCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.RetrieveCustomer(System.String)">
            <summary>
            RetrieveCustomer
            </summary>
            <remarks>
            Returns details for a single customer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to retrieve.</param>
            <returns>RetrieveCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.RetrieveCustomerWithHttpInfo(System.String)">
            <summary>
            RetrieveCustomer
            </summary>
            <remarks>
            Returns details for a single customer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to retrieve.</param>
            <returns>ApiResponse of RetrieveCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.SearchCustomers(Square.Connect.Model.SearchCustomersRequest)">
            <summary>
            SearchCustomers
            </summary>
            <remarks>
            Searches the customer profiles associated with a Square account. Calling SearchCustomers without an explicit query parameter returns all customer profiles ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>SearchCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.SearchCustomersWithHttpInfo(Square.Connect.Model.SearchCustomersRequest)">
            <summary>
            SearchCustomers
            </summary>
            <remarks>
            Searches the customer profiles associated with a Square account. Calling SearchCustomers without an explicit query parameter returns all customer profiles ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of SearchCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.UpdateCustomer(System.String,Square.Connect.Model.UpdateCustomerRequest)">
            <summary>
            UpdateCustomer
            </summary>
            <remarks>
            Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to update merged profiles.  You cannot edit a customer&#39;s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-customers-createcustomercard) endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to update.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.UpdateCustomerWithHttpInfo(System.String,Square.Connect.Model.UpdateCustomerRequest)">
            <summary>
            UpdateCustomer
            </summary>
            <remarks>
            Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to update merged profiles.  You cannot edit a customer&#39;s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-customers-createcustomercard) endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to update.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerAsync(Square.Connect.Model.CreateCustomerRequest)">
            <summary>
            CreateCustomer
            </summary>
            <remarks>
            Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - &#x60;given_name&#x60; - &#x60;family_name&#x60; - &#x60;company_name&#x60; - &#x60;email_address&#x60; - &#x60;phone_number&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerAsyncWithHttpInfo(Square.Connect.Model.CreateCustomerRequest)">
            <summary>
            CreateCustomer
            </summary>
            <remarks>
            Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - &#x60;given_name&#x60; - &#x60;family_name&#x60; - &#x60;company_name&#x60; - &#x60;email_address&#x60; - &#x60;phone_number&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerCardAsync(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
            <summary>
            CreateCustomerCard
            </summary>
            <remarks>
            Adds a card on file to an existing customer.  As with charges, calls to &#x60;CreateCustomerCard&#x60; are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.  Cards on file are automatically updated on a monthly basis to confirm they are still valid and can be charged.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The Square ID of the customer profile the card is linked to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerCardAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
            <summary>
            CreateCustomerCard
            </summary>
            <remarks>
            Adds a card on file to an existing customer.  As with charges, calls to &#x60;CreateCustomerCard&#x60; are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.  Cards on file are automatically updated on a monthly basis to confirm they are still valid and can be charged.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The Square ID of the customer profile the card is linked to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateCustomerCardResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerAsync(System.String)">
            <summary>
            DeleteCustomer
            </summary>
            <remarks>
            Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to delete merged profiles.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to delete.</param>
            <returns>Task of DeleteCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteCustomer
            </summary>
            <remarks>
            Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to delete merged profiles.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to delete.</param>
            <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerCardAsync(System.String,System.String)">
            <summary>
            DeleteCustomerCard
            </summary>
            <remarks>
            Removes a card on file from a customer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer that the card on file belongs to.</param>
            <param name="cardId">The ID of the card on file to delete.</param>
            <returns>Task of DeleteCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerCardAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteCustomerCard
            </summary>
            <remarks>
            Removes a card on file from a customer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer that the card on file belongs to.</param>
            <param name="cardId">The ID of the card on file to delete.</param>
            <returns>Task of ApiResponse (DeleteCustomerCardResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.ListCustomersAsync(System.String,System.String,System.String)">
            <summary>
            ListCustomers
            </summary>
            <remarks>
            Lists a business&#39;s customers.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="sortField">Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)</param>
            <param name="sortOrder">Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)</param>
            <returns>Task of ListCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.ListCustomersAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ListCustomers
            </summary>
            <remarks>
            Lists a business&#39;s customers.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="sortField">Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)</param>
            <param name="sortOrder">Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)</param>
            <returns>Task of ApiResponse (ListCustomersResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.RetrieveCustomerAsync(System.String)">
            <summary>
            RetrieveCustomer
            </summary>
            <remarks>
            Returns details for a single customer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to retrieve.</param>
            <returns>Task of RetrieveCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.RetrieveCustomerAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveCustomer
            </summary>
            <remarks>
            Returns details for a single customer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to retrieve.</param>
            <returns>Task of ApiResponse (RetrieveCustomerResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.SearchCustomersAsync(Square.Connect.Model.SearchCustomersRequest)">
            <summary>
            SearchCustomers
            </summary>
            <remarks>
            Searches the customer profiles associated with a Square account. Calling SearchCustomers without an explicit query parameter returns all customer profiles ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of SearchCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.SearchCustomersAsyncWithHttpInfo(Square.Connect.Model.SearchCustomersRequest)">
            <summary>
            SearchCustomers
            </summary>
            <remarks>
            Searches the customer profiles associated with a Square account. Calling SearchCustomers without an explicit query parameter returns all customer profiles ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (SearchCustomersResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.UpdateCustomerAsync(System.String,Square.Connect.Model.UpdateCustomerRequest)">
            <summary>
            UpdateCustomer
            </summary>
            <remarks>
            Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to update merged profiles.  You cannot edit a customer&#39;s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-customers-createcustomercard) endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to update.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ICustomersApi.UpdateCustomerAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateCustomerRequest)">
            <summary>
            UpdateCustomer
            </summary>
            <remarks>
            Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to update merged profiles.  You cannot edit a customer&#39;s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-customers-createcustomercard) endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to update.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.CustomersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomersApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.CustomersApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.CustomersApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomer(Square.Connect.Model.CreateCustomerRequest)">
            <summary>
            CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - &#x60;given_name&#x60; - &#x60;family_name&#x60; - &#x60;company_name&#x60; - &#x60;email_address&#x60; - &#x60;phone_number&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerWithHttpInfo(Square.Connect.Model.CreateCustomerRequest)">
            <summary>
            CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - &#x60;given_name&#x60; - &#x60;family_name&#x60; - &#x60;company_name&#x60; - &#x60;email_address&#x60; - &#x60;phone_number&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerAsync(Square.Connect.Model.CreateCustomerRequest)">
            <summary>
            CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - &#x60;given_name&#x60; - &#x60;family_name&#x60; - &#x60;company_name&#x60; - &#x60;email_address&#x60; - &#x60;phone_number&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerAsyncWithHttpInfo(Square.Connect.Model.CreateCustomerRequest)">
            <summary>
            CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - &#x60;given_name&#x60; - &#x60;family_name&#x60; - &#x60;company_name&#x60; - &#x60;email_address&#x60; - &#x60;phone_number&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerCard(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
            <summary>
            CreateCustomerCard Adds a card on file to an existing customer.  As with charges, calls to &#x60;CreateCustomerCard&#x60; are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.  Cards on file are automatically updated on a monthly basis to confirm they are still valid and can be charged.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The Square ID of the customer profile the card is linked to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerCardWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
            <summary>
            CreateCustomerCard Adds a card on file to an existing customer.  As with charges, calls to &#x60;CreateCustomerCard&#x60; are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.  Cards on file are automatically updated on a monthly basis to confirm they are still valid and can be charged.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The Square ID of the customer profile the card is linked to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerCardAsync(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
            <summary>
            CreateCustomerCard Adds a card on file to an existing customer.  As with charges, calls to &#x60;CreateCustomerCard&#x60; are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.  Cards on file are automatically updated on a monthly basis to confirm they are still valid and can be charged.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The Square ID of the customer profile the card is linked to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerCardAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
            <summary>
            CreateCustomerCard Adds a card on file to an existing customer.  As with charges, calls to &#x60;CreateCustomerCard&#x60; are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.  Cards on file are automatically updated on a monthly basis to confirm they are still valid and can be charged.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The Square ID of the customer profile the card is linked to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateCustomerCardResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomer(System.String)">
            <summary>
            DeleteCustomer Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to delete merged profiles.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to delete.</param>
            <returns>DeleteCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerWithHttpInfo(System.String)">
            <summary>
            DeleteCustomer Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to delete merged profiles.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to delete.</param>
            <returns>ApiResponse of DeleteCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerAsync(System.String)">
            <summary>
            DeleteCustomer Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to delete merged profiles.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to delete.</param>
            <returns>Task of DeleteCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteCustomer Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to delete merged profiles.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to delete.</param>
            <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerCard(System.String,System.String)">
            <summary>
            DeleteCustomerCard Removes a card on file from a customer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer that the card on file belongs to.</param>
            <param name="cardId">The ID of the card on file to delete.</param>
            <returns>DeleteCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerCardWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteCustomerCard Removes a card on file from a customer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer that the card on file belongs to.</param>
            <param name="cardId">The ID of the card on file to delete.</param>
            <returns>ApiResponse of DeleteCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerCardAsync(System.String,System.String)">
            <summary>
            DeleteCustomerCard Removes a card on file from a customer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer that the card on file belongs to.</param>
            <param name="cardId">The ID of the card on file to delete.</param>
            <returns>Task of DeleteCustomerCardResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerCardAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteCustomerCard Removes a card on file from a customer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer that the card on file belongs to.</param>
            <param name="cardId">The ID of the card on file to delete.</param>
            <returns>Task of ApiResponse (DeleteCustomerCardResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.ListCustomers(System.String,System.String,System.String)">
            <summary>
            ListCustomers Lists a business&#39;s customers.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="sortField">Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)</param>
            <param name="sortOrder">Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)</param>
            <returns>ListCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.ListCustomersWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ListCustomers Lists a business&#39;s customers.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="sortField">Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)</param>
            <param name="sortOrder">Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)</param>
            <returns>ApiResponse of ListCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.ListCustomersAsync(System.String,System.String,System.String)">
            <summary>
            ListCustomers Lists a business&#39;s customers.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="sortField">Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)</param>
            <param name="sortOrder">Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)</param>
            <returns>Task of ListCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.ListCustomersAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ListCustomers Lists a business&#39;s customers.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <param name="sortField">Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. (optional)</param>
            <param name="sortOrder">Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. (optional)</param>
            <returns>Task of ApiResponse (ListCustomersResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.RetrieveCustomer(System.String)">
            <summary>
            RetrieveCustomer Returns details for a single customer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to retrieve.</param>
            <returns>RetrieveCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.RetrieveCustomerWithHttpInfo(System.String)">
            <summary>
            RetrieveCustomer Returns details for a single customer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to retrieve.</param>
            <returns>ApiResponse of RetrieveCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.RetrieveCustomerAsync(System.String)">
            <summary>
            RetrieveCustomer Returns details for a single customer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to retrieve.</param>
            <returns>Task of RetrieveCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.RetrieveCustomerAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveCustomer Returns details for a single customer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to retrieve.</param>
            <returns>Task of ApiResponse (RetrieveCustomerResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.SearchCustomers(Square.Connect.Model.SearchCustomersRequest)">
            <summary>
            SearchCustomers Searches the customer profiles associated with a Square account. Calling SearchCustomers without an explicit query parameter returns all customer profiles ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>SearchCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.SearchCustomersWithHttpInfo(Square.Connect.Model.SearchCustomersRequest)">
            <summary>
            SearchCustomers Searches the customer profiles associated with a Square account. Calling SearchCustomers without an explicit query parameter returns all customer profiles ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of SearchCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.SearchCustomersAsync(Square.Connect.Model.SearchCustomersRequest)">
            <summary>
            SearchCustomers Searches the customer profiles associated with a Square account. Calling SearchCustomers without an explicit query parameter returns all customer profiles ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of SearchCustomersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.SearchCustomersAsyncWithHttpInfo(Square.Connect.Model.SearchCustomersRequest)">
            <summary>
            SearchCustomers Searches the customer profiles associated with a Square account. Calling SearchCustomers without an explicit query parameter returns all customer profiles ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (SearchCustomersResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.UpdateCustomer(System.String,Square.Connect.Model.UpdateCustomerRequest)">
            <summary>
            UpdateCustomer Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to update merged profiles.  You cannot edit a customer&#39;s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-customers-createcustomercard) endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to update.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.UpdateCustomerWithHttpInfo(System.String,Square.Connect.Model.UpdateCustomerRequest)">
            <summary>
            UpdateCustomer Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to update merged profiles.  You cannot edit a customer&#39;s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-customers-createcustomercard) endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to update.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.UpdateCustomerAsync(System.String,Square.Connect.Model.UpdateCustomerRequest)">
            <summary>
            UpdateCustomer Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to update merged profiles.  You cannot edit a customer&#39;s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-customers-createcustomercard) endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to update.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateCustomerResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.CustomersApi.UpdateCustomerAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateCustomerRequest)">
            <summary>
            UpdateCustomer Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new &#x60;customer_id&#x60;. You must use the new &#x60;customer_id&#x60; to update merged profiles.  You cannot edit a customer&#39;s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-customers-createcustomercard) endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customerId">The ID of the customer to update.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.IEmployeesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IEmployeesApi.ListEmployees(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees
            </summary>
            <remarks>
            Gets a list of &#x60;Employee&#x60; objects for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter employees returned to only those that are associated with the specified location. (optional)</param>
            <param name="status">Specifies the EmployeeStatus to filter the employee by. (optional)</param>
            <param name="limit">The number of employees to be returned on each page. (optional)</param>
            <param name="cursor">The token required to retrieve the specified page of results. (optional)</param>
            <returns>ListEmployeesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IEmployeesApi.ListEmployeesWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees
            </summary>
            <remarks>
            Gets a list of &#x60;Employee&#x60; objects for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter employees returned to only those that are associated with the specified location. (optional)</param>
            <param name="status">Specifies the EmployeeStatus to filter the employee by. (optional)</param>
            <param name="limit">The number of employees to be returned on each page. (optional)</param>
            <param name="cursor">The token required to retrieve the specified page of results. (optional)</param>
            <returns>ApiResponse of ListEmployeesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IEmployeesApi.RetrieveEmployee(System.String)">
            <summary>
            RetrieveEmployee
            </summary>
            <remarks>
            Gets an &#x60;Employee&#x60; by Square-assigned employee &#x60;ID&#x60; (UUID)
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the employee that was requested.</param>
            <returns>RetrieveEmployeeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IEmployeesApi.RetrieveEmployeeWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployee
            </summary>
            <remarks>
            Gets an &#x60;Employee&#x60; by Square-assigned employee &#x60;ID&#x60; (UUID)
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the employee that was requested.</param>
            <returns>ApiResponse of RetrieveEmployeeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IEmployeesApi.ListEmployeesAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees
            </summary>
            <remarks>
            Gets a list of &#x60;Employee&#x60; objects for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter employees returned to only those that are associated with the specified location. (optional)</param>
            <param name="status">Specifies the EmployeeStatus to filter the employee by. (optional)</param>
            <param name="limit">The number of employees to be returned on each page. (optional)</param>
            <param name="cursor">The token required to retrieve the specified page of results. (optional)</param>
            <returns>Task of ListEmployeesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IEmployeesApi.ListEmployeesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees
            </summary>
            <remarks>
            Gets a list of &#x60;Employee&#x60; objects for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter employees returned to only those that are associated with the specified location. (optional)</param>
            <param name="status">Specifies the EmployeeStatus to filter the employee by. (optional)</param>
            <param name="limit">The number of employees to be returned on each page. (optional)</param>
            <param name="cursor">The token required to retrieve the specified page of results. (optional)</param>
            <returns>Task of ApiResponse (ListEmployeesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IEmployeesApi.RetrieveEmployeeAsync(System.String)">
            <summary>
            RetrieveEmployee
            </summary>
            <remarks>
            Gets an &#x60;Employee&#x60; by Square-assigned employee &#x60;ID&#x60; (UUID)
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the employee that was requested.</param>
            <returns>Task of RetrieveEmployeeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IEmployeesApi.RetrieveEmployeeAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployee
            </summary>
            <remarks>
            Gets an &#x60;Employee&#x60; by Square-assigned employee &#x60;ID&#x60; (UUID)
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the employee that was requested.</param>
            <returns>Task of ApiResponse (RetrieveEmployeeResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.EmployeesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.EmployeesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.EmployeesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.EmployeesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.EmployeesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.ListEmployees(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees Gets a list of &#x60;Employee&#x60; objects for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter employees returned to only those that are associated with the specified location. (optional)</param>
            <param name="status">Specifies the EmployeeStatus to filter the employee by. (optional)</param>
            <param name="limit">The number of employees to be returned on each page. (optional)</param>
            <param name="cursor">The token required to retrieve the specified page of results. (optional)</param>
            <returns>ListEmployeesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.ListEmployeesWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees Gets a list of &#x60;Employee&#x60; objects for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter employees returned to only those that are associated with the specified location. (optional)</param>
            <param name="status">Specifies the EmployeeStatus to filter the employee by. (optional)</param>
            <param name="limit">The number of employees to be returned on each page. (optional)</param>
            <param name="cursor">The token required to retrieve the specified page of results. (optional)</param>
            <returns>ApiResponse of ListEmployeesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.ListEmployeesAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees Gets a list of &#x60;Employee&#x60; objects for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter employees returned to only those that are associated with the specified location. (optional)</param>
            <param name="status">Specifies the EmployeeStatus to filter the employee by. (optional)</param>
            <param name="limit">The number of employees to be returned on each page. (optional)</param>
            <param name="cursor">The token required to retrieve the specified page of results. (optional)</param>
            <returns>Task of ListEmployeesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.ListEmployeesAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees Gets a list of &#x60;Employee&#x60; objects for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter employees returned to only those that are associated with the specified location. (optional)</param>
            <param name="status">Specifies the EmployeeStatus to filter the employee by. (optional)</param>
            <param name="limit">The number of employees to be returned on each page. (optional)</param>
            <param name="cursor">The token required to retrieve the specified page of results. (optional)</param>
            <returns>Task of ApiResponse (ListEmployeesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.RetrieveEmployee(System.String)">
            <summary>
            RetrieveEmployee Gets an &#x60;Employee&#x60; by Square-assigned employee &#x60;ID&#x60; (UUID)
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the employee that was requested.</param>
            <returns>RetrieveEmployeeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.RetrieveEmployeeWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployee Gets an &#x60;Employee&#x60; by Square-assigned employee &#x60;ID&#x60; (UUID)
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the employee that was requested.</param>
            <returns>ApiResponse of RetrieveEmployeeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.RetrieveEmployeeAsync(System.String)">
            <summary>
            RetrieveEmployee Gets an &#x60;Employee&#x60; by Square-assigned employee &#x60;ID&#x60; (UUID)
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the employee that was requested.</param>
            <returns>Task of RetrieveEmployeeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.EmployeesApi.RetrieveEmployeeAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployee Gets an &#x60;Employee&#x60; by Square-assigned employee &#x60;ID&#x60; (UUID)
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the employee that was requested.</param>
            <returns>Task of ApiResponse (RetrieveEmployeeResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.IInventoryApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchChangeInventory(Square.Connect.Model.BatchChangeInventoryRequest)">
            <summary>
            BatchChangeInventory
            </summary>
            <remarks>
            Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchChangeInventoryResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchChangeInventoryWithHttpInfo(Square.Connect.Model.BatchChangeInventoryRequest)">
            <summary>
            BatchChangeInventory
            </summary>
            <remarks>
            Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchChangeInventoryResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchRetrieveInventoryChanges(Square.Connect.Model.BatchRetrieveInventoryChangesRequest)">
            <summary>
            BatchRetrieveInventoryChanges
            </summary>
            <remarks>
            Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchRetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchRetrieveInventoryChangesWithHttpInfo(Square.Connect.Model.BatchRetrieveInventoryChangesRequest)">
            <summary>
            BatchRetrieveInventoryChanges
            </summary>
            <remarks>
            Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchRetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchRetrieveInventoryCounts(Square.Connect.Model.BatchRetrieveInventoryCountsRequest)">
            <summary>
            BatchRetrieveInventoryCounts
            </summary>
            <remarks>
            Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchRetrieveInventoryCountsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchRetrieveInventoryCountsWithHttpInfo(Square.Connect.Model.BatchRetrieveInventoryCountsRequest)">
            <summary>
            BatchRetrieveInventoryCounts
            </summary>
            <remarks>
            Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchRetrieveInventoryCountsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryAdjustment(System.String)">
            <summary>
            RetrieveInventoryAdjustment
            </summary>
            <remarks>
            Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="adjustmentId">ID of the [InventoryAdjustment](#type-inventoryadjustment) to retrieve.</param>
            <returns>RetrieveInventoryAdjustmentResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryAdjustmentWithHttpInfo(System.String)">
            <summary>
            RetrieveInventoryAdjustment
            </summary>
            <remarks>
            Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="adjustmentId">ID of the [InventoryAdjustment](#type-inventoryadjustment) to retrieve.</param>
            <returns>ApiResponse of RetrieveInventoryAdjustmentResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryChanges(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryChanges
            </summary>
            <remarks>
            Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>RetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryChangesWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryChanges
            </summary>
            <remarks>
            Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of RetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryCount(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryCount
            </summary>
            <remarks>
            Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>RetrieveInventoryCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryCountWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryCount
            </summary>
            <remarks>
            Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of RetrieveInventoryCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryPhysicalCount(System.String)">
            <summary>
            RetrieveInventoryPhysicalCount
            </summary>
            <remarks>
            Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="physicalCountId">ID of the [InventoryPhysicalCount](#type-inventoryphysicalcount) to retrieve.</param>
            <returns>RetrieveInventoryPhysicalCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryPhysicalCountWithHttpInfo(System.String)">
            <summary>
            RetrieveInventoryPhysicalCount
            </summary>
            <remarks>
            Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="physicalCountId">ID of the [InventoryPhysicalCount](#type-inventoryphysicalcount) to retrieve.</param>
            <returns>ApiResponse of RetrieveInventoryPhysicalCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchChangeInventoryAsync(Square.Connect.Model.BatchChangeInventoryRequest)">
            <summary>
            BatchChangeInventory
            </summary>
            <remarks>
            Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchChangeInventoryResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchChangeInventoryAsyncWithHttpInfo(Square.Connect.Model.BatchChangeInventoryRequest)">
            <summary>
            BatchChangeInventory
            </summary>
            <remarks>
            Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchChangeInventoryResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchRetrieveInventoryChangesAsync(Square.Connect.Model.BatchRetrieveInventoryChangesRequest)">
            <summary>
            BatchRetrieveInventoryChanges
            </summary>
            <remarks>
            Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchRetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchRetrieveInventoryChangesAsyncWithHttpInfo(Square.Connect.Model.BatchRetrieveInventoryChangesRequest)">
            <summary>
            BatchRetrieveInventoryChanges
            </summary>
            <remarks>
            Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchRetrieveInventoryChangesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchRetrieveInventoryCountsAsync(Square.Connect.Model.BatchRetrieveInventoryCountsRequest)">
            <summary>
            BatchRetrieveInventoryCounts
            </summary>
            <remarks>
            Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchRetrieveInventoryCountsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.BatchRetrieveInventoryCountsAsyncWithHttpInfo(Square.Connect.Model.BatchRetrieveInventoryCountsRequest)">
            <summary>
            BatchRetrieveInventoryCounts
            </summary>
            <remarks>
            Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchRetrieveInventoryCountsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryAdjustmentAsync(System.String)">
            <summary>
            RetrieveInventoryAdjustment
            </summary>
            <remarks>
            Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="adjustmentId">ID of the [InventoryAdjustment](#type-inventoryadjustment) to retrieve.</param>
            <returns>Task of RetrieveInventoryAdjustmentResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryAdjustmentAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveInventoryAdjustment
            </summary>
            <remarks>
            Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="adjustmentId">ID of the [InventoryAdjustment](#type-inventoryadjustment) to retrieve.</param>
            <returns>Task of ApiResponse (RetrieveInventoryAdjustmentResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryChangesAsync(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryChanges
            </summary>
            <remarks>
            Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of RetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryChangesAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryChanges
            </summary>
            <remarks>
            Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (RetrieveInventoryChangesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryCountAsync(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryCount
            </summary>
            <remarks>
            Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of RetrieveInventoryCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryCountAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryCount
            </summary>
            <remarks>
            Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (RetrieveInventoryCountResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryPhysicalCountAsync(System.String)">
            <summary>
            RetrieveInventoryPhysicalCount
            </summary>
            <remarks>
            Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="physicalCountId">ID of the [InventoryPhysicalCount](#type-inventoryphysicalcount) to retrieve.</param>
            <returns>Task of RetrieveInventoryPhysicalCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IInventoryApi.RetrieveInventoryPhysicalCountAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveInventoryPhysicalCount
            </summary>
            <remarks>
            Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="physicalCountId">ID of the [InventoryPhysicalCount](#type-inventoryphysicalcount) to retrieve.</param>
            <returns>Task of ApiResponse (RetrieveInventoryPhysicalCountResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.InventoryApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.InventoryApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.InventoryApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.InventoryApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.InventoryApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchChangeInventory(Square.Connect.Model.BatchChangeInventoryRequest)">
            <summary>
            BatchChangeInventory Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchChangeInventoryResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchChangeInventoryWithHttpInfo(Square.Connect.Model.BatchChangeInventoryRequest)">
            <summary>
            BatchChangeInventory Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchChangeInventoryResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchChangeInventoryAsync(Square.Connect.Model.BatchChangeInventoryRequest)">
            <summary>
            BatchChangeInventory Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchChangeInventoryResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchChangeInventoryAsyncWithHttpInfo(Square.Connect.Model.BatchChangeInventoryRequest)">
            <summary>
            BatchChangeInventory Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchChangeInventoryResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchRetrieveInventoryChanges(Square.Connect.Model.BatchRetrieveInventoryChangesRequest)">
            <summary>
            BatchRetrieveInventoryChanges Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchRetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchRetrieveInventoryChangesWithHttpInfo(Square.Connect.Model.BatchRetrieveInventoryChangesRequest)">
            <summary>
            BatchRetrieveInventoryChanges Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchRetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchRetrieveInventoryChangesAsync(Square.Connect.Model.BatchRetrieveInventoryChangesRequest)">
            <summary>
            BatchRetrieveInventoryChanges Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchRetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchRetrieveInventoryChangesAsyncWithHttpInfo(Square.Connect.Model.BatchRetrieveInventoryChangesRequest)">
            <summary>
            BatchRetrieveInventoryChanges Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchRetrieveInventoryChangesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchRetrieveInventoryCounts(Square.Connect.Model.BatchRetrieveInventoryCountsRequest)">
            <summary>
            BatchRetrieveInventoryCounts Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchRetrieveInventoryCountsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchRetrieveInventoryCountsWithHttpInfo(Square.Connect.Model.BatchRetrieveInventoryCountsRequest)">
            <summary>
            BatchRetrieveInventoryCounts Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchRetrieveInventoryCountsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchRetrieveInventoryCountsAsync(Square.Connect.Model.BatchRetrieveInventoryCountsRequest)">
            <summary>
            BatchRetrieveInventoryCounts Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchRetrieveInventoryCountsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.BatchRetrieveInventoryCountsAsyncWithHttpInfo(Square.Connect.Model.BatchRetrieveInventoryCountsRequest)">
            <summary>
            BatchRetrieveInventoryCounts Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchRetrieveInventoryCountsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryAdjustment(System.String)">
            <summary>
            RetrieveInventoryAdjustment Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="adjustmentId">ID of the [InventoryAdjustment](#type-inventoryadjustment) to retrieve.</param>
            <returns>RetrieveInventoryAdjustmentResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryAdjustmentWithHttpInfo(System.String)">
            <summary>
            RetrieveInventoryAdjustment Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="adjustmentId">ID of the [InventoryAdjustment](#type-inventoryadjustment) to retrieve.</param>
            <returns>ApiResponse of RetrieveInventoryAdjustmentResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryAdjustmentAsync(System.String)">
            <summary>
            RetrieveInventoryAdjustment Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="adjustmentId">ID of the [InventoryAdjustment](#type-inventoryadjustment) to retrieve.</param>
            <returns>Task of RetrieveInventoryAdjustmentResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryAdjustmentAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveInventoryAdjustment Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="adjustmentId">ID of the [InventoryAdjustment](#type-inventoryadjustment) to retrieve.</param>
            <returns>Task of ApiResponse (RetrieveInventoryAdjustmentResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryChanges(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryChanges Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>RetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryChangesWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryChanges Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of RetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryChangesAsync(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryChanges Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of RetrieveInventoryChangesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryChangesAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryChanges Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (RetrieveInventoryChangesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryCount(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryCount Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>RetrieveInventoryCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryCountWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryCount Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of RetrieveInventoryCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryCountAsync(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryCount Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of RetrieveInventoryCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryCountAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RetrieveInventoryCount Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="catalogObjectId">ID of the [CatalogObject](#type-catalogobject) to retrieve.</param>
            <param name="locationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (RetrieveInventoryCountResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryPhysicalCount(System.String)">
            <summary>
            RetrieveInventoryPhysicalCount Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="physicalCountId">ID of the [InventoryPhysicalCount](#type-inventoryphysicalcount) to retrieve.</param>
            <returns>RetrieveInventoryPhysicalCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryPhysicalCountWithHttpInfo(System.String)">
            <summary>
            RetrieveInventoryPhysicalCount Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="physicalCountId">ID of the [InventoryPhysicalCount](#type-inventoryphysicalcount) to retrieve.</param>
            <returns>ApiResponse of RetrieveInventoryPhysicalCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryPhysicalCountAsync(System.String)">
            <summary>
            RetrieveInventoryPhysicalCount Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="physicalCountId">ID of the [InventoryPhysicalCount](#type-inventoryphysicalcount) to retrieve.</param>
            <returns>Task of RetrieveInventoryPhysicalCountResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.InventoryApi.RetrieveInventoryPhysicalCountAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveInventoryPhysicalCount Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="physicalCountId">ID of the [InventoryPhysicalCount](#type-inventoryphysicalcount) to retrieve.</param>
            <returns>Task of ApiResponse (RetrieveInventoryPhysicalCountResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.ILaborApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.CreateBreakType(Square.Connect.Model.CreateBreakTypeRequest)">
            <summary>
            CreateBreakType
            </summary>
            <remarks>
            Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.CreateBreakTypeWithHttpInfo(Square.Connect.Model.CreateBreakTypeRequest)">
            <summary>
            CreateBreakType
            </summary>
            <remarks>
            Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.CreateShift(Square.Connect.Model.CreateShiftRequest)">
            <summary>
            CreateShift
            </summary>
            <remarks>
            Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.CreateShiftWithHttpInfo(Square.Connect.Model.CreateShiftRequest)">
            <summary>
            CreateShift
            </summary>
            <remarks>
            Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.DeleteBreakType(System.String)">
            <summary>
            DeleteBreakType
            </summary>
            <remarks>
            Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
            <returns>DeleteBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.DeleteBreakTypeWithHttpInfo(System.String)">
            <summary>
            DeleteBreakType
            </summary>
            <remarks>
            Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
            <returns>ApiResponse of DeleteBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.DeleteShift(System.String)">
            <summary>
            DeleteShift
            </summary>
            <remarks>
            Deletes a &#x60;Shift&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
            <returns>DeleteShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.DeleteShiftWithHttpInfo(System.String)">
            <summary>
            DeleteShift
            </summary>
            <remarks>
            Deletes a &#x60;Shift&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
            <returns>ApiResponse of DeleteShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetBreakType(System.String)">
            <summary>
            GetBreakType
            </summary>
            <remarks>
            Returns a single &#x60;BreakType&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
            <returns>GetBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetBreakTypeWithHttpInfo(System.String)">
            <summary>
            GetBreakType
            </summary>
            <remarks>
            Returns a single &#x60;BreakType&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
            <returns>ApiResponse of GetBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetEmployeeWage(System.String)">
            <summary>
            GetEmployeeWage
            </summary>
            <remarks>
            Returns a single &#x60;EmployeeWage&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
            <returns>GetEmployeeWageResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetEmployeeWageWithHttpInfo(System.String)">
            <summary>
            GetEmployeeWage
            </summary>
            <remarks>
            Returns a single &#x60;EmployeeWage&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
            <returns>ApiResponse of GetEmployeeWageResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetShift(System.String)">
            <summary>
            GetShift
            </summary>
            <remarks>
            Returns a single &#x60;Shift&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
            <returns>GetShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetShiftWithHttpInfo(System.String)">
            <summary>
            GetShift
            </summary>
            <remarks>
            Returns a single &#x60;Shift&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
            <returns>ApiResponse of GetShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListBreakTypes(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListBreakTypes
            </summary>
            <remarks>
            Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
            <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
            <returns>ListBreakTypesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListBreakTypesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListBreakTypes
            </summary>
            <remarks>
            Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
            <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
            <returns>ApiResponse of ListBreakTypesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListEmployeeWages(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeWages
            </summary>
            <remarks>
            Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
            <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
            <returns>ListEmployeeWagesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListEmployeeWagesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeWages
            </summary>
            <remarks>
            Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
            <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
            <returns>ApiResponse of ListEmployeeWagesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListWorkweekConfigs(System.Nullable{System.Int32},System.String)">
            <summary>
            ListWorkweekConfigs
            </summary>
            <remarks>
            Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
            <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
            <returns>ListWorkweekConfigsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListWorkweekConfigsWithHttpInfo(System.Nullable{System.Int32},System.String)">
            <summary>
            ListWorkweekConfigs
            </summary>
            <remarks>
            Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
            <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
            <returns>ApiResponse of ListWorkweekConfigsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.SearchShifts(Square.Connect.Model.SearchShiftsRequest)">
            <summary>
            SearchShifts
            </summary>
            <remarks>
            Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>SearchShiftsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.SearchShiftsWithHttpInfo(Square.Connect.Model.SearchShiftsRequest)">
            <summary>
            SearchShifts
            </summary>
            <remarks>
            Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of SearchShiftsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateBreakType(System.String,Square.Connect.Model.UpdateBreakTypeRequest)">
            <summary>
            UpdateBreakType
            </summary>
            <remarks>
            Updates an existing &#x60;BreakType&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateBreakTypeWithHttpInfo(System.String,Square.Connect.Model.UpdateBreakTypeRequest)">
            <summary>
            UpdateBreakType
            </summary>
            <remarks>
            Updates an existing &#x60;BreakType&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateShift(System.String,Square.Connect.Model.UpdateShiftRequest)">
            <summary>
            UpdateShift
            </summary>
            <remarks>
            Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">ID of the object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateShiftWithHttpInfo(System.String,Square.Connect.Model.UpdateShiftRequest)">
            <summary>
            UpdateShift
            </summary>
            <remarks>
            Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">ID of the object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateWorkweekConfig(System.String,Square.Connect.Model.UpdateWorkweekConfigRequest)">
            <summary>
            UpdateWorkweekConfig
            </summary>
            <remarks>
            Updates a &#x60;WorkweekConfig&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateWorkweekConfigResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateWorkweekConfigWithHttpInfo(System.String,Square.Connect.Model.UpdateWorkweekConfigRequest)">
            <summary>
            UpdateWorkweekConfig
            </summary>
            <remarks>
            Updates a &#x60;WorkweekConfig&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateWorkweekConfigResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.CreateBreakTypeAsync(Square.Connect.Model.CreateBreakTypeRequest)">
            <summary>
            CreateBreakType
            </summary>
            <remarks>
            Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.CreateBreakTypeAsyncWithHttpInfo(Square.Connect.Model.CreateBreakTypeRequest)">
            <summary>
            CreateBreakType
            </summary>
            <remarks>
            Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateBreakTypeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.CreateShiftAsync(Square.Connect.Model.CreateShiftRequest)">
            <summary>
            CreateShift
            </summary>
            <remarks>
            Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.CreateShiftAsyncWithHttpInfo(Square.Connect.Model.CreateShiftRequest)">
            <summary>
            CreateShift
            </summary>
            <remarks>
            Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateShiftResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.DeleteBreakTypeAsync(System.String)">
            <summary>
            DeleteBreakType
            </summary>
            <remarks>
            Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
            <returns>Task of DeleteBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.DeleteBreakTypeAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteBreakType
            </summary>
            <remarks>
            Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
            <returns>Task of ApiResponse (DeleteBreakTypeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.DeleteShiftAsync(System.String)">
            <summary>
            DeleteShift
            </summary>
            <remarks>
            Deletes a &#x60;Shift&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
            <returns>Task of DeleteShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.DeleteShiftAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteShift
            </summary>
            <remarks>
            Deletes a &#x60;Shift&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
            <returns>Task of ApiResponse (DeleteShiftResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetBreakTypeAsync(System.String)">
            <summary>
            GetBreakType
            </summary>
            <remarks>
            Returns a single &#x60;BreakType&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
            <returns>Task of GetBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetBreakTypeAsyncWithHttpInfo(System.String)">
            <summary>
            GetBreakType
            </summary>
            <remarks>
            Returns a single &#x60;BreakType&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
            <returns>Task of ApiResponse (GetBreakTypeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetEmployeeWageAsync(System.String)">
            <summary>
            GetEmployeeWage
            </summary>
            <remarks>
            Returns a single &#x60;EmployeeWage&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
            <returns>Task of GetEmployeeWageResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetEmployeeWageAsyncWithHttpInfo(System.String)">
            <summary>
            GetEmployeeWage
            </summary>
            <remarks>
            Returns a single &#x60;EmployeeWage&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
            <returns>Task of ApiResponse (GetEmployeeWageResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetShiftAsync(System.String)">
            <summary>
            GetShift
            </summary>
            <remarks>
            Returns a single &#x60;Shift&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
            <returns>Task of GetShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.GetShiftAsyncWithHttpInfo(System.String)">
            <summary>
            GetShift
            </summary>
            <remarks>
            Returns a single &#x60;Shift&#x60; specified by id.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
            <returns>Task of ApiResponse (GetShiftResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListBreakTypesAsync(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListBreakTypes
            </summary>
            <remarks>
            Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
            <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
            <returns>Task of ListBreakTypesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListBreakTypesAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListBreakTypes
            </summary>
            <remarks>
            Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
            <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
            <returns>Task of ApiResponse (ListBreakTypesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListEmployeeWagesAsync(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeWages
            </summary>
            <remarks>
            Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
            <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
            <returns>Task of ListEmployeeWagesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListEmployeeWagesAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeWages
            </summary>
            <remarks>
            Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
            <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
            <returns>Task of ApiResponse (ListEmployeeWagesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListWorkweekConfigsAsync(System.Nullable{System.Int32},System.String)">
            <summary>
            ListWorkweekConfigs
            </summary>
            <remarks>
            Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
            <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
            <returns>Task of ListWorkweekConfigsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.ListWorkweekConfigsAsyncWithHttpInfo(System.Nullable{System.Int32},System.String)">
            <summary>
            ListWorkweekConfigs
            </summary>
            <remarks>
            Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
            <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
            <returns>Task of ApiResponse (ListWorkweekConfigsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.SearchShiftsAsync(Square.Connect.Model.SearchShiftsRequest)">
            <summary>
            SearchShifts
            </summary>
            <remarks>
            Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of SearchShiftsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.SearchShiftsAsyncWithHttpInfo(Square.Connect.Model.SearchShiftsRequest)">
            <summary>
            SearchShifts
            </summary>
            <remarks>
            Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (SearchShiftsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateBreakTypeAsync(System.String,Square.Connect.Model.UpdateBreakTypeRequest)">
            <summary>
            UpdateBreakType
            </summary>
            <remarks>
            Updates an existing &#x60;BreakType&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateBreakTypeAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateBreakTypeRequest)">
            <summary>
            UpdateBreakType
            </summary>
            <remarks>
            Updates an existing &#x60;BreakType&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateBreakTypeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateShiftAsync(System.String,Square.Connect.Model.UpdateShiftRequest)">
            <summary>
            UpdateShift
            </summary>
            <remarks>
            Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">ID of the object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateShiftAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateShiftRequest)">
            <summary>
            UpdateShift
            </summary>
            <remarks>
            Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">ID of the object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateShiftResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateWorkweekConfigAsync(System.String,Square.Connect.Model.UpdateWorkweekConfigRequest)">
            <summary>
            UpdateWorkweekConfig
            </summary>
            <remarks>
            Updates a &#x60;WorkweekConfig&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateWorkweekConfigResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILaborApi.UpdateWorkweekConfigAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateWorkweekConfigRequest)">
            <summary>
            UpdateWorkweekConfig
            </summary>
            <remarks>
            Updates a &#x60;WorkweekConfig&#x60;.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateWorkweekConfigResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.LaborApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.LaborApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.LaborApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.LaborApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.LaborApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.CreateBreakType(Square.Connect.Model.CreateBreakTypeRequest)">
            <summary>
            CreateBreakType Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.CreateBreakTypeWithHttpInfo(Square.Connect.Model.CreateBreakTypeRequest)">
            <summary>
            CreateBreakType Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.CreateBreakTypeAsync(Square.Connect.Model.CreateBreakTypeRequest)">
            <summary>
            CreateBreakType Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.CreateBreakTypeAsyncWithHttpInfo(Square.Connect.Model.CreateBreakTypeRequest)">
            <summary>
            CreateBreakType Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateBreakTypeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.CreateShift(Square.Connect.Model.CreateShiftRequest)">
            <summary>
            CreateShift Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.CreateShiftWithHttpInfo(Square.Connect.Model.CreateShiftRequest)">
            <summary>
            CreateShift Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.CreateShiftAsync(Square.Connect.Model.CreateShiftRequest)">
            <summary>
            CreateShift Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.CreateShiftAsyncWithHttpInfo(Square.Connect.Model.CreateShiftRequest)">
            <summary>
            CreateShift Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateShiftResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.DeleteBreakType(System.String)">
            <summary>
            DeleteBreakType Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
            <returns>DeleteBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.DeleteBreakTypeWithHttpInfo(System.String)">
            <summary>
            DeleteBreakType Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
            <returns>ApiResponse of DeleteBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.DeleteBreakTypeAsync(System.String)">
            <summary>
            DeleteBreakType Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
            <returns>Task of DeleteBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.DeleteBreakTypeAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteBreakType Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
            <returns>Task of ApiResponse (DeleteBreakTypeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.DeleteShift(System.String)">
            <summary>
            DeleteShift Deletes a &#x60;Shift&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
            <returns>DeleteShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.DeleteShiftWithHttpInfo(System.String)">
            <summary>
            DeleteShift Deletes a &#x60;Shift&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
            <returns>ApiResponse of DeleteShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.DeleteShiftAsync(System.String)">
            <summary>
            DeleteShift Deletes a &#x60;Shift&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
            <returns>Task of DeleteShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.DeleteShiftAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteShift Deletes a &#x60;Shift&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
            <returns>Task of ApiResponse (DeleteShiftResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetBreakType(System.String)">
            <summary>
            GetBreakType Returns a single &#x60;BreakType&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
            <returns>GetBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetBreakTypeWithHttpInfo(System.String)">
            <summary>
            GetBreakType Returns a single &#x60;BreakType&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
            <returns>ApiResponse of GetBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetBreakTypeAsync(System.String)">
            <summary>
            GetBreakType Returns a single &#x60;BreakType&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
            <returns>Task of GetBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetBreakTypeAsyncWithHttpInfo(System.String)">
            <summary>
            GetBreakType Returns a single &#x60;BreakType&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
            <returns>Task of ApiResponse (GetBreakTypeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetEmployeeWage(System.String)">
            <summary>
            GetEmployeeWage Returns a single &#x60;EmployeeWage&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
            <returns>GetEmployeeWageResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetEmployeeWageWithHttpInfo(System.String)">
            <summary>
            GetEmployeeWage Returns a single &#x60;EmployeeWage&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
            <returns>ApiResponse of GetEmployeeWageResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetEmployeeWageAsync(System.String)">
            <summary>
            GetEmployeeWage Returns a single &#x60;EmployeeWage&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
            <returns>Task of GetEmployeeWageResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetEmployeeWageAsyncWithHttpInfo(System.String)">
            <summary>
            GetEmployeeWage Returns a single &#x60;EmployeeWage&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
            <returns>Task of ApiResponse (GetEmployeeWageResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetShift(System.String)">
            <summary>
            GetShift Returns a single &#x60;Shift&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
            <returns>GetShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetShiftWithHttpInfo(System.String)">
            <summary>
            GetShift Returns a single &#x60;Shift&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
            <returns>ApiResponse of GetShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetShiftAsync(System.String)">
            <summary>
            GetShift Returns a single &#x60;Shift&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
            <returns>Task of GetShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.GetShiftAsyncWithHttpInfo(System.String)">
            <summary>
            GetShift Returns a single &#x60;Shift&#x60; specified by id.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
            <returns>Task of ApiResponse (GetShiftResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListBreakTypes(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListBreakTypes Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
            <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
            <returns>ListBreakTypesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListBreakTypesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListBreakTypes Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
            <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
            <returns>ApiResponse of ListBreakTypesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListBreakTypesAsync(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListBreakTypes Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
            <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
            <returns>Task of ListBreakTypesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListBreakTypesAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListBreakTypes Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
            <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
            <returns>Task of ApiResponse (ListBreakTypesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListEmployeeWages(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeWages Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
            <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
            <returns>ListEmployeeWagesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListEmployeeWagesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeWages Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
            <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
            <returns>ApiResponse of ListEmployeeWagesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListEmployeeWagesAsync(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeWages Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
            <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
            <returns>Task of ListEmployeeWagesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListEmployeeWagesAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeWages Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
            <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
            <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
            <returns>Task of ApiResponse (ListEmployeeWagesResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListWorkweekConfigs(System.Nullable{System.Int32},System.String)">
            <summary>
            ListWorkweekConfigs Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
            <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
            <returns>ListWorkweekConfigsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListWorkweekConfigsWithHttpInfo(System.Nullable{System.Int32},System.String)">
            <summary>
            ListWorkweekConfigs Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
            <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
            <returns>ApiResponse of ListWorkweekConfigsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListWorkweekConfigsAsync(System.Nullable{System.Int32},System.String)">
            <summary>
            ListWorkweekConfigs Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
            <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
            <returns>Task of ListWorkweekConfigsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.ListWorkweekConfigsAsyncWithHttpInfo(System.Nullable{System.Int32},System.String)">
            <summary>
            ListWorkweekConfigs Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
            <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
            <returns>Task of ApiResponse (ListWorkweekConfigsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.SearchShifts(Square.Connect.Model.SearchShiftsRequest)">
            <summary>
            SearchShifts Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>SearchShiftsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.SearchShiftsWithHttpInfo(Square.Connect.Model.SearchShiftsRequest)">
            <summary>
            SearchShifts Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of SearchShiftsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.SearchShiftsAsync(Square.Connect.Model.SearchShiftsRequest)">
            <summary>
            SearchShifts Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of SearchShiftsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.SearchShiftsAsyncWithHttpInfo(Square.Connect.Model.SearchShiftsRequest)">
            <summary>
            SearchShifts Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (SearchShiftsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateBreakType(System.String,Square.Connect.Model.UpdateBreakTypeRequest)">
            <summary>
            UpdateBreakType Updates an existing &#x60;BreakType&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateBreakTypeWithHttpInfo(System.String,Square.Connect.Model.UpdateBreakTypeRequest)">
            <summary>
            UpdateBreakType Updates an existing &#x60;BreakType&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateBreakTypeAsync(System.String,Square.Connect.Model.UpdateBreakTypeRequest)">
            <summary>
            UpdateBreakType Updates an existing &#x60;BreakType&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateBreakTypeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateBreakTypeAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateBreakTypeRequest)">
            <summary>
            UpdateBreakType Updates an existing &#x60;BreakType&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateBreakTypeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateShift(System.String,Square.Connect.Model.UpdateShiftRequest)">
            <summary>
            UpdateShift Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">ID of the object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateShiftWithHttpInfo(System.String,Square.Connect.Model.UpdateShiftRequest)">
            <summary>
            UpdateShift Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">ID of the object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateShiftAsync(System.String,Square.Connect.Model.UpdateShiftRequest)">
            <summary>
            UpdateShift Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">ID of the object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateShiftResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateShiftAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateShiftRequest)">
            <summary>
            UpdateShift Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">ID of the object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateShiftResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateWorkweekConfig(System.String,Square.Connect.Model.UpdateWorkweekConfigRequest)">
            <summary>
            UpdateWorkweekConfig Updates a &#x60;WorkweekConfig&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>UpdateWorkweekConfigResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateWorkweekConfigWithHttpInfo(System.String,Square.Connect.Model.UpdateWorkweekConfigRequest)">
            <summary>
            UpdateWorkweekConfig Updates a &#x60;WorkweekConfig&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of UpdateWorkweekConfigResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateWorkweekConfigAsync(System.String,Square.Connect.Model.UpdateWorkweekConfigRequest)">
            <summary>
            UpdateWorkweekConfig Updates a &#x60;WorkweekConfig&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of UpdateWorkweekConfigResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LaborApi.UpdateWorkweekConfigAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateWorkweekConfigRequest)">
            <summary>
            UpdateWorkweekConfig Updates a &#x60;WorkweekConfig&#x60;.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (UpdateWorkweekConfigResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.ILocationsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ILocationsApi.ListLocations">
            <summary>
            ListLocations
            </summary>
            <remarks>
            Provides the details for all of a business&#39;s locations.  Most other Connect API endpoints have a required &#x60;location_id&#x60; path parameter. The &#x60;id&#x60; field of the [&#x60;Location&#x60;](#type-location) objects returned by this endpoint correspond to that &#x60;location_id&#x60; parameter.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ListLocationsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILocationsApi.ListLocationsWithHttpInfo">
            <summary>
            ListLocations
            </summary>
            <remarks>
            Provides the details for all of a business&#39;s locations.  Most other Connect API endpoints have a required &#x60;location_id&#x60; path parameter. The &#x60;id&#x60; field of the [&#x60;Location&#x60;](#type-location) objects returned by this endpoint correspond to that &#x60;location_id&#x60; parameter.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ListLocationsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILocationsApi.ListLocationsAsync">
            <summary>
            ListLocations
            </summary>
            <remarks>
            Provides the details for all of a business&#39;s locations.  Most other Connect API endpoints have a required &#x60;location_id&#x60; path parameter. The &#x60;id&#x60; field of the [&#x60;Location&#x60;](#type-location) objects returned by this endpoint correspond to that &#x60;location_id&#x60; parameter.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ListLocationsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ILocationsApi.ListLocationsAsyncWithHttpInfo">
            <summary>
            ListLocations
            </summary>
            <remarks>
            Provides the details for all of a business&#39;s locations.  Most other Connect API endpoints have a required &#x60;location_id&#x60; path parameter. The &#x60;id&#x60; field of the [&#x60;Location&#x60;](#type-location) objects returned by this endpoint correspond to that &#x60;location_id&#x60; parameter.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ListLocationsResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.LocationsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.LocationsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.LocationsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.LocationsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.LocationsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.ListLocations">
            <summary>
            ListLocations Provides the details for all of a business&#39;s locations.  Most other Connect API endpoints have a required &#x60;location_id&#x60; path parameter. The &#x60;id&#x60; field of the [&#x60;Location&#x60;](#type-location) objects returned by this endpoint correspond to that &#x60;location_id&#x60; parameter.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ListLocationsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.ListLocationsWithHttpInfo">
            <summary>
            ListLocations Provides the details for all of a business&#39;s locations.  Most other Connect API endpoints have a required &#x60;location_id&#x60; path parameter. The &#x60;id&#x60; field of the [&#x60;Location&#x60;](#type-location) objects returned by this endpoint correspond to that &#x60;location_id&#x60; parameter.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ListLocationsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.ListLocationsAsync">
            <summary>
            ListLocations Provides the details for all of a business&#39;s locations.  Most other Connect API endpoints have a required &#x60;location_id&#x60; path parameter. The &#x60;id&#x60; field of the [&#x60;Location&#x60;](#type-location) objects returned by this endpoint correspond to that &#x60;location_id&#x60; parameter.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ListLocationsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.LocationsApi.ListLocationsAsyncWithHttpInfo">
            <summary>
            ListLocations Provides the details for all of a business&#39;s locations.  Most other Connect API endpoints have a required &#x60;location_id&#x60; path parameter. The &#x60;id&#x60; field of the [&#x60;Location&#x60;](#type-location) objects returned by this endpoint correspond to that &#x60;location_id&#x60; parameter.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ListLocationsResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.IMobileAuthorizationApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IMobileAuthorizationApi.CreateMobileAuthorizationCode(Square.Connect.Model.CreateMobileAuthorizationCodeRequest)">
            <summary>
            CreateMobileAuthorizationCode
            </summary>
            <remarks>
            Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The &#x60;Authorization&#x60; header you provide to this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Bearer ACCESS_TOKEN &#x60;&#x60;&#x60;  Replace &#x60;ACCESS_TOKEN&#x60; with a [valid production authorization credential](https://docs.connect.squareup.com/get-started#step-4-understand-the-different-application-credentials).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateMobileAuthorizationCodeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IMobileAuthorizationApi.CreateMobileAuthorizationCodeWithHttpInfo(Square.Connect.Model.CreateMobileAuthorizationCodeRequest)">
            <summary>
            CreateMobileAuthorizationCode
            </summary>
            <remarks>
            Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The &#x60;Authorization&#x60; header you provide to this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Bearer ACCESS_TOKEN &#x60;&#x60;&#x60;  Replace &#x60;ACCESS_TOKEN&#x60; with a [valid production authorization credential](https://docs.connect.squareup.com/get-started#step-4-understand-the-different-application-credentials).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateMobileAuthorizationCodeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IMobileAuthorizationApi.CreateMobileAuthorizationCodeAsync(Square.Connect.Model.CreateMobileAuthorizationCodeRequest)">
            <summary>
            CreateMobileAuthorizationCode
            </summary>
            <remarks>
            Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The &#x60;Authorization&#x60; header you provide to this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Bearer ACCESS_TOKEN &#x60;&#x60;&#x60;  Replace &#x60;ACCESS_TOKEN&#x60; with a [valid production authorization credential](https://docs.connect.squareup.com/get-started#step-4-understand-the-different-application-credentials).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateMobileAuthorizationCodeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IMobileAuthorizationApi.CreateMobileAuthorizationCodeAsyncWithHttpInfo(Square.Connect.Model.CreateMobileAuthorizationCodeRequest)">
            <summary>
            CreateMobileAuthorizationCode
            </summary>
            <remarks>
            Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The &#x60;Authorization&#x60; header you provide to this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Bearer ACCESS_TOKEN &#x60;&#x60;&#x60;  Replace &#x60;ACCESS_TOKEN&#x60; with a [valid production authorization credential](https://docs.connect.squareup.com/get-started#step-4-understand-the-different-application-credentials).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateMobileAuthorizationCodeResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.MobileAuthorizationApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.MobileAuthorizationApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.MobileAuthorizationApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.MobileAuthorizationApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.MobileAuthorizationApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.CreateMobileAuthorizationCode(Square.Connect.Model.CreateMobileAuthorizationCodeRequest)">
            <summary>
            CreateMobileAuthorizationCode Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The &#x60;Authorization&#x60; header you provide to this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Bearer ACCESS_TOKEN &#x60;&#x60;&#x60;  Replace &#x60;ACCESS_TOKEN&#x60; with a [valid production authorization credential](https://docs.connect.squareup.com/get-started#step-4-understand-the-different-application-credentials).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateMobileAuthorizationCodeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.CreateMobileAuthorizationCodeWithHttpInfo(Square.Connect.Model.CreateMobileAuthorizationCodeRequest)">
            <summary>
            CreateMobileAuthorizationCode Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The &#x60;Authorization&#x60; header you provide to this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Bearer ACCESS_TOKEN &#x60;&#x60;&#x60;  Replace &#x60;ACCESS_TOKEN&#x60; with a [valid production authorization credential](https://docs.connect.squareup.com/get-started#step-4-understand-the-different-application-credentials).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateMobileAuthorizationCodeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.CreateMobileAuthorizationCodeAsync(Square.Connect.Model.CreateMobileAuthorizationCodeRequest)">
            <summary>
            CreateMobileAuthorizationCode Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The &#x60;Authorization&#x60; header you provide to this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Bearer ACCESS_TOKEN &#x60;&#x60;&#x60;  Replace &#x60;ACCESS_TOKEN&#x60; with a [valid production authorization credential](https://docs.connect.squareup.com/get-started#step-4-understand-the-different-application-credentials).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateMobileAuthorizationCodeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.MobileAuthorizationApi.CreateMobileAuthorizationCodeAsyncWithHttpInfo(Square.Connect.Model.CreateMobileAuthorizationCodeRequest)">
            <summary>
            CreateMobileAuthorizationCode Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The &#x60;Authorization&#x60; header you provide to this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Bearer ACCESS_TOKEN &#x60;&#x60;&#x60;  Replace &#x60;ACCESS_TOKEN&#x60; with a [valid production authorization credential](https://docs.connect.squareup.com/get-started#step-4-understand-the-different-application-credentials).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateMobileAuthorizationCodeResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.IOAuthApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.ObtainToken(Square.Connect.Model.ObtainTokenRequest)">
            <summary>
            ObtainToken
            </summary>
            <remarks>
            Returns an OAuth access token.   The endpoint supports distinct methods of obtaining OAuth access tokens.  Applications specify a method by adding the &#x60;grant_type&#x60; parameter  in the request and also provide relevant information.  For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).   __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and  a refresh token in the response.   __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ObtainTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.ObtainTokenWithHttpInfo(Square.Connect.Model.ObtainTokenRequest)">
            <summary>
            ObtainToken
            </summary>
            <remarks>
            Returns an OAuth access token.   The endpoint supports distinct methods of obtaining OAuth access tokens.  Applications specify a method by adding the &#x60;grant_type&#x60; parameter  in the request and also provide relevant information.  For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).   __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and  a refresh token in the response.   __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of ObtainTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.RenewToken(System.String,Square.Connect.Model.RenewTokenRequest)">
            <summary>
            RenewToken
            </summary>
            <remarks>
            &#x60;RenewToken&#x60; is deprecated. For information about refreshing OAuth access tokens, see  [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application&#39;s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="clientId">Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>RenewTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.RenewTokenWithHttpInfo(System.String,Square.Connect.Model.RenewTokenRequest)">
            <summary>
            RenewToken
            </summary>
            <remarks>
            &#x60;RenewToken&#x60; is deprecated. For information about refreshing OAuth access tokens, see  [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application&#39;s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="clientId">Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of RenewTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.RevokeToken(Square.Connect.Model.RevokeTokenRequest)">
            <summary>
            RevokeToken
            </summary>
            <remarks>
            Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>RevokeTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.RevokeTokenWithHttpInfo(Square.Connect.Model.RevokeTokenRequest)">
            <summary>
            RevokeToken
            </summary>
            <remarks>
            Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of RevokeTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.ObtainTokenAsync(Square.Connect.Model.ObtainTokenRequest)">
            <summary>
            ObtainToken
            </summary>
            <remarks>
            Returns an OAuth access token.   The endpoint supports distinct methods of obtaining OAuth access tokens.  Applications specify a method by adding the &#x60;grant_type&#x60; parameter  in the request and also provide relevant information.  For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).   __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and  a refresh token in the response.   __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ObtainTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.ObtainTokenAsyncWithHttpInfo(Square.Connect.Model.ObtainTokenRequest)">
            <summary>
            ObtainToken
            </summary>
            <remarks>
            Returns an OAuth access token.   The endpoint supports distinct methods of obtaining OAuth access tokens.  Applications specify a method by adding the &#x60;grant_type&#x60; parameter  in the request and also provide relevant information.  For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).   __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and  a refresh token in the response.   __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (ObtainTokenResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.RenewTokenAsync(System.String,Square.Connect.Model.RenewTokenRequest)">
            <summary>
            RenewToken
            </summary>
            <remarks>
            &#x60;RenewToken&#x60; is deprecated. For information about refreshing OAuth access tokens, see  [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application&#39;s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="clientId">Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of RenewTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.RenewTokenAsyncWithHttpInfo(System.String,Square.Connect.Model.RenewTokenRequest)">
            <summary>
            RenewToken
            </summary>
            <remarks>
            &#x60;RenewToken&#x60; is deprecated. For information about refreshing OAuth access tokens, see  [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application&#39;s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="clientId">Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (RenewTokenResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.RevokeTokenAsync(Square.Connect.Model.RevokeTokenRequest)">
            <summary>
            RevokeToken
            </summary>
            <remarks>
            Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of RevokeTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOAuthApi.RevokeTokenAsyncWithHttpInfo(Square.Connect.Model.RevokeTokenRequest)">
            <summary>
            RevokeToken
            </summary>
            <remarks>
            Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (RevokeTokenResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.OAuthApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.OAuthApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.OAuthApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.OAuthApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.OAuthApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.ObtainToken(Square.Connect.Model.ObtainTokenRequest)">
            <summary>
            ObtainToken Returns an OAuth access token.   The endpoint supports distinct methods of obtaining OAuth access tokens.  Applications specify a method by adding the &#x60;grant_type&#x60; parameter  in the request and also provide relevant information.  For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).   __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and  a refresh token in the response.   __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ObtainTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.ObtainTokenWithHttpInfo(Square.Connect.Model.ObtainTokenRequest)">
            <summary>
            ObtainToken Returns an OAuth access token.   The endpoint supports distinct methods of obtaining OAuth access tokens.  Applications specify a method by adding the &#x60;grant_type&#x60; parameter  in the request and also provide relevant information.  For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).   __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and  a refresh token in the response.   __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of ObtainTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.ObtainTokenAsync(Square.Connect.Model.ObtainTokenRequest)">
            <summary>
            ObtainToken Returns an OAuth access token.   The endpoint supports distinct methods of obtaining OAuth access tokens.  Applications specify a method by adding the &#x60;grant_type&#x60; parameter  in the request and also provide relevant information.  For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).   __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and  a refresh token in the response.   __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ObtainTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.ObtainTokenAsyncWithHttpInfo(Square.Connect.Model.ObtainTokenRequest)">
            <summary>
            ObtainToken Returns an OAuth access token.   The endpoint supports distinct methods of obtaining OAuth access tokens.  Applications specify a method by adding the &#x60;grant_type&#x60; parameter  in the request and also provide relevant information.  For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).   __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and  a refresh token in the response.   __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (ObtainTokenResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.RenewToken(System.String,Square.Connect.Model.RenewTokenRequest)">
            <summary>
            RenewToken &#x60;RenewToken&#x60; is deprecated. For information about refreshing OAuth access tokens, see  [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application&#39;s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="clientId">Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>RenewTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.RenewTokenWithHttpInfo(System.String,Square.Connect.Model.RenewTokenRequest)">
            <summary>
            RenewToken &#x60;RenewToken&#x60; is deprecated. For information about refreshing OAuth access tokens, see  [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application&#39;s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="clientId">Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of RenewTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.RenewTokenAsync(System.String,Square.Connect.Model.RenewTokenRequest)">
            <summary>
            RenewToken &#x60;RenewToken&#x60; is deprecated. For information about refreshing OAuth access tokens, see  [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application&#39;s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="clientId">Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of RenewTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.RenewTokenAsyncWithHttpInfo(System.String,Square.Connect.Model.RenewTokenRequest)">
            <summary>
            RenewToken &#x60;RenewToken&#x60; is deprecated. For information about refreshing OAuth access tokens, see  [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application&#39;s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="clientId">Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (RenewTokenResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.RevokeToken(Square.Connect.Model.RevokeTokenRequest)">
            <summary>
            RevokeToken Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>RevokeTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.RevokeTokenWithHttpInfo(Square.Connect.Model.RevokeTokenRequest)">
            <summary>
            RevokeToken Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of RevokeTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.RevokeTokenAsync(Square.Connect.Model.RevokeTokenRequest)">
            <summary>
            RevokeToken Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of RevokeTokenResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OAuthApi.RevokeTokenAsyncWithHttpInfo(Square.Connect.Model.RevokeTokenRequest)">
            <summary>
            RevokeToken Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (RevokeTokenResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.IOrdersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.BatchRetrieveOrders(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
            <summary>
            BatchRetrieveOrders
            </summary>
            <remarks>
            Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the orders&#39; associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchRetrieveOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.BatchRetrieveOrdersWithHttpInfo(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
            <summary>
            BatchRetrieveOrders
            </summary>
            <remarks>
            Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the orders&#39; associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchRetrieveOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.CreateOrder(System.String,Square.Connect.Model.CreateOrderRequest)">
            <summary>
            CreateOrder
            </summary>
            <remarks>
            Creates an [Order](#type-order) that can then be referenced as &#x60;order_id&#x60; in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order&#39;s &#x60;id&#x60; in the &#x60;order_id&#x60; field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](/products/orders/overview).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the order with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateOrderResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.CreateOrderWithHttpInfo(System.String,Square.Connect.Model.CreateOrderRequest)">
            <summary>
            CreateOrder
            </summary>
            <remarks>
            Creates an [Order](#type-order) that can then be referenced as &#x60;order_id&#x60; in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order&#39;s &#x60;id&#x60; in the &#x60;order_id&#x60; field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](/products/orders/overview).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the order with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateOrderResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.SearchOrders(Square.Connect.Model.SearchOrdersRequest)">
            <summary>
            SearchOrders
            </summary>
            <remarks>
            Search all Orders for a merchant and return either [Orders](#type-order) or [OrderEntries](#type-orderentry).  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was originally processed, not the time it was subsequently transmitted to Square. Consequently, the SearchOrder endpoint might list an offline Order chronologically between online Orders that were seen in a previous request.  When fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>SearchOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.SearchOrdersWithHttpInfo(Square.Connect.Model.SearchOrdersRequest)">
            <summary>
            SearchOrders
            </summary>
            <remarks>
            Search all Orders for a merchant and return either [Orders](#type-order) or [OrderEntries](#type-orderentry).  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was originally processed, not the time it was subsequently transmitted to Square. Consequently, the SearchOrder endpoint might list an offline Order chronologically between online Orders that were seen in a previous request.  When fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of SearchOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.BatchRetrieveOrdersAsync(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
            <summary>
            BatchRetrieveOrders
            </summary>
            <remarks>
            Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the orders&#39; associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchRetrieveOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.BatchRetrieveOrdersAsyncWithHttpInfo(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
            <summary>
            BatchRetrieveOrders
            </summary>
            <remarks>
            Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the orders&#39; associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchRetrieveOrdersResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.CreateOrderAsync(System.String,Square.Connect.Model.CreateOrderRequest)">
            <summary>
            CreateOrder
            </summary>
            <remarks>
            Creates an [Order](#type-order) that can then be referenced as &#x60;order_id&#x60; in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order&#39;s &#x60;id&#x60; in the &#x60;order_id&#x60; field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](/products/orders/overview).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the order with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateOrderResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.CreateOrderAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateOrderRequest)">
            <summary>
            CreateOrder
            </summary>
            <remarks>
            Creates an [Order](#type-order) that can then be referenced as &#x60;order_id&#x60; in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order&#39;s &#x60;id&#x60; in the &#x60;order_id&#x60; field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](/products/orders/overview).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the order with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateOrderResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.SearchOrdersAsync(Square.Connect.Model.SearchOrdersRequest)">
            <summary>
            SearchOrders
            </summary>
            <remarks>
            Search all Orders for a merchant and return either [Orders](#type-order) or [OrderEntries](#type-orderentry).  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was originally processed, not the time it was subsequently transmitted to Square. Consequently, the SearchOrder endpoint might list an offline Order chronologically between online Orders that were seen in a previous request.  When fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of SearchOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IOrdersApi.SearchOrdersAsyncWithHttpInfo(Square.Connect.Model.SearchOrdersRequest)">
            <summary>
            SearchOrders
            </summary>
            <remarks>
            Search all Orders for a merchant and return either [Orders](#type-order) or [OrderEntries](#type-orderentry).  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was originally processed, not the time it was subsequently transmitted to Square. Consequently, the SearchOrder endpoint might list an offline Order chronologically between online Orders that were seen in a previous request.  When fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (SearchOrdersResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.OrdersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.OrdersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.OrdersApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.OrdersApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.OrdersApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.BatchRetrieveOrders(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
            <summary>
            BatchRetrieveOrders Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the orders&#39; associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>BatchRetrieveOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.BatchRetrieveOrdersWithHttpInfo(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
            <summary>
            BatchRetrieveOrders Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the orders&#39; associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of BatchRetrieveOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.BatchRetrieveOrdersAsync(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
            <summary>
            BatchRetrieveOrders Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the orders&#39; associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of BatchRetrieveOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.BatchRetrieveOrdersAsyncWithHttpInfo(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
            <summary>
            BatchRetrieveOrders Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the orders&#39; associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (BatchRetrieveOrdersResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.CreateOrder(System.String,Square.Connect.Model.CreateOrderRequest)">
            <summary>
            CreateOrder Creates an [Order](#type-order) that can then be referenced as &#x60;order_id&#x60; in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order&#39;s &#x60;id&#x60; in the &#x60;order_id&#x60; field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](/products/orders/overview).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the order with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateOrderResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.CreateOrderWithHttpInfo(System.String,Square.Connect.Model.CreateOrderRequest)">
            <summary>
            CreateOrder Creates an [Order](#type-order) that can then be referenced as &#x60;order_id&#x60; in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order&#39;s &#x60;id&#x60; in the &#x60;order_id&#x60; field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](/products/orders/overview).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the order with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateOrderResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.CreateOrderAsync(System.String,Square.Connect.Model.CreateOrderRequest)">
            <summary>
            CreateOrder Creates an [Order](#type-order) that can then be referenced as &#x60;order_id&#x60; in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order&#39;s &#x60;id&#x60; in the &#x60;order_id&#x60; field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](/products/orders/overview).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the order with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateOrderResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.CreateOrderAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateOrderRequest)">
            <summary>
            CreateOrder Creates an [Order](#type-order) that can then be referenced as &#x60;order_id&#x60; in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order&#39;s &#x60;id&#x60; in the &#x60;order_id&#x60; field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](/products/orders/overview).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the business location to associate the order with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateOrderResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.SearchOrders(Square.Connect.Model.SearchOrdersRequest)">
            <summary>
            SearchOrders Search all Orders for a merchant and return either [Orders](#type-order) or [OrderEntries](#type-orderentry).  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was originally processed, not the time it was subsequently transmitted to Square. Consequently, the SearchOrder endpoint might list an offline Order chronologically between online Orders that were seen in a previous request.  When fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>SearchOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.SearchOrdersWithHttpInfo(Square.Connect.Model.SearchOrdersRequest)">
            <summary>
            SearchOrders Search all Orders for a merchant and return either [Orders](#type-order) or [OrderEntries](#type-orderentry).  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was originally processed, not the time it was subsequently transmitted to Square. Consequently, the SearchOrder endpoint might list an offline Order chronologically between online Orders that were seen in a previous request.  When fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of SearchOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.SearchOrdersAsync(Square.Connect.Model.SearchOrdersRequest)">
            <summary>
            SearchOrders Search all Orders for a merchant and return either [Orders](#type-order) or [OrderEntries](#type-orderentry).  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was originally processed, not the time it was subsequently transmitted to Square. Consequently, the SearchOrder endpoint might list an offline Order chronologically between online Orders that were seen in a previous request.  When fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of SearchOrdersResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.OrdersApi.SearchOrdersAsyncWithHttpInfo(Square.Connect.Model.SearchOrdersRequest)">
            <summary>
            SearchOrders Search all Orders for a merchant and return either [Orders](#type-order) or [OrderEntries](#type-orderentry).  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was originally processed, not the time it was subsequently transmitted to Square. Consequently, the SearchOrder endpoint might list an offline Order chronologically between online Orders that were seen in a previous request.  When fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (SearchOrdersResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.IReportingApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivableRefunds(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivableRefunds
            </summary>
            <remarks>
            Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ListAdditionalRecipientReceivableRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivableRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivableRefunds
            </summary>
            <remarks>
            Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of ListAdditionalRecipientReceivableRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivables(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivables
            </summary>
            <remarks>
            Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ListAdditionalRecipientReceivablesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivablesWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivables
            </summary>
            <remarks>
            Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of ListAdditionalRecipientReceivablesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivableRefundsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivableRefunds
            </summary>
            <remarks>
            Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ListAdditionalRecipientReceivableRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivableRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivableRefunds
            </summary>
            <remarks>
            Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (ListAdditionalRecipientReceivableRefundsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivablesAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivables
            </summary>
            <remarks>
            Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ListAdditionalRecipientReceivablesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivablesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivables
            </summary>
            <remarks>
            Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (ListAdditionalRecipientReceivablesResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.ReportingApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.ReportingApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.ReportingApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.ReportingApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.ReportingApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivableRefunds(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivableRefunds Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ListAdditionalRecipientReceivableRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivableRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivableRefunds Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of ListAdditionalRecipientReceivableRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivableRefundsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivableRefunds Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ListAdditionalRecipientReceivableRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivableRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivableRefunds Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (ListAdditionalRecipientReceivableRefundsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivables(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivables Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ListAdditionalRecipientReceivablesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivablesWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivables Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of ListAdditionalRecipientReceivablesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivablesAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivables Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ListAdditionalRecipientReceivablesResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivablesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListAdditionalRecipientReceivables Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the &#x60;additional_recipients&#x60; field in a transaction.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (ListAdditionalRecipientReceivablesResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.ITransactionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CaptureTransaction(System.String,System.String)">
            <summary>
            CaptureTransaction
            </summary>
            <remarks>
            Captures a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>CaptureTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CaptureTransactionWithHttpInfo(System.String,System.String)">
            <summary>
            CaptureTransaction
            </summary>
            <remarks>
            Captures a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>ApiResponse of CaptureTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.Charge(System.String,Square.Connect.Model.ChargeRequest)">
            <summary>
            Charge
            </summary>
            <remarks>
            Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-transactions-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to associate the created transaction with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ChargeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ChargeWithHttpInfo(System.String,Square.Connect.Model.ChargeRequest)">
            <summary>
            Charge
            </summary>
            <remarks>
            Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-transactions-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to associate the created transaction with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of ChargeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CreateRefund(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
            <summary>
            CreateRefund
            </summary>
            <remarks>
            Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateRefundResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CreateRefundWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
            <summary>
            CreateRefund
            </summary>
            <remarks>
            Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateRefundResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListRefunds(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListRefunds
            </summary>
            <remarks>
            Lists refunds for one of a business&#39;s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square&#39;s Point of Sale applications.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ListRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListRefunds
            </summary>
            <remarks>
            Lists refunds for one of a business&#39;s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square&#39;s Point of Sale applications.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of ListRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListTransactions(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListTransactions
            </summary>
            <remarks>
            Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list transactions for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ListTransactionsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListTransactionsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListTransactions
            </summary>
            <remarks>
            Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list transactions for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of ListTransactionsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.RetrieveTransaction(System.String,System.String)">
            <summary>
            RetrieveTransaction
            </summary>
            <remarks>
            Retrieves details for a single transaction.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the transaction to retrieve.</param>
            <returns>RetrieveTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.RetrieveTransactionWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveTransaction
            </summary>
            <remarks>
            Retrieves details for a single transaction.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the transaction to retrieve.</param>
            <returns>ApiResponse of RetrieveTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.VoidTransaction(System.String,System.String)">
            <summary>
            VoidTransaction
            </summary>
            <remarks>
            Cancels a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>VoidTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.VoidTransactionWithHttpInfo(System.String,System.String)">
            <summary>
            VoidTransaction
            </summary>
            <remarks>
            Cancels a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>ApiResponse of VoidTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CaptureTransactionAsync(System.String,System.String)">
            <summary>
            CaptureTransaction
            </summary>
            <remarks>
            Captures a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>Task of CaptureTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CaptureTransactionAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            CaptureTransaction
            </summary>
            <remarks>
            Captures a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>Task of ApiResponse (CaptureTransactionResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ChargeAsync(System.String,Square.Connect.Model.ChargeRequest)">
            <summary>
            Charge
            </summary>
            <remarks>
            Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-transactions-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to associate the created transaction with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ChargeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ChargeAsyncWithHttpInfo(System.String,Square.Connect.Model.ChargeRequest)">
            <summary>
            Charge
            </summary>
            <remarks>
            Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-transactions-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to associate the created transaction with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (ChargeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CreateRefundAsync(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
            <summary>
            CreateRefund
            </summary>
            <remarks>
            Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateRefundResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CreateRefundAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
            <summary>
            CreateRefund
            </summary>
            <remarks>
            Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateRefundResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListRefunds
            </summary>
            <remarks>
            Lists refunds for one of a business&#39;s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square&#39;s Point of Sale applications.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ListRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListRefunds
            </summary>
            <remarks>
            Lists refunds for one of a business&#39;s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square&#39;s Point of Sale applications.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (ListRefundsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListTransactionsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListTransactions
            </summary>
            <remarks>
            Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list transactions for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ListTransactionsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListTransactionsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListTransactions
            </summary>
            <remarks>
            Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list transactions for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (ListTransactionsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.RetrieveTransactionAsync(System.String,System.String)">
            <summary>
            RetrieveTransaction
            </summary>
            <remarks>
            Retrieves details for a single transaction.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the transaction to retrieve.</param>
            <returns>Task of RetrieveTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.RetrieveTransactionAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveTransaction
            </summary>
            <remarks>
            Retrieves details for a single transaction.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the transaction to retrieve.</param>
            <returns>Task of ApiResponse (RetrieveTransactionResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.VoidTransactionAsync(System.String,System.String)">
            <summary>
            VoidTransaction
            </summary>
            <remarks>
            Cancels a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>Task of VoidTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.VoidTransactionAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            VoidTransaction
            </summary>
            <remarks>
            Cancels a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>Task of ApiResponse (VoidTransactionResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.TransactionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.TransactionsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.TransactionsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.TransactionsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.TransactionsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CaptureTransaction(System.String,System.String)">
            <summary>
            CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>CaptureTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CaptureTransactionWithHttpInfo(System.String,System.String)">
            <summary>
            CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>ApiResponse of CaptureTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CaptureTransactionAsync(System.String,System.String)">
            <summary>
            CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>Task of CaptureTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CaptureTransactionAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>Task of ApiResponse (CaptureTransactionResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.Charge(System.String,Square.Connect.Model.ChargeRequest)">
            <summary>
            Charge Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-transactions-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to associate the created transaction with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ChargeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ChargeWithHttpInfo(System.String,Square.Connect.Model.ChargeRequest)">
            <summary>
            Charge Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-transactions-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to associate the created transaction with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of ChargeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ChargeAsync(System.String,Square.Connect.Model.ChargeRequest)">
            <summary>
            Charge Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-transactions-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to associate the created transaction with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ChargeResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ChargeAsyncWithHttpInfo(System.String,Square.Connect.Model.ChargeRequest)">
            <summary>
            Charge Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-transactions-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to associate the created transaction with.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (ChargeResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CreateRefund(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
            <summary>
            CreateRefund Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>CreateRefundResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CreateRefundWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
            <summary>
            CreateRefund Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of CreateRefundResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CreateRefundAsync(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
            <summary>
            CreateRefund Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of CreateRefundResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CreateRefundAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
            <summary>
            CreateRefund Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (CreateRefundResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListRefunds(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListRefunds Lists refunds for one of a business&#39;s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square&#39;s Point of Sale applications.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ListRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListRefunds Lists refunds for one of a business&#39;s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square&#39;s Point of Sale applications.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of ListRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListRefunds Lists refunds for one of a business&#39;s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square&#39;s Point of Sale applications.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ListRefundsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListRefunds Lists refunds for one of a business&#39;s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square&#39;s Point of Sale applications.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (ListRefundsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListTransactions(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListTransactions Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list transactions for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ListTransactionsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListTransactionsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListTransactions Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list transactions for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>ApiResponse of ListTransactionsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListTransactionsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListTransactions Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list transactions for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ListTransactionsResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListTransactionsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ListTransactions Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list transactions for.</param>
            <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
            <param name="sortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; (optional)</param>
            <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information. (optional)</param>
            <returns>Task of ApiResponse (ListTransactionsResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.RetrieveTransaction(System.String,System.String)">
            <summary>
            RetrieveTransaction Retrieves details for a single transaction.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the transaction to retrieve.</param>
            <returns>RetrieveTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.RetrieveTransactionWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveTransaction Retrieves details for a single transaction.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the transaction to retrieve.</param>
            <returns>ApiResponse of RetrieveTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.RetrieveTransactionAsync(System.String,System.String)">
            <summary>
            RetrieveTransaction Retrieves details for a single transaction.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the transaction to retrieve.</param>
            <returns>Task of RetrieveTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.RetrieveTransactionAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveTransaction Retrieves details for a single transaction.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the transaction&#39;s associated location.</param>
            <param name="transactionId">The ID of the transaction to retrieve.</param>
            <returns>Task of ApiResponse (RetrieveTransactionResponse)</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.VoidTransaction(System.String,System.String)">
            <summary>
            VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>VoidTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.VoidTransactionWithHttpInfo(System.String,System.String)">
            <summary>
            VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>ApiResponse of VoidTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.VoidTransactionAsync(System.String,System.String)">
            <summary>
            VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>Task of VoidTransactionResponse</returns>
        </member>
        <member name="M:Square.Connect.Api.TransactionsApi.VoidTransactionAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-transactions-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId"></param>
            <param name="transactionId"></param>
            <returns>Task of ApiResponse (VoidTransactionResponse)</returns>
        </member>
        <member name="T:Square.Connect.Api.IV1EmployeesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployee(Square.Connect.Model.V1Employee)">
            <summary>
            CreateEmployee
            </summary>
            <remarks>
             Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeWithHttpInfo(Square.Connect.Model.V1Employee)">
            <summary>
            CreateEmployee
            </summary>
            <remarks>
             Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeRole(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            CreateEmployeeRole
            </summary>
            <remarks>
            Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
            <returns>V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeRoleWithHttpInfo(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            CreateEmployeeRole
            </summary>
            <remarks>
            Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
            <returns>ApiResponse of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateTimecard(Square.Connect.Model.V1Timecard)">
            <summary>
            CreateTimecard
            </summary>
            <remarks>
            Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateTimecardWithHttpInfo(Square.Connect.Model.V1Timecard)">
            <summary>
            CreateTimecard
            </summary>
            <remarks>
            Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.DeleteTimecard(System.String)">
            <summary>
            DeleteTimecard
            </summary>
            <remarks>
            Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to delete.</param>
            <returns>Object</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.DeleteTimecardWithHttpInfo(System.String)">
            <summary>
            DeleteTimecard
            </summary>
            <remarks>
            Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to delete.</param>
            <returns>ApiResponse of Object</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListCashDrawerShifts(System.String,System.String,System.String,System.String)">
            <summary>
            ListCashDrawerShifts
            </summary>
            <remarks>
            Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
            <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
            <returns>List&lt;V1CashDrawerShift&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListCashDrawerShiftsWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            ListCashDrawerShifts
            </summary>
            <remarks>
            Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
            <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
            <returns>ApiResponse of List&lt;V1CashDrawerShift&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeeRoles(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeRoles
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employee roles.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1EmployeeRole&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeeRolesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeRoles
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employee roles.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1EmployeeRole&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployees(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employees.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
            <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
            <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Employee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeesWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employees.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
            <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
            <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Employee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardEvents(System.String)">
            <summary>
            ListTimecardEvents
            </summary>
            <remarks>
            Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to list events for.</param>
            <returns>List&lt;V1TimecardEvent&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardEventsWithHttpInfo(System.String)">
            <summary>
            ListTimecardEvents
            </summary>
            <remarks>
            Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to list events for.</param>
            <returns>ApiResponse of List&lt;V1TimecardEvent&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecards(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            ListTimecards
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employee timecards.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
            <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
            <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Timecard&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            ListTimecards
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employee timecards.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
            <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
            <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Timecard&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveCashDrawerShift(System.String,System.String)">
            <summary>
            RetrieveCashDrawerShift
            </summary>
            <remarks>
            Provides the details for a single cash drawer shift, including all events that occurred during the shift.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="shiftId">The shift&#39;s ID.</param>
            <returns>V1CashDrawerShift</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveCashDrawerShiftWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveCashDrawerShift
            </summary>
            <remarks>
            Provides the details for a single cash drawer shift, including all events that occurred during the shift.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="shiftId">The shift&#39;s ID.</param>
            <returns>ApiResponse of V1CashDrawerShift</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployee(System.String)">
            <summary>
            RetrieveEmployee
            </summary>
            <remarks>
            Provides the details for a single employee.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The employee&#39;s ID.</param>
            <returns>V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployee
            </summary>
            <remarks>
            Provides the details for a single employee.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The employee&#39;s ID.</param>
            <returns>ApiResponse of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeRole(System.String)">
            <summary>
            RetrieveEmployeeRole
            </summary>
            <remarks>
            Provides the details for a single employee role.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The role&#39;s ID.</param>
            <returns>V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeRoleWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployeeRole
            </summary>
            <remarks>
            Provides the details for a single employee role.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The role&#39;s ID.</param>
            <returns>ApiResponse of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveTimecard(System.String)">
            <summary>
            RetrieveTimecard
            </summary>
            <remarks>
            Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The timecard&#39;s ID.</param>
            <returns>V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveTimecardWithHttpInfo(System.String)">
            <summary>
            RetrieveTimecard
            </summary>
            <remarks>
            Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The timecard&#39;s ID.</param>
            <returns>ApiResponse of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployee(System.String,Square.Connect.Model.V1Employee)">
            <summary>
            UpdateEmployee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeWithHttpInfo(System.String,Square.Connect.Model.V1Employee)">
            <summary>
            UpdateEmployee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeRole(System.String,Square.Connect.Model.V1EmployeeRole)">
            <summary>
            UpdateEmployeeRole
            </summary>
            <remarks>
            Modifies the details of an employee role.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeRoleWithHttpInfo(System.String,Square.Connect.Model.V1EmployeeRole)">
            <summary>
            UpdateEmployeeRole
            </summary>
            <remarks>
            Modifies the details of an employee role.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateTimecard(System.String,Square.Connect.Model.V1Timecard)">
            <summary>
            UpdateTimecard
            </summary>
            <remarks>
            Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">TThe ID of the timecard to modify.</param>
            <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
            <returns>V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateTimecardWithHttpInfo(System.String,Square.Connect.Model.V1Timecard)">
            <summary>
            UpdateTimecard
            </summary>
            <remarks>
            Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">TThe ID of the timecard to modify.</param>
            <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeAsync(Square.Connect.Model.V1Employee)">
            <summary>
            CreateEmployee
            </summary>
            <remarks>
             Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeAsyncWithHttpInfo(Square.Connect.Model.V1Employee)">
            <summary>
            CreateEmployee
            </summary>
            <remarks>
             Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Employee)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeRoleAsync(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            CreateEmployeeRole
            </summary>
            <remarks>
            Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
            <returns>Task of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeRoleAsyncWithHttpInfo(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            CreateEmployeeRole
            </summary>
            <remarks>
            Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
            <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateTimecardAsync(Square.Connect.Model.V1Timecard)">
            <summary>
            CreateTimecard
            </summary>
            <remarks>
            Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateTimecardAsyncWithHttpInfo(Square.Connect.Model.V1Timecard)">
            <summary>
            CreateTimecard
            </summary>
            <remarks>
            Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Timecard)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.DeleteTimecardAsync(System.String)">
            <summary>
            DeleteTimecard
            </summary>
            <remarks>
            Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to delete.</param>
            <returns>Task of Object</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.DeleteTimecardAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteTimecard
            </summary>
            <remarks>
            Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to delete.</param>
            <returns>Task of ApiResponse (Object)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListCashDrawerShiftsAsync(System.String,System.String,System.String,System.String)">
            <summary>
            ListCashDrawerShifts
            </summary>
            <remarks>
            Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
            <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
            <returns>Task of List&lt;V1CashDrawerShift&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListCashDrawerShiftsAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            ListCashDrawerShifts
            </summary>
            <remarks>
            Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
            <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1CashDrawerShift&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeeRolesAsync(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeRoles
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employee roles.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1EmployeeRole&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeeRolesAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeRoles
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employee roles.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1EmployeeRole&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employees.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
            <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
            <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Employee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employees.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
            <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
            <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Employee&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardEventsAsync(System.String)">
            <summary>
            ListTimecardEvents
            </summary>
            <remarks>
            Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to list events for.</param>
            <returns>Task of List&lt;V1TimecardEvent&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardEventsAsyncWithHttpInfo(System.String)">
            <summary>
            ListTimecardEvents
            </summary>
            <remarks>
            Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to list events for.</param>
            <returns>Task of ApiResponse (List&lt;V1TimecardEvent&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardsAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            ListTimecards
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employee timecards.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
            <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
            <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Timecard&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            ListTimecards
            </summary>
            <remarks>
            Provides summary information for all of a business&#39;s employee timecards.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
            <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
            <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Timecard&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveCashDrawerShiftAsync(System.String,System.String)">
            <summary>
            RetrieveCashDrawerShift
            </summary>
            <remarks>
            Provides the details for a single cash drawer shift, including all events that occurred during the shift.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="shiftId">The shift&#39;s ID.</param>
            <returns>Task of V1CashDrawerShift</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveCashDrawerShiftAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveCashDrawerShift
            </summary>
            <remarks>
            Provides the details for a single cash drawer shift, including all events that occurred during the shift.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="shiftId">The shift&#39;s ID.</param>
            <returns>Task of ApiResponse (V1CashDrawerShift)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeAsync(System.String)">
            <summary>
            RetrieveEmployee
            </summary>
            <remarks>
            Provides the details for a single employee.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The employee&#39;s ID.</param>
            <returns>Task of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployee
            </summary>
            <remarks>
            Provides the details for a single employee.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The employee&#39;s ID.</param>
            <returns>Task of ApiResponse (V1Employee)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeRoleAsync(System.String)">
            <summary>
            RetrieveEmployeeRole
            </summary>
            <remarks>
            Provides the details for a single employee role.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The role&#39;s ID.</param>
            <returns>Task of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeRoleAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployeeRole
            </summary>
            <remarks>
            Provides the details for a single employee role.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The role&#39;s ID.</param>
            <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveTimecardAsync(System.String)">
            <summary>
            RetrieveTimecard
            </summary>
            <remarks>
            Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The timecard&#39;s ID.</param>
            <returns>Task of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveTimecardAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveTimecard
            </summary>
            <remarks>
            Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The timecard&#39;s ID.</param>
            <returns>Task of ApiResponse (V1Timecard)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeAsync(System.String,Square.Connect.Model.V1Employee)">
            <summary>
            UpdateEmployee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Employee)">
            <summary>
            UpdateEmployee
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Employee)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeRoleAsync(System.String,Square.Connect.Model.V1EmployeeRole)">
            <summary>
            UpdateEmployeeRole
            </summary>
            <remarks>
            Modifies the details of an employee role.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeRoleAsyncWithHttpInfo(System.String,Square.Connect.Model.V1EmployeeRole)">
            <summary>
            UpdateEmployeeRole
            </summary>
            <remarks>
            Modifies the details of an employee role.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateTimecardAsync(System.String,Square.Connect.Model.V1Timecard)">
            <summary>
            UpdateTimecard
            </summary>
            <remarks>
            Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">TThe ID of the timecard to modify.</param>
            <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
            <returns>Task of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateTimecardAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Timecard)">
            <summary>
            UpdateTimecard
            </summary>
            <remarks>
            Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">TThe ID of the timecard to modify.</param>
            <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Timecard)</returns>
        </member>
        <member name="T:Square.Connect.Api.V1EmployeesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.V1EmployeesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.V1EmployeesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.V1EmployeesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.V1EmployeesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployee(Square.Connect.Model.V1Employee)">
            <summary>
            CreateEmployee  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeWithHttpInfo(Square.Connect.Model.V1Employee)">
            <summary>
            CreateEmployee  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeAsync(Square.Connect.Model.V1Employee)">
            <summary>
            CreateEmployee  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeAsyncWithHttpInfo(Square.Connect.Model.V1Employee)">
            <summary>
            CreateEmployee  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Employee)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeRole(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            CreateEmployeeRole Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
            <returns>V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeRoleWithHttpInfo(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            CreateEmployeeRole Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
            <returns>ApiResponse of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeRoleAsync(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            CreateEmployeeRole Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
            <returns>Task of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeRoleAsyncWithHttpInfo(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            CreateEmployeeRole Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
            <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateTimecard(Square.Connect.Model.V1Timecard)">
            <summary>
            CreateTimecard Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateTimecardWithHttpInfo(Square.Connect.Model.V1Timecard)">
            <summary>
            CreateTimecard Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateTimecardAsync(Square.Connect.Model.V1Timecard)">
            <summary>
            CreateTimecard Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateTimecardAsyncWithHttpInfo(Square.Connect.Model.V1Timecard)">
            <summary>
            CreateTimecard Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Timecard)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DeleteTimecard(System.String)">
            <summary>
            DeleteTimecard Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to delete.</param>
            <returns>Object</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DeleteTimecardWithHttpInfo(System.String)">
            <summary>
            DeleteTimecard Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to delete.</param>
            <returns>ApiResponse of Object</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DeleteTimecardAsync(System.String)">
            <summary>
            DeleteTimecard Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to delete.</param>
            <returns>Task of Object</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DeleteTimecardAsyncWithHttpInfo(System.String)">
            <summary>
            DeleteTimecard Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to delete.</param>
            <returns>Task of ApiResponse (Object)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListCashDrawerShifts(System.String,System.String,System.String,System.String)">
            <summary>
            ListCashDrawerShifts Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
            <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
            <returns>List&lt;V1CashDrawerShift&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListCashDrawerShiftsWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            ListCashDrawerShifts Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
            <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
            <returns>ApiResponse of List&lt;V1CashDrawerShift&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListCashDrawerShiftsAsync(System.String,System.String,System.String,System.String)">
            <summary>
            ListCashDrawerShifts Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
            <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
            <returns>Task of List&lt;V1CashDrawerShift&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListCashDrawerShiftsAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            ListCashDrawerShifts Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
            <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1CashDrawerShift&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeeRoles(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeRoles Provides summary information for all of a business&#39;s employee roles.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1EmployeeRole&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeeRolesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeRoles Provides summary information for all of a business&#39;s employee roles.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1EmployeeRole&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeeRolesAsync(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeRoles Provides summary information for all of a business&#39;s employee roles.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1EmployeeRole&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeeRolesAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployeeRoles Provides summary information for all of a business&#39;s employee roles.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1EmployeeRole&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployees(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees Provides summary information for all of a business&#39;s employees.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
            <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
            <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Employee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeesWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees Provides summary information for all of a business&#39;s employees.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
            <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
            <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Employee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees Provides summary information for all of a business&#39;s employees.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
            <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
            <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Employee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListEmployees Provides summary information for all of a business&#39;s employees.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
            <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
            <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Employee&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardEvents(System.String)">
            <summary>
            ListTimecardEvents Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to list events for.</param>
            <returns>List&lt;V1TimecardEvent&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardEventsWithHttpInfo(System.String)">
            <summary>
            ListTimecardEvents Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to list events for.</param>
            <returns>ApiResponse of List&lt;V1TimecardEvent&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardEventsAsync(System.String)">
            <summary>
            ListTimecardEvents Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to list events for.</param>
            <returns>Task of List&lt;V1TimecardEvent&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardEventsAsyncWithHttpInfo(System.String)">
            <summary>
            ListTimecardEvents Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The ID of the timecard to list events for.</param>
            <returns>Task of ApiResponse (List&lt;V1TimecardEvent&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecards(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            ListTimecards Provides summary information for all of a business&#39;s employee timecards.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
            <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
            <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Timecard&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            ListTimecards Provides summary information for all of a business&#39;s employee timecards.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
            <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
            <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Timecard&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardsAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            ListTimecards Provides summary information for all of a business&#39;s employee timecards.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
            <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
            <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Timecard&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            ListTimecards Provides summary information for all of a business&#39;s employee timecards.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
            <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
            <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
            <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
            <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Timecard&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveCashDrawerShift(System.String,System.String)">
            <summary>
            RetrieveCashDrawerShift Provides the details for a single cash drawer shift, including all events that occurred during the shift.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="shiftId">The shift&#39;s ID.</param>
            <returns>V1CashDrawerShift</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveCashDrawerShiftWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveCashDrawerShift Provides the details for a single cash drawer shift, including all events that occurred during the shift.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="shiftId">The shift&#39;s ID.</param>
            <returns>ApiResponse of V1CashDrawerShift</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveCashDrawerShiftAsync(System.String,System.String)">
            <summary>
            RetrieveCashDrawerShift Provides the details for a single cash drawer shift, including all events that occurred during the shift.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="shiftId">The shift&#39;s ID.</param>
            <returns>Task of V1CashDrawerShift</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveCashDrawerShiftAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveCashDrawerShift Provides the details for a single cash drawer shift, including all events that occurred during the shift.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
            <param name="shiftId">The shift&#39;s ID.</param>
            <returns>Task of ApiResponse (V1CashDrawerShift)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployee(System.String)">
            <summary>
            RetrieveEmployee Provides the details for a single employee.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The employee&#39;s ID.</param>
            <returns>V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployee Provides the details for a single employee.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The employee&#39;s ID.</param>
            <returns>ApiResponse of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeAsync(System.String)">
            <summary>
            RetrieveEmployee Provides the details for a single employee.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The employee&#39;s ID.</param>
            <returns>Task of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployee Provides the details for a single employee.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The employee&#39;s ID.</param>
            <returns>Task of ApiResponse (V1Employee)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeRole(System.String)">
            <summary>
            RetrieveEmployeeRole Provides the details for a single employee role.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The role&#39;s ID.</param>
            <returns>V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeRoleWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployeeRole Provides the details for a single employee role.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The role&#39;s ID.</param>
            <returns>ApiResponse of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeRoleAsync(System.String)">
            <summary>
            RetrieveEmployeeRole Provides the details for a single employee role.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The role&#39;s ID.</param>
            <returns>Task of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeRoleAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveEmployeeRole Provides the details for a single employee role.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The role&#39;s ID.</param>
            <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveTimecard(System.String)">
            <summary>
            RetrieveTimecard Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The timecard&#39;s ID.</param>
            <returns>V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveTimecardWithHttpInfo(System.String)">
            <summary>
            RetrieveTimecard Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The timecard&#39;s ID.</param>
            <returns>ApiResponse of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveTimecardAsync(System.String)">
            <summary>
            RetrieveTimecard Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The timecard&#39;s ID.</param>
            <returns>Task of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveTimecardAsyncWithHttpInfo(System.String)">
            <summary>
            RetrieveTimecard Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">The timecard&#39;s ID.</param>
            <returns>Task of ApiResponse (V1Timecard)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployee(System.String,Square.Connect.Model.V1Employee)">
            <summary>
            UpdateEmployee 
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeWithHttpInfo(System.String,Square.Connect.Model.V1Employee)">
            <summary>
            UpdateEmployee 
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeAsync(System.String,Square.Connect.Model.V1Employee)">
            <summary>
            UpdateEmployee 
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Employee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Employee)">
            <summary>
            UpdateEmployee 
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employeeId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Employee)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeRole(System.String,Square.Connect.Model.V1EmployeeRole)">
            <summary>
            UpdateEmployeeRole Modifies the details of an employee role.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeRoleWithHttpInfo(System.String,Square.Connect.Model.V1EmployeeRole)">
            <summary>
            UpdateEmployeeRole Modifies the details of an employee role.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeRoleAsync(System.String,Square.Connect.Model.V1EmployeeRole)">
            <summary>
            UpdateEmployeeRole Modifies the details of an employee role.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1EmployeeRole</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeRoleAsyncWithHttpInfo(System.String,Square.Connect.Model.V1EmployeeRole)">
            <summary>
            UpdateEmployeeRole Modifies the details of an employee role.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roleId">The ID of the role to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateTimecard(System.String,Square.Connect.Model.V1Timecard)">
            <summary>
            UpdateTimecard Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">TThe ID of the timecard to modify.</param>
            <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
            <returns>V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateTimecardWithHttpInfo(System.String,Square.Connect.Model.V1Timecard)">
            <summary>
            UpdateTimecard Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">TThe ID of the timecard to modify.</param>
            <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateTimecardAsync(System.String,Square.Connect.Model.V1Timecard)">
            <summary>
            UpdateTimecard Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">TThe ID of the timecard to modify.</param>
            <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
            <returns>Task of V1Timecard</returns>
        </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateTimecardAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Timecard)">
            <summary>
            UpdateTimecard Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="timecardId">TThe ID of the timecard to modify.</param>
            <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Timecard)</returns>
        </member>
        <member name="T:Square.Connect.Api.IV1ItemsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.AdjustInventory(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
            <summary>
            AdjustInventory
            </summary>
            <remarks>
            Adjusts an item variation&#39;s current available inventory.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="variationId">The ID of the variation to adjust inventory information for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1InventoryEntry</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.AdjustInventoryWithHttpInfo(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
            <summary>
            AdjustInventory
            </summary>
            <remarks>
            Adjusts an item variation&#39;s current available inventory.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="variationId">The ID of the variation to adjust inventory information for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1InventoryEntry</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyFee(System.String,System.String,System.String)">
            <summary>
            ApplyFee
            </summary>
            <remarks>
            Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyFeeWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ApplyFee
            </summary>
            <remarks>
            Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyModifierList(System.String,System.String,System.String)">
            <summary>
            ApplyModifierList
            </summary>
            <remarks>
            Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to apply.</param>
            <param name="itemId">The ID of the item to add the modifier list to.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyModifierListWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ApplyModifierList
            </summary>
            <remarks>
            Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to apply.</param>
            <param name="itemId">The ID of the item to add the modifier list to.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateCategory(System.String,Square.Connect.Model.V1Category)">
            <summary>
            CreateCategory
            </summary>
            <remarks>
            Creates an item category.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateCategoryWithHttpInfo(System.String,Square.Connect.Model.V1Category)">
            <summary>
            CreateCategory
            </summary>
            <remarks>
            Creates an item category.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateDiscount(System.String,Square.Connect.Model.V1Discount)">
            <summary>
            CreateDiscount
            </summary>
            <remarks>
            Creates a discount.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateDiscountWithHttpInfo(System.String,Square.Connect.Model.V1Discount)">
            <summary>
            CreateDiscount
            </summary>
            <remarks>
            Creates a discount.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateFee(System.String,Square.Connect.Model.V1Fee)">
            <summary>
            CreateFee
            </summary>
            <remarks>
            Creates a fee (tax).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a fee for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateFeeWithHttpInfo(System.String,Square.Connect.Model.V1Fee)">
            <summary>
            CreateFee
            </summary>
            <remarks>
            Creates a fee (tax).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a fee for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateItem(System.String,Square.Connect.Model.V1Item)">
            <summary>
            CreateItem
            </summary>
            <remarks>
            Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateItemWithHttpInfo(System.String,Square.Connect.Model.V1Item)">
            <summary>
            CreateItem
            </summary>
            <remarks>
            Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierList(System.String,Square.Connect.Model.V1ModifierList)">
            <summary>
            CreateModifierList
            </summary>
            <remarks>
            Creates an item modifier list and at least one modifier option for it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a modifier list for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierListWithHttpInfo(System.String,Square.Connect.Model.V1ModifierList)">
            <summary>
            CreateModifierList
            </summary>
            <remarks>
            Creates an item modifier list and at least one modifier option for it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a modifier list for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierOption(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            CreateModifierOption
            </summary>
            <remarks>
            Creates an item modifier option and adds it to a modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierOptionWithHttpInfo(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            CreateModifierOption
            </summary>
            <remarks>
            Creates an item modifier option and adds it to a modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreatePage(System.String,Square.Connect.Model.V1Page)">
            <summary>
            CreatePage
            </summary>
            <remarks>
            Creates a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreatePageWithHttpInfo(System.String,Square.Connect.Model.V1Page)">
            <summary>
            CreatePage
            </summary>
            <remarks>
            Creates a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateVariation(System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            CreateVariation
            </summary>
            <remarks>
            Creates an item variation for an existing item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateVariationWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            CreateVariation
            </summary>
            <remarks>
            Creates an item variation for an existing item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteCategory(System.String,System.String)">
            <summary>
            DeleteCategory
            </summary>
            <remarks>
            Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to delete.</param>
            <returns>V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteCategoryWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteCategory
            </summary>
            <remarks>
            Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to delete.</param>
            <returns>ApiResponse of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteDiscount(System.String,System.String)">
            <summary>
            DeleteDiscount
            </summary>
            <remarks>
            Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to delete.</param>
            <returns>V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteDiscountWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteDiscount
            </summary>
            <remarks>
            Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to delete.</param>
            <returns>ApiResponse of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteFee(System.String,System.String)">
            <summary>
            DeleteFee
            </summary>
            <remarks>
            Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to delete.</param>
            <returns>V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteFeeWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteFee
            </summary>
            <remarks>
            Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to delete.</param>
            <returns>ApiResponse of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteItem(System.String,System.String)">
            <summary>
            DeleteItem
            </summary>
            <remarks>
            Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteItemWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteItem
            </summary>
            <remarks>
            Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierList(System.String,System.String)">
            <summary>
            DeleteModifierList
            </summary>
            <remarks>
            Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <returns>V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierListWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteModifierList
            </summary>
            <remarks>
            Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <returns>ApiResponse of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierOption(System.String,System.String,System.String)">
            <summary>
            DeleteModifierOption
            </summary>
            <remarks>
            Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <returns>V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierOptionWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            DeleteModifierOption
            </summary>
            <remarks>
            Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <returns>ApiResponse of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePage(System.String,System.String)">
            <summary>
            DeletePage
            </summary>
            <remarks>
            Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageWithHttpInfo(System.String,System.String)">
            <summary>
            DeletePage
            </summary>
            <remarks>
            Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageCell(System.String,System.String,System.String,System.String)">
            <summary>
            DeletePageCell
            </summary>
            <remarks>
            Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
            <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageCellWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            DeletePageCell
            </summary>
            <remarks>
            Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
            <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteVariation(System.String,System.String,System.String)">
            <summary>
            DeleteVariation
            </summary>
            <remarks>
            Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to delete.</param>
            <param name="variationId">The ID of the variation to delete.</param>
            <returns>V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteVariationWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            DeleteVariation
            </summary>
            <remarks>
            Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to delete.</param>
            <param name="variationId">The ID of the variation to delete.</param>
            <returns>ApiResponse of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListCategories(System.String)">
            <summary>
            ListCategories
            </summary>
            <remarks>
            Lists all of a location&#39;s item categories.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>List&lt;V1Category&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListCategoriesWithHttpInfo(System.String)">
            <summary>
            ListCategories
            </summary>
            <remarks>
            Lists all of a location&#39;s item categories.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>ApiResponse of List&lt;V1Category&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListDiscounts(System.String)">
            <summary>
            ListDiscounts
            </summary>
            <remarks>
            Lists all of a location&#39;s discounts.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>List&lt;V1Discount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListDiscountsWithHttpInfo(System.String)">
            <summary>
            ListDiscounts
            </summary>
            <remarks>
            Lists all of a location&#39;s discounts.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>ApiResponse of List&lt;V1Discount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListFees(System.String)">
            <summary>
            ListFees
            </summary>
            <remarks>
            Lists all of a location&#39;s fees (taxes).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list fees for.</param>
            <returns>List&lt;V1Fee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListFeesWithHttpInfo(System.String)">
            <summary>
            ListFees
            </summary>
            <remarks>
            Lists all of a location&#39;s fees (taxes).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list fees for.</param>
            <returns>ApiResponse of List&lt;V1Fee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListInventory(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListInventory
            </summary>
            <remarks>
            Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1InventoryEntry&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListInventoryWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListInventory
            </summary>
            <remarks>
            Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1InventoryEntry&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListItems(System.String,System.String)">
            <summary>
            ListItems
            </summary>
            <remarks>
            Provides summary information for all of a location&#39;s items.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list items for.</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Item&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListItemsWithHttpInfo(System.String,System.String)">
            <summary>
            ListItems
            </summary>
            <remarks>
            Provides summary information for all of a location&#39;s items.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list items for.</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Item&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListModifierLists(System.String)">
            <summary>
            ListModifierLists
            </summary>
            <remarks>
            Lists all of a location&#39;s modifier lists.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list modifier lists for.</param>
            <returns>List&lt;V1ModifierList&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListModifierListsWithHttpInfo(System.String)">
            <summary>
            ListModifierLists
            </summary>
            <remarks>
            Lists all of a location&#39;s modifier lists.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list modifier lists for.</param>
            <returns>ApiResponse of List&lt;V1ModifierList&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListPages(System.String)">
            <summary>
            ListPages
            </summary>
            <remarks>
            Lists all of a location&#39;s Favorites pages in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list Favorites pages for.</param>
            <returns>List&lt;V1Page&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListPagesWithHttpInfo(System.String)">
            <summary>
            ListPages
            </summary>
            <remarks>
            Lists all of a location&#39;s Favorites pages in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list Favorites pages for.</param>
            <returns>ApiResponse of List&lt;V1Page&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveFee(System.String,System.String,System.String)">
            <summary>
            RemoveFee
            </summary>
            <remarks>
            Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveFeeWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RemoveFee
            </summary>
            <remarks>
            Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveModifierList(System.String,System.String,System.String)">
            <summary>
            RemoveModifierList
            </summary>
            <remarks>
            Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to remove.</param>
            <param name="itemId">The ID of the item to remove the modifier list from.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveModifierListWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RemoveModifierList
            </summary>
            <remarks>
            Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to remove.</param>
            <param name="itemId">The ID of the item to remove the modifier list from.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveItem(System.String,System.String)">
            <summary>
            RetrieveItem
            </summary>
            <remarks>
            Provides the details for a single item, including associated modifier lists and fees.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveItemWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveItem
            </summary>
            <remarks>
            Provides the details for a single item, including associated modifier lists and fees.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveModifierList(System.String,System.String)">
            <summary>
            RetrieveModifierList
            </summary>
            <remarks>
            Provides the details for a single modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The modifier list&#39;s ID.</param>
            <returns>V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveModifierListWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveModifierList
            </summary>
            <remarks>
            Provides the details for a single modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The modifier list&#39;s ID.</param>
            <returns>ApiResponse of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateCategory(System.String,System.String,Square.Connect.Model.V1Category)">
            <summary>
            UpdateCategory
            </summary>
            <remarks>
            Modifies the details of an existing item category.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateCategoryWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Category)">
            <summary>
            UpdateCategory
            </summary>
            <remarks>
            Modifies the details of an existing item category.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateDiscount(System.String,System.String,Square.Connect.Model.V1Discount)">
            <summary>
            UpdateDiscount
            </summary>
            <remarks>
            Modifies the details of an existing discount.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateDiscountWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Discount)">
            <summary>
            UpdateDiscount
            </summary>
            <remarks>
            Modifies the details of an existing discount.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateFee(System.String,System.String,Square.Connect.Model.V1Fee)">
            <summary>
            UpdateFee
            </summary>
            <remarks>
            Modifies the details of an existing fee (tax).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateFeeWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Fee)">
            <summary>
            UpdateFee
            </summary>
            <remarks>
            Modifies the details of an existing fee (tax).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateItem(System.String,System.String,Square.Connect.Model.V1Item)">
            <summary>
            UpdateItem
            </summary>
            <remarks>
            Modifies the core details of an existing item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateItemWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Item)">
            <summary>
            UpdateItem
            </summary>
            <remarks>
            Modifies the core details of an existing item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierList(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
            <summary>
            UpdateModifierList
            </summary>
            <remarks>
            Modifies the details of an existing item modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierListWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
            <summary>
            UpdateModifierList
            </summary>
            <remarks>
            Modifies the details of an existing item modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierOption(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            UpdateModifierOption
            </summary>
            <remarks>
            Modifies the details of an existing item modifier option.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierOptionWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            UpdateModifierOption
            </summary>
            <remarks>
            Modifies the details of an existing item modifier option.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePage(System.String,System.String,Square.Connect.Model.V1Page)">
            <summary>
            UpdatePage
            </summary>
            <remarks>
            Modifies the details of a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
            <param name="pageId">The ID of the page to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Page)">
            <summary>
            UpdatePage
            </summary>
            <remarks>
            Modifies the details of a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
            <param name="pageId">The ID of the page to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageCell(System.String,System.String,Square.Connect.Model.V1PageCell)">
            <summary>
            UpdatePageCell
            </summary>
            <remarks>
            Modifies a cell of a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page the cell belongs to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageCellWithHttpInfo(System.String,System.String,Square.Connect.Model.V1PageCell)">
            <summary>
            UpdatePageCell
            </summary>
            <remarks>
            Modifies a cell of a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page the cell belongs to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateVariation(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            UpdateVariation
            </summary>
            <remarks>
            Modifies the details of an existing item variation.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="variationId">The ID of the variation to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateVariationWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            UpdateVariation
            </summary>
            <remarks>
            Modifies the details of an existing item variation.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="variationId">The ID of the variation to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.AdjustInventoryAsync(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
            <summary>
            AdjustInventory
            </summary>
            <remarks>
            Adjusts an item variation&#39;s current available inventory.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="variationId">The ID of the variation to adjust inventory information for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1InventoryEntry</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.AdjustInventoryAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
            <summary>
            AdjustInventory
            </summary>
            <remarks>
            Adjusts an item variation&#39;s current available inventory.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="variationId">The ID of the variation to adjust inventory information for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1InventoryEntry)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyFeeAsync(System.String,System.String,System.String)">
            <summary>
            ApplyFee
            </summary>
            <remarks>
            Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyFeeAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ApplyFee
            </summary>
            <remarks>
            Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyModifierListAsync(System.String,System.String,System.String)">
            <summary>
            ApplyModifierList
            </summary>
            <remarks>
            Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to apply.</param>
            <param name="itemId">The ID of the item to add the modifier list to.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyModifierListAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ApplyModifierList
            </summary>
            <remarks>
            Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to apply.</param>
            <param name="itemId">The ID of the item to add the modifier list to.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateCategoryAsync(System.String,Square.Connect.Model.V1Category)">
            <summary>
            CreateCategory
            </summary>
            <remarks>
            Creates an item category.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateCategoryAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Category)">
            <summary>
            CreateCategory
            </summary>
            <remarks>
            Creates an item category.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Category)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateDiscountAsync(System.String,Square.Connect.Model.V1Discount)">
            <summary>
            CreateDiscount
            </summary>
            <remarks>
            Creates a discount.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateDiscountAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Discount)">
            <summary>
            CreateDiscount
            </summary>
            <remarks>
            Creates a discount.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Discount)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateFeeAsync(System.String,Square.Connect.Model.V1Fee)">
            <summary>
            CreateFee
            </summary>
            <remarks>
            Creates a fee (tax).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a fee for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateFeeAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Fee)">
            <summary>
            CreateFee
            </summary>
            <remarks>
            Creates a fee (tax).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a fee for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Fee)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateItemAsync(System.String,Square.Connect.Model.V1Item)">
            <summary>
            CreateItem
            </summary>
            <remarks>
            Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateItemAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Item)">
            <summary>
            CreateItem
            </summary>
            <remarks>
            Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierListAsync(System.String,Square.Connect.Model.V1ModifierList)">
            <summary>
            CreateModifierList
            </summary>
            <remarks>
            Creates an item modifier list and at least one modifier option for it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a modifier list for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierListAsyncWithHttpInfo(System.String,Square.Connect.Model.V1ModifierList)">
            <summary>
            CreateModifierList
            </summary>
            <remarks>
            Creates an item modifier list and at least one modifier option for it.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a modifier list for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1ModifierList)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierOptionAsync(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            CreateModifierOption
            </summary>
            <remarks>
            Creates an item modifier option and adds it to a modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierOptionAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            CreateModifierOption
            </summary>
            <remarks>
            Creates an item modifier option and adds it to a modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1ModifierOption)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreatePageAsync(System.String,Square.Connect.Model.V1Page)">
            <summary>
            CreatePage
            </summary>
            <remarks>
            Creates a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreatePageAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Page)">
            <summary>
            CreatePage
            </summary>
            <remarks>
            Creates a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateVariationAsync(System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            CreateVariation
            </summary>
            <remarks>
            Creates an item variation for an existing item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateVariationAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            CreateVariation
            </summary>
            <remarks>
            Creates an item variation for an existing item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Variation)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteCategoryAsync(System.String,System.String)">
            <summary>
            DeleteCategory
            </summary>
            <remarks>
            Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to delete.</param>
            <returns>Task of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteCategoryAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteCategory
            </summary>
            <remarks>
            Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to delete.</param>
            <returns>Task of ApiResponse (V1Category)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteDiscountAsync(System.String,System.String)">
            <summary>
            DeleteDiscount
            </summary>
            <remarks>
            Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to delete.</param>
            <returns>Task of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteDiscountAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteDiscount
            </summary>
            <remarks>
            Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to delete.</param>
            <returns>Task of ApiResponse (V1Discount)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteFeeAsync(System.String,System.String)">
            <summary>
            DeleteFee
            </summary>
            <remarks>
            Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to delete.</param>
            <returns>Task of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteFeeAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteFee
            </summary>
            <remarks>
            Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to delete.</param>
            <returns>Task of ApiResponse (V1Fee)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteItemAsync(System.String,System.String)">
            <summary>
            DeleteItem
            </summary>
            <remarks>
            Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteItemAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteItem
            </summary>
            <remarks>
            Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierListAsync(System.String,System.String)">
            <summary>
            DeleteModifierList
            </summary>
            <remarks>
            Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <returns>Task of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierListAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteModifierList
            </summary>
            <remarks>
            Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <returns>Task of ApiResponse (V1ModifierList)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierOptionAsync(System.String,System.String,System.String)">
            <summary>
            DeleteModifierOption
            </summary>
            <remarks>
            Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <returns>Task of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierOptionAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            DeleteModifierOption
            </summary>
            <remarks>
            Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <returns>Task of ApiResponse (V1ModifierOption)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageAsync(System.String,System.String)">
            <summary>
            DeletePage
            </summary>
            <remarks>
            Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeletePage
            </summary>
            <remarks>
            Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageCellAsync(System.String,System.String,System.String,System.String)">
            <summary>
            DeletePageCell
            </summary>
            <remarks>
            Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
            <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageCellAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            DeletePageCell
            </summary>
            <remarks>
            Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
            <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteVariationAsync(System.String,System.String,System.String)">
            <summary>
            DeleteVariation
            </summary>
            <remarks>
            Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to delete.</param>
            <param name="variationId">The ID of the variation to delete.</param>
            <returns>Task of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteVariationAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            DeleteVariation
            </summary>
            <remarks>
            Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to delete.</param>
            <param name="variationId">The ID of the variation to delete.</param>
            <returns>Task of ApiResponse (V1Variation)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListCategoriesAsync(System.String)">
            <summary>
            ListCategories
            </summary>
            <remarks>
            Lists all of a location&#39;s item categories.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>Task of List&lt;V1Category&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListCategoriesAsyncWithHttpInfo(System.String)">
            <summary>
            ListCategories
            </summary>
            <remarks>
            Lists all of a location&#39;s item categories.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>Task of ApiResponse (List&lt;V1Category&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListDiscountsAsync(System.String)">
            <summary>
            ListDiscounts
            </summary>
            <remarks>
            Lists all of a location&#39;s discounts.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>Task of List&lt;V1Discount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListDiscountsAsyncWithHttpInfo(System.String)">
            <summary>
            ListDiscounts
            </summary>
            <remarks>
            Lists all of a location&#39;s discounts.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>Task of ApiResponse (List&lt;V1Discount&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListFeesAsync(System.String)">
            <summary>
            ListFees
            </summary>
            <remarks>
            Lists all of a location&#39;s fees (taxes).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list fees for.</param>
            <returns>Task of List&lt;V1Fee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListFeesAsyncWithHttpInfo(System.String)">
            <summary>
            ListFees
            </summary>
            <remarks>
            Lists all of a location&#39;s fees (taxes).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list fees for.</param>
            <returns>Task of ApiResponse (List&lt;V1Fee&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListInventoryAsync(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListInventory
            </summary>
            <remarks>
            Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1InventoryEntry&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListInventoryAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListInventory
            </summary>
            <remarks>
            Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1InventoryEntry&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListItemsAsync(System.String,System.String)">
            <summary>
            ListItems
            </summary>
            <remarks>
            Provides summary information for all of a location&#39;s items.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list items for.</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Item&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListItemsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            ListItems
            </summary>
            <remarks>
            Provides summary information for all of a location&#39;s items.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list items for.</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Item&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListModifierListsAsync(System.String)">
            <summary>
            ListModifierLists
            </summary>
            <remarks>
            Lists all of a location&#39;s modifier lists.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list modifier lists for.</param>
            <returns>Task of List&lt;V1ModifierList&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListModifierListsAsyncWithHttpInfo(System.String)">
            <summary>
            ListModifierLists
            </summary>
            <remarks>
            Lists all of a location&#39;s modifier lists.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list modifier lists for.</param>
            <returns>Task of ApiResponse (List&lt;V1ModifierList&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListPagesAsync(System.String)">
            <summary>
            ListPages
            </summary>
            <remarks>
            Lists all of a location&#39;s Favorites pages in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list Favorites pages for.</param>
            <returns>Task of List&lt;V1Page&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListPagesAsyncWithHttpInfo(System.String)">
            <summary>
            ListPages
            </summary>
            <remarks>
            Lists all of a location&#39;s Favorites pages in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list Favorites pages for.</param>
            <returns>Task of ApiResponse (List&lt;V1Page&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveFeeAsync(System.String,System.String,System.String)">
            <summary>
            RemoveFee
            </summary>
            <remarks>
            Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveFeeAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RemoveFee
            </summary>
            <remarks>
            Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveModifierListAsync(System.String,System.String,System.String)">
            <summary>
            RemoveModifierList
            </summary>
            <remarks>
            Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to remove.</param>
            <param name="itemId">The ID of the item to remove the modifier list from.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveModifierListAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RemoveModifierList
            </summary>
            <remarks>
            Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to remove.</param>
            <param name="itemId">The ID of the item to remove the modifier list from.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveItemAsync(System.String,System.String)">
            <summary>
            RetrieveItem
            </summary>
            <remarks>
            Provides the details for a single item, including associated modifier lists and fees.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveItemAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveItem
            </summary>
            <remarks>
            Provides the details for a single item, including associated modifier lists and fees.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveModifierListAsync(System.String,System.String)">
            <summary>
            RetrieveModifierList
            </summary>
            <remarks>
            Provides the details for a single modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The modifier list&#39;s ID.</param>
            <returns>Task of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveModifierListAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveModifierList
            </summary>
            <remarks>
            Provides the details for a single modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The modifier list&#39;s ID.</param>
            <returns>Task of ApiResponse (V1ModifierList)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateCategoryAsync(System.String,System.String,Square.Connect.Model.V1Category)">
            <summary>
            UpdateCategory
            </summary>
            <remarks>
            Modifies the details of an existing item category.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateCategoryAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Category)">
            <summary>
            UpdateCategory
            </summary>
            <remarks>
            Modifies the details of an existing item category.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Category)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateDiscountAsync(System.String,System.String,Square.Connect.Model.V1Discount)">
            <summary>
            UpdateDiscount
            </summary>
            <remarks>
            Modifies the details of an existing discount.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateDiscountAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Discount)">
            <summary>
            UpdateDiscount
            </summary>
            <remarks>
            Modifies the details of an existing discount.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Discount)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateFeeAsync(System.String,System.String,Square.Connect.Model.V1Fee)">
            <summary>
            UpdateFee
            </summary>
            <remarks>
            Modifies the details of an existing fee (tax).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateFeeAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Fee)">
            <summary>
            UpdateFee
            </summary>
            <remarks>
            Modifies the details of an existing fee (tax).
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Fee)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateItemAsync(System.String,System.String,Square.Connect.Model.V1Item)">
            <summary>
            UpdateItem
            </summary>
            <remarks>
            Modifies the core details of an existing item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateItemAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Item)">
            <summary>
            UpdateItem
            </summary>
            <remarks>
            Modifies the core details of an existing item.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierListAsync(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
            <summary>
            UpdateModifierList
            </summary>
            <remarks>
            Modifies the details of an existing item modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierListAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
            <summary>
            UpdateModifierList
            </summary>
            <remarks>
            Modifies the details of an existing item modifier list.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1ModifierList)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierOptionAsync(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            UpdateModifierOption
            </summary>
            <remarks>
            Modifies the details of an existing item modifier option.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierOptionAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            UpdateModifierOption
            </summary>
            <remarks>
            Modifies the details of an existing item modifier option.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1ModifierOption)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageAsync(System.String,System.String,Square.Connect.Model.V1Page)">
            <summary>
            UpdatePage
            </summary>
            <remarks>
            Modifies the details of a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
            <param name="pageId">The ID of the page to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Page)">
            <summary>
            UpdatePage
            </summary>
            <remarks>
            Modifies the details of a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
            <param name="pageId">The ID of the page to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageCellAsync(System.String,System.String,Square.Connect.Model.V1PageCell)">
            <summary>
            UpdatePageCell
            </summary>
            <remarks>
            Modifies a cell of a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page the cell belongs to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageCellAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1PageCell)">
            <summary>
            UpdatePageCell
            </summary>
            <remarks>
            Modifies a cell of a Favorites page in Square Register.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page the cell belongs to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateVariationAsync(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            UpdateVariation
            </summary>
            <remarks>
            Modifies the details of an existing item variation.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="variationId">The ID of the variation to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateVariationAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            UpdateVariation
            </summary>
            <remarks>
            Modifies the details of an existing item variation.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="variationId">The ID of the variation to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Variation)</returns>
        </member>
        <member name="T:Square.Connect.Api.V1ItemsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.V1ItemsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.V1ItemsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.V1ItemsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.V1ItemsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AdjustInventory(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
            <summary>
            AdjustInventory Adjusts an item variation&#39;s current available inventory.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="variationId">The ID of the variation to adjust inventory information for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1InventoryEntry</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AdjustInventoryWithHttpInfo(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
            <summary>
            AdjustInventory Adjusts an item variation&#39;s current available inventory.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="variationId">The ID of the variation to adjust inventory information for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1InventoryEntry</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AdjustInventoryAsync(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
            <summary>
            AdjustInventory Adjusts an item variation&#39;s current available inventory.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="variationId">The ID of the variation to adjust inventory information for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1InventoryEntry</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AdjustInventoryAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
            <summary>
            AdjustInventory Adjusts an item variation&#39;s current available inventory.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="variationId">The ID of the variation to adjust inventory information for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1InventoryEntry)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyFee(System.String,System.String,System.String)">
            <summary>
            ApplyFee Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyFeeWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ApplyFee Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyFeeAsync(System.String,System.String,System.String)">
            <summary>
            ApplyFee Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyFeeAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ApplyFee Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyModifierList(System.String,System.String,System.String)">
            <summary>
            ApplyModifierList Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to apply.</param>
            <param name="itemId">The ID of the item to add the modifier list to.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyModifierListWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ApplyModifierList Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to apply.</param>
            <param name="itemId">The ID of the item to add the modifier list to.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyModifierListAsync(System.String,System.String,System.String)">
            <summary>
            ApplyModifierList Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to apply.</param>
            <param name="itemId">The ID of the item to add the modifier list to.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyModifierListAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            ApplyModifierList Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to apply.</param>
            <param name="itemId">The ID of the item to add the modifier list to.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateCategory(System.String,Square.Connect.Model.V1Category)">
            <summary>
            CreateCategory Creates an item category.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateCategoryWithHttpInfo(System.String,Square.Connect.Model.V1Category)">
            <summary>
            CreateCategory Creates an item category.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateCategoryAsync(System.String,Square.Connect.Model.V1Category)">
            <summary>
            CreateCategory Creates an item category.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateCategoryAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Category)">
            <summary>
            CreateCategory Creates an item category.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Category)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateDiscount(System.String,Square.Connect.Model.V1Discount)">
            <summary>
            CreateDiscount Creates a discount.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateDiscountWithHttpInfo(System.String,Square.Connect.Model.V1Discount)">
            <summary>
            CreateDiscount Creates a discount.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateDiscountAsync(System.String,Square.Connect.Model.V1Discount)">
            <summary>
            CreateDiscount Creates a discount.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateDiscountAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Discount)">
            <summary>
            CreateDiscount Creates a discount.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Discount)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateFee(System.String,Square.Connect.Model.V1Fee)">
            <summary>
            CreateFee Creates a fee (tax).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a fee for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateFeeWithHttpInfo(System.String,Square.Connect.Model.V1Fee)">
            <summary>
            CreateFee Creates a fee (tax).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a fee for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateFeeAsync(System.String,Square.Connect.Model.V1Fee)">
            <summary>
            CreateFee Creates a fee (tax).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a fee for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateFeeAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Fee)">
            <summary>
            CreateFee Creates a fee (tax).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a fee for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Fee)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateItem(System.String,Square.Connect.Model.V1Item)">
            <summary>
            CreateItem Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateItemWithHttpInfo(System.String,Square.Connect.Model.V1Item)">
            <summary>
            CreateItem Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateItemAsync(System.String,Square.Connect.Model.V1Item)">
            <summary>
            CreateItem Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateItemAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Item)">
            <summary>
            CreateItem Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierList(System.String,Square.Connect.Model.V1ModifierList)">
            <summary>
            CreateModifierList Creates an item modifier list and at least one modifier option for it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a modifier list for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierListWithHttpInfo(System.String,Square.Connect.Model.V1ModifierList)">
            <summary>
            CreateModifierList Creates an item modifier list and at least one modifier option for it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a modifier list for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierListAsync(System.String,Square.Connect.Model.V1ModifierList)">
            <summary>
            CreateModifierList Creates an item modifier list and at least one modifier option for it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a modifier list for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierListAsyncWithHttpInfo(System.String,Square.Connect.Model.V1ModifierList)">
            <summary>
            CreateModifierList Creates an item modifier list and at least one modifier option for it.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create a modifier list for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1ModifierList)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierOption(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            CreateModifierOption Creates an item modifier option and adds it to a modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierOptionWithHttpInfo(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            CreateModifierOption Creates an item modifier option and adds it to a modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierOptionAsync(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            CreateModifierOption Creates an item modifier option and adds it to a modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierOptionAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            CreateModifierOption Creates an item modifier option and adds it to a modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1ModifierOption)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreatePage(System.String,Square.Connect.Model.V1Page)">
            <summary>
            CreatePage Creates a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreatePageWithHttpInfo(System.String,Square.Connect.Model.V1Page)">
            <summary>
            CreatePage Creates a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreatePageAsync(System.String,Square.Connect.Model.V1Page)">
            <summary>
            CreatePage Creates a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreatePageAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Page)">
            <summary>
            CreatePage Creates a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to create an item for.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateVariation(System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            CreateVariation Creates an item variation for an existing item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateVariationWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            CreateVariation Creates an item variation for an existing item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateVariationAsync(System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            CreateVariation Creates an item variation for an existing item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateVariationAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            CreateVariation Creates an item variation for an existing item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Variation)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteCategory(System.String,System.String)">
            <summary>
            DeleteCategory Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to delete.</param>
            <returns>V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteCategoryWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteCategory Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to delete.</param>
            <returns>ApiResponse of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteCategoryAsync(System.String,System.String)">
            <summary>
            DeleteCategory Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to delete.</param>
            <returns>Task of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteCategoryAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteCategory Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to delete.</param>
            <returns>Task of ApiResponse (V1Category)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteDiscount(System.String,System.String)">
            <summary>
            DeleteDiscount Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to delete.</param>
            <returns>V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteDiscountWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteDiscount Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to delete.</param>
            <returns>ApiResponse of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteDiscountAsync(System.String,System.String)">
            <summary>
            DeleteDiscount Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to delete.</param>
            <returns>Task of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteDiscountAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteDiscount Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to delete.</param>
            <returns>Task of ApiResponse (V1Discount)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteFee(System.String,System.String)">
            <summary>
            DeleteFee Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to delete.</param>
            <returns>V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteFeeWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteFee Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to delete.</param>
            <returns>ApiResponse of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteFeeAsync(System.String,System.String)">
            <summary>
            DeleteFee Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to delete.</param>
            <returns>Task of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteFeeAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteFee Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to delete.</param>
            <returns>Task of ApiResponse (V1Fee)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteItem(System.String,System.String)">
            <summary>
            DeleteItem Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteItemWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteItem Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteItemAsync(System.String,System.String)">
            <summary>
            DeleteItem Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteItemAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteItem Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierList(System.String,System.String)">
            <summary>
            DeleteModifierList Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <returns>V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierListWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteModifierList Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <returns>ApiResponse of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierListAsync(System.String,System.String)">
            <summary>
            DeleteModifierList Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <returns>Task of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierListAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeleteModifierList Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <returns>Task of ApiResponse (V1ModifierList)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierOption(System.String,System.String,System.String)">
            <summary>
            DeleteModifierOption Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <returns>V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierOptionWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            DeleteModifierOption Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <returns>ApiResponse of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierOptionAsync(System.String,System.String,System.String)">
            <summary>
            DeleteModifierOption Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <returns>Task of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierOptionAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            DeleteModifierOption Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to delete.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <returns>Task of ApiResponse (V1ModifierOption)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePage(System.String,System.String)">
            <summary>
            DeletePage Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageWithHttpInfo(System.String,System.String)">
            <summary>
            DeletePage Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageAsync(System.String,System.String)">
            <summary>
            DeletePage Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            DeletePage Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageCell(System.String,System.String,System.String,System.String)">
            <summary>
            DeletePageCell Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
            <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageCellWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            DeletePageCell Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
            <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageCellAsync(System.String,System.String,System.String,System.String)">
            <summary>
            DeletePageCell Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
            <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageCellAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            DeletePageCell Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page to delete.</param>
            <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
            <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteVariation(System.String,System.String,System.String)">
            <summary>
            DeleteVariation Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to delete.</param>
            <param name="variationId">The ID of the variation to delete.</param>
            <returns>V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteVariationWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            DeleteVariation Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to delete.</param>
            <param name="variationId">The ID of the variation to delete.</param>
            <returns>ApiResponse of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteVariationAsync(System.String,System.String,System.String)">
            <summary>
            DeleteVariation Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to delete.</param>
            <param name="variationId">The ID of the variation to delete.</param>
            <returns>Task of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteVariationAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            DeleteVariation Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to delete.</param>
            <param name="variationId">The ID of the variation to delete.</param>
            <returns>Task of ApiResponse (V1Variation)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListCategories(System.String)">
            <summary>
            ListCategories Lists all of a location&#39;s item categories.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>List&lt;V1Category&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListCategoriesWithHttpInfo(System.String)">
            <summary>
            ListCategories Lists all of a location&#39;s item categories.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>ApiResponse of List&lt;V1Category&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListCategoriesAsync(System.String)">
            <summary>
            ListCategories Lists all of a location&#39;s item categories.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>Task of List&lt;V1Category&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListCategoriesAsyncWithHttpInfo(System.String)">
            <summary>
            ListCategories Lists all of a location&#39;s item categories.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>Task of ApiResponse (List&lt;V1Category&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListDiscounts(System.String)">
            <summary>
            ListDiscounts Lists all of a location&#39;s discounts.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>List&lt;V1Discount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListDiscountsWithHttpInfo(System.String)">
            <summary>
            ListDiscounts Lists all of a location&#39;s discounts.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>ApiResponse of List&lt;V1Discount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListDiscountsAsync(System.String)">
            <summary>
            ListDiscounts Lists all of a location&#39;s discounts.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>Task of List&lt;V1Discount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListDiscountsAsyncWithHttpInfo(System.String)">
            <summary>
            ListDiscounts Lists all of a location&#39;s discounts.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list categories for.</param>
            <returns>Task of ApiResponse (List&lt;V1Discount&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListFees(System.String)">
            <summary>
            ListFees Lists all of a location&#39;s fees (taxes).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list fees for.</param>
            <returns>List&lt;V1Fee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListFeesWithHttpInfo(System.String)">
            <summary>
            ListFees Lists all of a location&#39;s fees (taxes).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list fees for.</param>
            <returns>ApiResponse of List&lt;V1Fee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListFeesAsync(System.String)">
            <summary>
            ListFees Lists all of a location&#39;s fees (taxes).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list fees for.</param>
            <returns>Task of List&lt;V1Fee&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListFeesAsyncWithHttpInfo(System.String)">
            <summary>
            ListFees Lists all of a location&#39;s fees (taxes).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list fees for.</param>
            <returns>Task of ApiResponse (List&lt;V1Fee&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListInventory(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListInventory Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1InventoryEntry&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListInventoryWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListInventory Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1InventoryEntry&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListInventoryAsync(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListInventory Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1InventoryEntry&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListInventoryAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListInventory Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1InventoryEntry&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListItems(System.String,System.String)">
            <summary>
            ListItems Provides summary information for all of a location&#39;s items.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list items for.</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Item&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListItemsWithHttpInfo(System.String,System.String)">
            <summary>
            ListItems Provides summary information for all of a location&#39;s items.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list items for.</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Item&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListItemsAsync(System.String,System.String)">
            <summary>
            ListItems Provides summary information for all of a location&#39;s items.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list items for.</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Item&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListItemsAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            ListItems Provides summary information for all of a location&#39;s items.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list items for.</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Item&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListModifierLists(System.String)">
            <summary>
            ListModifierLists Lists all of a location&#39;s modifier lists.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list modifier lists for.</param>
            <returns>List&lt;V1ModifierList&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListModifierListsWithHttpInfo(System.String)">
            <summary>
            ListModifierLists Lists all of a location&#39;s modifier lists.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list modifier lists for.</param>
            <returns>ApiResponse of List&lt;V1ModifierList&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListModifierListsAsync(System.String)">
            <summary>
            ListModifierLists Lists all of a location&#39;s modifier lists.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list modifier lists for.</param>
            <returns>Task of List&lt;V1ModifierList&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListModifierListsAsyncWithHttpInfo(System.String)">
            <summary>
            ListModifierLists Lists all of a location&#39;s modifier lists.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list modifier lists for.</param>
            <returns>Task of ApiResponse (List&lt;V1ModifierList&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListPages(System.String)">
            <summary>
            ListPages Lists all of a location&#39;s Favorites pages in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list Favorites pages for.</param>
            <returns>List&lt;V1Page&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListPagesWithHttpInfo(System.String)">
            <summary>
            ListPages Lists all of a location&#39;s Favorites pages in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list Favorites pages for.</param>
            <returns>ApiResponse of List&lt;V1Page&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListPagesAsync(System.String)">
            <summary>
            ListPages Lists all of a location&#39;s Favorites pages in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list Favorites pages for.</param>
            <returns>Task of List&lt;V1Page&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListPagesAsyncWithHttpInfo(System.String)">
            <summary>
            ListPages Lists all of a location&#39;s Favorites pages in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list Favorites pages for.</param>
            <returns>Task of ApiResponse (List&lt;V1Page&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveFee(System.String,System.String,System.String)">
            <summary>
            RemoveFee Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveFeeWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RemoveFee Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveFeeAsync(System.String,System.String,System.String)">
            <summary>
            RemoveFee Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveFeeAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RemoveFee Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="itemId">The ID of the item to add the fee to.</param>
            <param name="feeId">The ID of the fee to apply.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveModifierList(System.String,System.String,System.String)">
            <summary>
            RemoveModifierList Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to remove.</param>
            <param name="itemId">The ID of the item to remove the modifier list from.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveModifierListWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RemoveModifierList Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to remove.</param>
            <param name="itemId">The ID of the item to remove the modifier list from.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveModifierListAsync(System.String,System.String,System.String)">
            <summary>
            RemoveModifierList Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to remove.</param>
            <param name="itemId">The ID of the item to remove the modifier list from.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveModifierListAsyncWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            RemoveModifierList Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to remove.</param>
            <param name="itemId">The ID of the item to remove the modifier list from.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveItem(System.String,System.String)">
            <summary>
            RetrieveItem Provides the details for a single item, including associated modifier lists and fees.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveItemWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveItem Provides the details for a single item, including associated modifier lists and fees.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveItemAsync(System.String,System.String)">
            <summary>
            RetrieveItem Provides the details for a single item, including associated modifier lists and fees.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveItemAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveItem Provides the details for a single item, including associated modifier lists and fees.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The item&#39;s ID.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveModifierList(System.String,System.String)">
            <summary>
            RetrieveModifierList Provides the details for a single modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The modifier list&#39;s ID.</param>
            <returns>V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveModifierListWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveModifierList Provides the details for a single modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The modifier list&#39;s ID.</param>
            <returns>ApiResponse of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveModifierListAsync(System.String,System.String)">
            <summary>
            RetrieveModifierList Provides the details for a single modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The modifier list&#39;s ID.</param>
            <returns>Task of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveModifierListAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveModifierList Provides the details for a single modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The modifier list&#39;s ID.</param>
            <returns>Task of ApiResponse (V1ModifierList)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateCategory(System.String,System.String,Square.Connect.Model.V1Category)">
            <summary>
            UpdateCategory Modifies the details of an existing item category.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateCategoryWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Category)">
            <summary>
            UpdateCategory Modifies the details of an existing item category.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateCategoryAsync(System.String,System.String,Square.Connect.Model.V1Category)">
            <summary>
            UpdateCategory Modifies the details of an existing item category.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Category</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateCategoryAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Category)">
            <summary>
            UpdateCategory Modifies the details of an existing item category.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="categoryId">The ID of the category to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Category)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateDiscount(System.String,System.String,Square.Connect.Model.V1Discount)">
            <summary>
            UpdateDiscount Modifies the details of an existing discount.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateDiscountWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Discount)">
            <summary>
            UpdateDiscount Modifies the details of an existing discount.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateDiscountAsync(System.String,System.String,Square.Connect.Model.V1Discount)">
            <summary>
            UpdateDiscount Modifies the details of an existing discount.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Discount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateDiscountAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Discount)">
            <summary>
            UpdateDiscount Modifies the details of an existing discount.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the category&#39;s associated location.</param>
            <param name="discountId">The ID of the discount to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Discount)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateFee(System.String,System.String,Square.Connect.Model.V1Fee)">
            <summary>
            UpdateFee Modifies the details of an existing fee (tax).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateFeeWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Fee)">
            <summary>
            UpdateFee Modifies the details of an existing fee (tax).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateFeeAsync(System.String,System.String,Square.Connect.Model.V1Fee)">
            <summary>
            UpdateFee Modifies the details of an existing fee (tax).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Fee</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateFeeAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Fee)">
            <summary>
            UpdateFee Modifies the details of an existing fee (tax).
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the fee&#39;s associated location.</param>
            <param name="feeId">The ID of the fee to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Fee)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateItem(System.String,System.String,Square.Connect.Model.V1Item)">
            <summary>
            UpdateItem Modifies the core details of an existing item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateItemWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Item)">
            <summary>
            UpdateItem Modifies the core details of an existing item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateItemAsync(System.String,System.String,Square.Connect.Model.V1Item)">
            <summary>
            UpdateItem Modifies the core details of an existing item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Item</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateItemAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Item)">
            <summary>
            UpdateItem Modifies the core details of an existing item.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Item)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierList(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
            <summary>
            UpdateModifierList Modifies the details of an existing item modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierListWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
            <summary>
            UpdateModifierList Modifies the details of an existing item modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierListAsync(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
            <summary>
            UpdateModifierList Modifies the details of an existing item modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1ModifierList</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierListAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
            <summary>
            UpdateModifierList Modifies the details of an existing item modifier list.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1ModifierList)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierOption(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            UpdateModifierOption Modifies the details of an existing item modifier option.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierOptionWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            UpdateModifierOption Modifies the details of an existing item modifier option.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierOptionAsync(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            UpdateModifierOption Modifies the details of an existing item modifier option.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1ModifierOption</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierOptionAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
            <summary>
            UpdateModifierOption Modifies the details of an existing item modifier option.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="modifierListId">The ID of the modifier list to edit.</param>
            <param name="modifierOptionId">The ID of the modifier list to edit.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1ModifierOption)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePage(System.String,System.String,Square.Connect.Model.V1Page)">
            <summary>
            UpdatePage Modifies the details of a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
            <param name="pageId">The ID of the page to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Page)">
            <summary>
            UpdatePage Modifies the details of a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
            <param name="pageId">The ID of the page to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageAsync(System.String,System.String,Square.Connect.Model.V1Page)">
            <summary>
            UpdatePage Modifies the details of a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
            <param name="pageId">The ID of the page to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Page)">
            <summary>
            UpdatePage Modifies the details of a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
            <param name="pageId">The ID of the page to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageCell(System.String,System.String,Square.Connect.Model.V1PageCell)">
            <summary>
            UpdatePageCell Modifies a cell of a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page the cell belongs to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageCellWithHttpInfo(System.String,System.String,Square.Connect.Model.V1PageCell)">
            <summary>
            UpdatePageCell Modifies a cell of a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page the cell belongs to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageCellAsync(System.String,System.String,Square.Connect.Model.V1PageCell)">
            <summary>
            UpdatePageCell Modifies a cell of a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page the cell belongs to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Page</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageCellAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1PageCell)">
            <summary>
            UpdatePageCell Modifies a cell of a Favorites page in Square Register.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
            <param name="pageId">The ID of the page the cell belongs to.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Page)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateVariation(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            UpdateVariation Modifies the details of an existing item variation.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="variationId">The ID of the variation to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateVariationWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            UpdateVariation Modifies the details of an existing item variation.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="variationId">The ID of the variation to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateVariationAsync(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            UpdateVariation Modifies the details of an existing item variation.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="variationId">The ID of the variation to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Variation</returns>
        </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateVariationAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
            <summary>
            UpdateVariation Modifies the details of an existing item variation.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the item&#39;s associated location.</param>
            <param name="itemId">The ID of the item to modify.</param>
            <param name="variationId">The ID of the variation to modify.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Variation)</returns>
        </member>
        <member name="T:Square.Connect.Api.IV1LocationsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.ListLocations">
            <summary>
            ListLocations
            </summary>
            <remarks>
            Provides details for a business&#39;s locations, including their IDs.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;V1Merchant&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.ListLocationsWithHttpInfo">
            <summary>
            ListLocations
            </summary>
            <remarks>
            Provides details for a business&#39;s locations, including their IDs.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;V1Merchant&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.RetrieveBusiness">
            <summary>
            RetrieveBusiness
            </summary>
            <remarks>
            Get a business&#39;s information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>V1Merchant</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.RetrieveBusinessWithHttpInfo">
            <summary>
            RetrieveBusiness
            </summary>
            <remarks>
            Get a business&#39;s information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of V1Merchant</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.ListLocationsAsync">
            <summary>
            ListLocations
            </summary>
            <remarks>
            Provides details for a business&#39;s locations, including their IDs.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;V1Merchant&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.ListLocationsAsyncWithHttpInfo">
            <summary>
            ListLocations
            </summary>
            <remarks>
            Provides details for a business&#39;s locations, including their IDs.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;V1Merchant&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.RetrieveBusinessAsync">
            <summary>
            RetrieveBusiness
            </summary>
            <remarks>
            Get a business&#39;s information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of V1Merchant</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.RetrieveBusinessAsyncWithHttpInfo">
            <summary>
            RetrieveBusiness
            </summary>
            <remarks>
            Get a business&#39;s information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (V1Merchant)</returns>
        </member>
        <member name="T:Square.Connect.Api.V1LocationsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.V1LocationsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.V1LocationsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.V1LocationsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.V1LocationsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.ListLocations">
            <summary>
            ListLocations Provides details for a business&#39;s locations, including their IDs.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;V1Merchant&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.ListLocationsWithHttpInfo">
            <summary>
            ListLocations Provides details for a business&#39;s locations, including their IDs.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;V1Merchant&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.ListLocationsAsync">
            <summary>
            ListLocations Provides details for a business&#39;s locations, including their IDs.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;V1Merchant&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.ListLocationsAsyncWithHttpInfo">
            <summary>
            ListLocations Provides details for a business&#39;s locations, including their IDs.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;V1Merchant&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.RetrieveBusiness">
            <summary>
            RetrieveBusiness Get a business&#39;s information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>V1Merchant</returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.RetrieveBusinessWithHttpInfo">
            <summary>
            RetrieveBusiness Get a business&#39;s information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of V1Merchant</returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.RetrieveBusinessAsync">
            <summary>
            RetrieveBusiness Get a business&#39;s information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of V1Merchant</returns>
        </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.RetrieveBusinessAsyncWithHttpInfo">
            <summary>
            RetrieveBusiness Get a business&#39;s information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (V1Merchant)</returns>
        </member>
        <member name="T:Square.Connect.Api.IV1TransactionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.CreateRefund(System.String,Square.Connect.Model.V1CreateRefundRequest)">
            <summary>
            CreateRefund
            </summary>
            <remarks>
            Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original payment&#39;s associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Refund</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.CreateRefundWithHttpInfo(System.String,Square.Connect.Model.V1CreateRefundRequest)">
            <summary>
            CreateRefund
            </summary>
            <remarks>
            Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original payment&#39;s associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Refund</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListBankAccounts(System.String)">
            <summary>
            ListBankAccounts
            </summary>
            <remarks>
            Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list bank accounts for.</param>
            <returns>List&lt;V1BankAccount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListBankAccountsWithHttpInfo(System.String)">
            <summary>
            ListBankAccounts
            </summary>
            <remarks>
            Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list bank accounts for.</param>
            <returns>ApiResponse of List&lt;V1BankAccount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListOrders(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListOrders
            </summary>
            <remarks>
            Provides summary information for a merchant&#39;s online store orders.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list online store orders for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Order&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListOrdersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListOrders
            </summary>
            <remarks>
            Provides summary information for a merchant&#39;s online store orders.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list online store orders for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Order&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListPayments(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            ListPayments
            </summary>
            <remarks>
            Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">The order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
            <returns>List&lt;V1Payment&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListPaymentsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            ListPayments
            </summary>
            <remarks>
            Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">The order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
            <returns>ApiResponse of List&lt;V1Payment&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListRefunds(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListRefunds
            </summary>
            <remarks>
            Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Refund&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListRefunds
            </summary>
            <remarks>
            Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Refund&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListSettlements(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            ListSettlements
            </summary>
            <remarks>
            Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Settlement&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListSettlementsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            ListSettlements
            </summary>
            <remarks>
            Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Settlement&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveBankAccount(System.String,System.String)">
            <summary>
            RetrieveBankAccount
            </summary>
            <remarks>
            Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the bank account&#39;s associated location.</param>
            <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
            <returns>V1BankAccount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveBankAccountWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveBankAccount
            </summary>
            <remarks>
            Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the bank account&#39;s associated location.</param>
            <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
            <returns>ApiResponse of V1BankAccount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveOrder(System.String,System.String)">
            <summary>
            RetrieveOrder
            </summary>
            <remarks>
            Provides comprehensive information for a single online store order, including the order&#39;s history.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <returns>V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveOrderWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveOrder
            </summary>
            <remarks>
            Provides comprehensive information for a single online store order, including the order&#39;s history.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <returns>ApiResponse of V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrievePayment(System.String,System.String)">
            <summary>
            RetrievePayment
            </summary>
            <remarks>
            Provides comprehensive information for a single payment.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the payment&#39;s associated location.</param>
            <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
            <returns>V1Payment</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrievePaymentWithHttpInfo(System.String,System.String)">
            <summary>
            RetrievePayment
            </summary>
            <remarks>
            Provides comprehensive information for a single payment.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the payment&#39;s associated location.</param>
            <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
            <returns>ApiResponse of V1Payment</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveSettlement(System.String,System.String)">
            <summary>
            RetrieveSettlement
            </summary>
            <remarks>
            Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the settlements&#39;s associated location.</param>
            <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
            <returns>V1Settlement</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveSettlementWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveSettlement
            </summary>
            <remarks>
            Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the settlements&#39;s associated location.</param>
            <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
            <returns>ApiResponse of V1Settlement</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.UpdateOrder(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
            <summary>
            UpdateOrder
            </summary>
            <remarks>
            Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.UpdateOrderWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
            <summary>
            UpdateOrder
            </summary>
            <remarks>
            Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.CreateRefundAsync(System.String,Square.Connect.Model.V1CreateRefundRequest)">
            <summary>
            CreateRefund
            </summary>
            <remarks>
            Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original payment&#39;s associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Refund</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.CreateRefundAsyncWithHttpInfo(System.String,Square.Connect.Model.V1CreateRefundRequest)">
            <summary>
            CreateRefund
            </summary>
            <remarks>
            Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original payment&#39;s associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Refund)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListBankAccountsAsync(System.String)">
            <summary>
            ListBankAccounts
            </summary>
            <remarks>
            Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list bank accounts for.</param>
            <returns>Task of List&lt;V1BankAccount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListBankAccountsAsyncWithHttpInfo(System.String)">
            <summary>
            ListBankAccounts
            </summary>
            <remarks>
            Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list bank accounts for.</param>
            <returns>Task of ApiResponse (List&lt;V1BankAccount&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListOrdersAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListOrders
            </summary>
            <remarks>
            Provides summary information for a merchant&#39;s online store orders.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list online store orders for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Order&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListOrdersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListOrders
            </summary>
            <remarks>
            Provides summary information for a merchant&#39;s online store orders.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list online store orders for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Order&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListPaymentsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            ListPayments
            </summary>
            <remarks>
            Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">The order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
            <returns>Task of List&lt;V1Payment&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListPaymentsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            ListPayments
            </summary>
            <remarks>
            Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">The order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Payment&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListRefunds
            </summary>
            <remarks>
            Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Refund&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListRefunds
            </summary>
            <remarks>
            Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Refund&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListSettlementsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            ListSettlements
            </summary>
            <remarks>
            Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Settlement&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListSettlementsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            ListSettlements
            </summary>
            <remarks>
            Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Settlement&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveBankAccountAsync(System.String,System.String)">
            <summary>
            RetrieveBankAccount
            </summary>
            <remarks>
            Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the bank account&#39;s associated location.</param>
            <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
            <returns>Task of V1BankAccount</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveBankAccountAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveBankAccount
            </summary>
            <remarks>
            Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the bank account&#39;s associated location.</param>
            <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
            <returns>Task of ApiResponse (V1BankAccount)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveOrderAsync(System.String,System.String)">
            <summary>
            RetrieveOrder
            </summary>
            <remarks>
            Provides comprehensive information for a single online store order, including the order&#39;s history.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <returns>Task of V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveOrderAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveOrder
            </summary>
            <remarks>
            Provides comprehensive information for a single online store order, including the order&#39;s history.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <returns>Task of ApiResponse (V1Order)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrievePaymentAsync(System.String,System.String)">
            <summary>
            RetrievePayment
            </summary>
            <remarks>
            Provides comprehensive information for a single payment.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the payment&#39;s associated location.</param>
            <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
            <returns>Task of V1Payment</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrievePaymentAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrievePayment
            </summary>
            <remarks>
            Provides comprehensive information for a single payment.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the payment&#39;s associated location.</param>
            <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
            <returns>Task of ApiResponse (V1Payment)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveSettlementAsync(System.String,System.String)">
            <summary>
            RetrieveSettlement
            </summary>
            <remarks>
            Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the settlements&#39;s associated location.</param>
            <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
            <returns>Task of V1Settlement</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveSettlementAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveSettlement
            </summary>
            <remarks>
            Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the settlements&#39;s associated location.</param>
            <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
            <returns>Task of ApiResponse (V1Settlement)</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.UpdateOrderAsync(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
            <summary>
            UpdateOrder
            </summary>
            <remarks>
            Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.UpdateOrderAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
            <summary>
            UpdateOrder
            </summary>
            <remarks>
            Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
            </remarks>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Order)</returns>
        </member>
        <member name="T:Square.Connect.Api.V1TransactionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.V1TransactionsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Api.V1TransactionsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Api.V1TransactionsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Square.Connect.Api.V1TransactionsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.CreateRefund(System.String,Square.Connect.Model.V1CreateRefundRequest)">
            <summary>
            CreateRefund Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original payment&#39;s associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Refund</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.CreateRefundWithHttpInfo(System.String,Square.Connect.Model.V1CreateRefundRequest)">
            <summary>
            CreateRefund Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original payment&#39;s associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Refund</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.CreateRefundAsync(System.String,Square.Connect.Model.V1CreateRefundRequest)">
            <summary>
            CreateRefund Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original payment&#39;s associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Refund</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.CreateRefundAsyncWithHttpInfo(System.String,Square.Connect.Model.V1CreateRefundRequest)">
            <summary>
            CreateRefund Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the original payment&#39;s associated location.</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Refund)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListBankAccounts(System.String)">
            <summary>
            ListBankAccounts Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list bank accounts for.</param>
            <returns>List&lt;V1BankAccount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListBankAccountsWithHttpInfo(System.String)">
            <summary>
            ListBankAccounts Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list bank accounts for.</param>
            <returns>ApiResponse of List&lt;V1BankAccount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListBankAccountsAsync(System.String)">
            <summary>
            ListBankAccounts Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list bank accounts for.</param>
            <returns>Task of List&lt;V1BankAccount&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListBankAccountsAsyncWithHttpInfo(System.String)">
            <summary>
            ListBankAccounts Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list bank accounts for.</param>
            <returns>Task of ApiResponse (List&lt;V1BankAccount&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListOrders(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListOrders Provides summary information for a merchant&#39;s online store orders.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list online store orders for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Order&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListOrdersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListOrders Provides summary information for a merchant&#39;s online store orders.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list online store orders for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Order&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListOrdersAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListOrders Provides summary information for a merchant&#39;s online store orders.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list online store orders for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Order&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListOrdersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListOrders Provides summary information for a merchant&#39;s online store orders.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list online store orders for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Order&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListPayments(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            ListPayments Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">The order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
            <returns>List&lt;V1Payment&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListPaymentsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            ListPayments Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">The order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
            <returns>ApiResponse of List&lt;V1Payment&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListPaymentsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            ListPayments Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">The order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
            <returns>Task of List&lt;V1Payment&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListPaymentsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            ListPayments Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">The order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Payment&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListRefunds(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListRefunds Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Refund&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListRefunds Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Refund&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListRefunds Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Refund&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            ListRefunds Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list refunds for.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Refund&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListSettlements(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            ListSettlements Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>List&lt;V1Settlement&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListSettlementsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            ListSettlements Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>ApiResponse of List&lt;V1Settlement&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListSettlementsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            ListSettlements Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of List&lt;V1Settlement&gt;</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListSettlementsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            ListSettlements Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
            <param name="order">TThe order in which payments are listed in the response. (optional)</param>
            <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
            <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
            <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
            <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
            <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
            <returns>Task of ApiResponse (List&lt;V1Settlement&gt;)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveBankAccount(System.String,System.String)">
            <summary>
            RetrieveBankAccount Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the bank account&#39;s associated location.</param>
            <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
            <returns>V1BankAccount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveBankAccountWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveBankAccount Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the bank account&#39;s associated location.</param>
            <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
            <returns>ApiResponse of V1BankAccount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveBankAccountAsync(System.String,System.String)">
            <summary>
            RetrieveBankAccount Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the bank account&#39;s associated location.</param>
            <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
            <returns>Task of V1BankAccount</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveBankAccountAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveBankAccount Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the bank account&#39;s associated location.</param>
            <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
            <returns>Task of ApiResponse (V1BankAccount)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveOrder(System.String,System.String)">
            <summary>
            RetrieveOrder Provides comprehensive information for a single online store order, including the order&#39;s history.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <returns>V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveOrderWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveOrder Provides comprehensive information for a single online store order, including the order&#39;s history.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <returns>ApiResponse of V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveOrderAsync(System.String,System.String)">
            <summary>
            RetrieveOrder Provides comprehensive information for a single online store order, including the order&#39;s history.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <returns>Task of V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveOrderAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveOrder Provides comprehensive information for a single online store order, including the order&#39;s history.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <returns>Task of ApiResponse (V1Order)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrievePayment(System.String,System.String)">
            <summary>
            RetrievePayment Provides comprehensive information for a single payment.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the payment&#39;s associated location.</param>
            <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
            <returns>V1Payment</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrievePaymentWithHttpInfo(System.String,System.String)">
            <summary>
            RetrievePayment Provides comprehensive information for a single payment.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the payment&#39;s associated location.</param>
            <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
            <returns>ApiResponse of V1Payment</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrievePaymentAsync(System.String,System.String)">
            <summary>
            RetrievePayment Provides comprehensive information for a single payment.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the payment&#39;s associated location.</param>
            <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
            <returns>Task of V1Payment</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrievePaymentAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrievePayment Provides comprehensive information for a single payment.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the payment&#39;s associated location.</param>
            <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
            <returns>Task of ApiResponse (V1Payment)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveSettlement(System.String,System.String)">
            <summary>
            RetrieveSettlement Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the settlements&#39;s associated location.</param>
            <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
            <returns>V1Settlement</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveSettlementWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveSettlement Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the settlements&#39;s associated location.</param>
            <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
            <returns>ApiResponse of V1Settlement</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveSettlementAsync(System.String,System.String)">
            <summary>
            RetrieveSettlement Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the settlements&#39;s associated location.</param>
            <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
            <returns>Task of V1Settlement</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveSettlementAsyncWithHttpInfo(System.String,System.String)">
            <summary>
            RetrieveSettlement Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the settlements&#39;s associated location.</param>
            <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
            <returns>Task of ApiResponse (V1Settlement)</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.UpdateOrder(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
            <summary>
            UpdateOrder Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.UpdateOrderWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
            <summary>
            UpdateOrder Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>ApiResponse of V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.UpdateOrderAsync(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
            <summary>
            UpdateOrder Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of V1Order</returns>
        </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.UpdateOrderAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
            <summary>
            UpdateOrder Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
            </summary>
            <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="locationId">The ID of the order&#39;s associated location.</param>
            <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
            <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
            <returns>Task of ApiResponse (V1Order)</returns>
        </member>
        <member name="T:Square.Connect.Client.ApiClient">
            <summary>
            API client is mainly responsible for making the HTTP call to the API backend.
            </summary>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
            with default configuration and base path (https://connect.squareup.com).
            </summary>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor(Square.Connect.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
            with default base path (https://connect.squareup.com).
            </summary>
            <param name="config">An instance of Configuration.</param>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
            with default configuration.
            </summary>
            <param name="basePath">The base path.</param>
        </member>
        <member name="F:Square.Connect.Client.ApiClient.Default">
            <summary>
            Gets or sets the default API client for making HTTP calls.
            </summary>
            <value>The default API client.</value>
        </member>
        <member name="P:Square.Connect.Client.ApiClient.Configuration">
            <summary>
            Gets or sets the Configuration.
            </summary>
            <value>An instance of the Configuration.</value>
        </member>
        <member name="P:Square.Connect.Client.ApiClient.RestClient">
            <summary>
            Gets or sets the RestClient.
            </summary>
            <value>An instance of the RestClient</value>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.CallApi(System.String,RestSharp.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Makes the HTTP request (Sync).
            </summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content Type of the request</param>
            <returns>Object</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.CallApiAsync(System.String,RestSharp.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Makes the asynchronous HTTP request.
            </summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content type.</param>
            <returns>The Task instance.</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.EscapeString(System.String)">
            <summary>
            Escape string (url-encoded).
            </summary>
            <param name="str">String to be escaped.</param>
            <returns>Escaped string.</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.ParameterToFile(System.String,System.IO.Stream)">
            <summary>
            Create FileParameter based on Stream.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="stream">Input stream.</param>
            <returns>FileParameter.</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.ParameterToString(System.Object)">
            <summary>
            If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
            If parameter is a list, join the list with ",".
            Otherwise just return the string.
            </summary>
            <param name="obj">The parameter (header, path, query, form).</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.Deserialize(RestSharp.IRestResponse,System.Type)">
            <summary>
            Deserialize the JSON string into a proper object.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="type">Object type.</param>
            <returns>Object representation of the JSON string.</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.Serialize(System.Object)">
            <summary>
            Serialize an input (model) into JSON string
            </summary>
            <param name="obj">Object.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.SelectHeaderContentType(System.String[])">
            <summary>
            Select the Content-Type header's value from the given content-type array:
            if JSON exists in the given array, use it;
            otherwise use the first one defined in 'consumes'
            </summary>
            <param name="contentTypes">The Content-Type array to select from.</param>
            <returns>The Content-Type header to use.</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.SelectHeaderAccept(System.String[])">
            <summary>
            Select the Accept header's value from the given accepts array:
            if JSON exists in the given array, use it;
            otherwise use all of them (joining into a string)
            </summary>
            <param name="accepts">The accepts array to select from.</param>
            <returns>The Accept header to use.</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.Base64Encode(System.String)">
            <summary>
            Encode string in base64 format.
            </summary>
            <param name="text">String to be encoded.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.ConvertType(System.Object,System.Type)">
            <summary>
            Dynamically cast the object into target type.
            Ref: http://stackoverflow.com/questions/4925718/c-dynamic-runtime-cast
            </summary>
            <param name="source">Object to be casted</param>
            <param name="dest">Target type</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.ReadAsBytes(System.IO.Stream)">
            <summary>
            Convert stream to byte array
            Credit/Ref: http://stackoverflow.com/a/221941/677735
            </summary>
            <param name="input">Input stream to be converted</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.UrlEncode(System.String)">
            <summary>
            URL encode a string
            Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
            </summary>
            <param name="input">String to be URL encoded</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Square.Connect.Client.ApiClient.SanitizeFilename(System.String)">
            <summary>
            Sanitize filename by removing the path
            </summary>
            <param name="filename">Filename</param>
            <returns>Filename</returns>
        </member>
        <member name="T:Square.Connect.Client.ApiException">
            <summary>
            API Exception
            </summary>
        </member>
        <member name="P:Square.Connect.Client.ApiException.ErrorCode">
            <summary>
            Gets or sets the error code (HTTP status code)
            </summary>
            <value>The error code (HTTP status code).</value>
        </member>
        <member name="P:Square.Connect.Client.ApiException.ErrorContent">
            <summary>
            Gets or sets the error content (body json object)
            </summary>
            <value>The error content (Http response body).</value>
        </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException"/> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
        </member>
        <member name="T:Square.Connect.Client.ApiResponse`1">
            <summary>
            API Response
            </summary>
        </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.Data">
            <summary>
            Gets or sets the data (parsed HTTP body)
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Square.Connect.Client.ApiResponse`1.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.BatchToken">
            <summary>
            Returns the value of BatchToken to be used on the next page call if present.
            </summary>
            <value>Batch Token when present</value>
        </member>
        <member name="T:Square.Connect.Client.Configuration">
            <summary>
            Represents a set of configuration settings
            </summary>
        </member>
        <member name="M:Square.Connect.Client.Configuration.#ctor(Square.Connect.Client.ApiClient,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the Configuration class with different settings
            </summary>
            <param name="apiClient">Api client</param>
            <param name="defaultHeader">Dictionary of default HTTP header</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="accessToken">accessToken</param>
            <param name="apiKey">Dictionary of API key</param>
            <param name="apiKeyPrefix">Dictionary of API key prefix</param>
            <param name="tempFolderPath">Temp folder path</param>
            <param name="dateTimeFormat">DateTime format string</param>
            <param name="timeout">HTTP connection timeout (in milliseconds)</param>
            <param name="userAgent">HTTP user agent</param>
        </member>
        <member name="M:Square.Connect.Client.Configuration.#ctor(Square.Connect.Client.ApiClient)">
            <summary>
            Initializes a new instance of the Configuration class.
            </summary>
            <param name="apiClient">Api client.</param>
        </member>
        <member name="F:Square.Connect.Client.Configuration.Version">
            <summary>
            Version of the package.
            </summary>
            <value>Version of the package.</value>
        </member>
        <member name="F:Square.Connect.Client.Configuration.Default">
            <summary>
            Gets or sets the default Configuration.
            </summary>
            <value>Configuration.</value>
        </member>
        <member name="F:Square.Connect.Client.Configuration.DefaultExceptionFactory">
            <summary>
            Default creation of exceptions for a given method name and response object
            </summary>
        </member>
        <member name="P:Square.Connect.Client.Configuration.Timeout">
            <summary>
            Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
            </summary>
            <value>Timeout.</value>
        </member>
        <member name="F:Square.Connect.Client.Configuration.ApiClient">
            <summary>
            Gets or sets the default API client for making HTTP calls.
            </summary>
            <value>The API client.</value>
        </member>
        <member name="M:Square.Connect.Client.Configuration.setApiClientUsingDefault(Square.Connect.Client.ApiClient)">
            <summary>
            Set the ApiClient using Default or ApiClient instance.
            </summary>
            <param name="apiClient">An instance of ApiClient.</param>
            <returns></returns>
        </member>
        <member name="P:Square.Connect.Client.Configuration.DefaultHeader">
            <summary>
            Gets or sets the default header.
            </summary>
        </member>
        <member name="M:Square.Connect.Client.Configuration.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Client.Configuration.AddApiKey(System.String,System.String)">
            <summary>
            Add Api Key Header.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
            <returns></returns>
        </member>
        <member name="M:Square.Connect.Client.Configuration.AddApiKeyPrefix(System.String,System.String)">
            <summary>
            Sets the API key prefix.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
        </member>
        <member name="P:Square.Connect.Client.Configuration.UserAgent">
            <summary>
            Gets or sets the HTTP user agent.
            </summary>
            <value>Http user agent.</value>
        </member>
        <member name="P:Square.Connect.Client.Configuration.Username">
            <summary>
            Gets or sets the username (HTTP basic authentication).
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Square.Connect.Client.Configuration.Password">
            <summary>
            Gets or sets the password (HTTP basic authentication).
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Square.Connect.Client.Configuration.AccessToken">
            <summary>
            Gets or sets the access token for OAuth2 authentication.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="F:Square.Connect.Client.Configuration.ApiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="F:Square.Connect.Client.Configuration.ApiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="M:Square.Connect.Client.Configuration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Get the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:Square.Connect.Client.Configuration.TempFolderPath">
            <summary>
            Gets or sets the temporary folder path to store the files downloaded from the server.
            </summary>
            <value>Folder path.</value>
        </member>
        <member name="P:Square.Connect.Client.Configuration.DateTimeFormat">
            <summary>
            Gets or sets the the date time format used when serializing in the ApiClient
            By default, it's set to ISO 8601 - "o", for others see:
            https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
            and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
            No validation is done to ensure that the string you're providing is valid
            </summary>
            <value>The DateTimeFormat string</value>
        </member>
        <member name="M:Square.Connect.Client.Configuration.ToDebugReport">
            <summary>
            Returns a string with essential information for debugging.
            </summary>
        </member>
        <member name="T:Square.Connect.Client.ExceptionFactory">
            <summary>
            A delegate to ExceptionFactory method
            </summary>
            <param name="methodName">Method name</param>
            <param name="response">Response</param>
            <returns>Exceptions</returns>
        </member>
        <member name="T:Square.Connect.Client.IApiAccessor">
            <summary>
            Represents configuration aspects required to interact with the API endpoints.
            </summary>
        </member>
        <member name="P:Square.Connect.Client.IApiAccessor.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="M:Square.Connect.Client.IApiAccessor.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Square.Connect.Client.IApiAccessor.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Square.Connect.Client.SwaggerDateConverter">
            <summary>
            Formatter for 'date' swagger formats ss defined by full-date - RFC3339
            see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
            </summary>
        </member>
        <member name="M:Square.Connect.Client.SwaggerDateConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Client.SwaggerDateConverter" /> class.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.AdditionalRecipient">
            <summary>
            Represents an additional recipient (other than the merchant) receiving a portion of this tender.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipient" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.#ctor(System.String,System.String,Square.Connect.Model.Money,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipient" /> class.
            </summary>
            <param name="LocationId">The location ID for a recipient (other than the merchant) receiving a portion of this tender. (required).</param>
            <param name="Description">The description of the additional recipient. (required).</param>
            <param name="AmountMoney">The amount of money distributed to the recipient. (required).</param>
            <param name="ReceivableId">The unique ID for this [AdditionalRecipientReceivable](#type-additionalrecipientreceivable), assigned by the server..</param>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipient.LocationId">
            <summary>
            The location ID for a recipient (other than the merchant) receiving a portion of this tender.
            </summary>
            <value>The location ID for a recipient (other than the merchant) receiving a portion of this tender.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipient.Description">
            <summary>
            The description of the additional recipient.
            </summary>
            <value>The description of the additional recipient.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipient.AmountMoney">
            <summary>
            The amount of money distributed to the recipient.
            </summary>
            <value>The amount of money distributed to the recipient.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipient.ReceivableId">
            <summary>
            The unique ID for this [AdditionalRecipientReceivable](#type-additionalrecipientreceivable), assigned by the server.
            </summary>
            <value>The unique ID for this [AdditionalRecipientReceivable](#type-additionalrecipientreceivable), assigned by the server.</value>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.Equals(Square.Connect.Model.AdditionalRecipient)">
            <summary>
            Returns true if AdditionalRecipient instances are equal
            </summary>
            <param name="other">Instance of AdditionalRecipient to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.AdditionalRecipientReceivable">
            <summary>
            Represents a monetary distribution of part of a [Transaction](#type-transaction)&#39;s amount for Transactions which included additional recipients. The location of this receivable is that same as the one specified in the [AdditionalRecipient](#type-additionalrecipient).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipientReceivable" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money,System.String,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipientReceivableRefund})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipientReceivable" /> class.
            </summary>
            <param name="Id">The additional recipient receivable&#39;s unique ID, issued by Square payments servers. (required).</param>
            <param name="TransactionId">The ID of the transaction that the additional recipient receivable was applied to. (required).</param>
            <param name="TransactionLocationId">The ID of the location that created the receivable. This is the location ID on the associated transaction. (required).</param>
            <param name="AmountMoney">The amount of the receivable. This will always be non-negative. (required).</param>
            <param name="CreatedAt">The time when the additional recipient receivable was created, in RFC 3339 format..</param>
            <param name="Refunds">Any refunds of the receivable that have been applied..</param>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.Id">
            <summary>
            The additional recipient receivable&#39;s unique ID, issued by Square payments servers.
            </summary>
            <value>The additional recipient receivable&#39;s unique ID, issued by Square payments servers.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.TransactionId">
            <summary>
            The ID of the transaction that the additional recipient receivable was applied to.
            </summary>
            <value>The ID of the transaction that the additional recipient receivable was applied to.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.TransactionLocationId">
            <summary>
            The ID of the location that created the receivable. This is the location ID on the associated transaction.
            </summary>
            <value>The ID of the location that created the receivable. This is the location ID on the associated transaction.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.AmountMoney">
            <summary>
            The amount of the receivable. This will always be non-negative.
            </summary>
            <value>The amount of the receivable. This will always be non-negative.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.CreatedAt">
            <summary>
            The time when the additional recipient receivable was created, in RFC 3339 format.
            </summary>
            <value>The time when the additional recipient receivable was created, in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.Refunds">
            <summary>
            Any refunds of the receivable that have been applied.
            </summary>
            <value>Any refunds of the receivable that have been applied.</value>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.Equals(Square.Connect.Model.AdditionalRecipientReceivable)">
            <summary>
            Returns true if AdditionalRecipientReceivable instances are equal
            </summary>
            <param name="other">Instance of AdditionalRecipientReceivable to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.AdditionalRecipientReceivableRefund">
            <summary>
            A refund of an [AdditionalRecipientReceivable](#type-additionalrecipientreceivable). This includes the ID of the additional recipient receivable associated to this object, as well as a reference to the [Refund](#type-refund) that created this receivable refund.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipientReceivableRefund" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.#ctor(System.String,System.String,System.String,System.String,Square.Connect.Model.Money,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipientReceivableRefund" /> class.
            </summary>
            <param name="Id">The receivable refund&#39;s unique ID, issued by Square payments servers. (required).</param>
            <param name="ReceivableId">The ID of the receivable that the refund was applied to. (required).</param>
            <param name="RefundId">The ID of the refund that is associated to this receivable refund. (required).</param>
            <param name="TransactionLocationId">The ID of the location that created the receivable. This is the location ID on the associated transaction. (required).</param>
            <param name="AmountMoney">The amount of the refund. This will always be non-negative. (required).</param>
            <param name="CreatedAt">The time when the refund was created, in RFC 3339 format..</param>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.Id">
            <summary>
            The receivable refund&#39;s unique ID, issued by Square payments servers.
            </summary>
            <value>The receivable refund&#39;s unique ID, issued by Square payments servers.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.ReceivableId">
            <summary>
            The ID of the receivable that the refund was applied to.
            </summary>
            <value>The ID of the receivable that the refund was applied to.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.RefundId">
            <summary>
            The ID of the refund that is associated to this receivable refund.
            </summary>
            <value>The ID of the refund that is associated to this receivable refund.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.TransactionLocationId">
            <summary>
            The ID of the location that created the receivable. This is the location ID on the associated transaction.
            </summary>
            <value>The ID of the location that created the receivable. This is the location ID on the associated transaction.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.AmountMoney">
            <summary>
            The amount of the refund. This will always be non-negative.
            </summary>
            <value>The amount of the refund. This will always be non-negative.</value>
        </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.CreatedAt">
            <summary>
            The time when the refund was created, in RFC 3339 format.
            </summary>
            <value>The time when the refund was created, in RFC 3339 format.</value>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.Equals(Square.Connect.Model.AdditionalRecipientReceivableRefund)">
            <summary>
            Returns true if AdditionalRecipientReceivableRefund instances are equal
            </summary>
            <param name="other">Instance of AdditionalRecipientReceivableRefund to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Address">
            <summary>
            Represents a physical address.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Address.CountryEnum">
            <summary>
            The address's country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values
            </summary>
            <value>The address's country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZZ">
            <summary>
            Enum ZZ for "ZZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AD">
            <summary>
            Enum AD for "AD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AE">
            <summary>
            Enum AE for "AE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AF">
            <summary>
            Enum AF for "AF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AG">
            <summary>
            Enum AG for "AG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AI">
            <summary>
            Enum AI for "AI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AL">
            <summary>
            Enum AL for "AL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AM">
            <summary>
            Enum AM for "AM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AO">
            <summary>
            Enum AO for "AO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AQ">
            <summary>
            Enum AQ for "AQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AR">
            <summary>
            Enum AR for "AR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AS">
            <summary>
            Enum AS for "AS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AT">
            <summary>
            Enum AT for "AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AU">
            <summary>
            Enum AU for "AU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AW">
            <summary>
            Enum AW for "AW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AX">
            <summary>
            Enum AX for "AX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AZ">
            <summary>
            Enum AZ for "AZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BA">
            <summary>
            Enum BA for "BA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BB">
            <summary>
            Enum BB for "BB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BD">
            <summary>
            Enum BD for "BD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BE">
            <summary>
            Enum BE for "BE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BF">
            <summary>
            Enum BF for "BF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BG">
            <summary>
            Enum BG for "BG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BH">
            <summary>
            Enum BH for "BH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BI">
            <summary>
            Enum BI for "BI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BJ">
            <summary>
            Enum BJ for "BJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BL">
            <summary>
            Enum BL for "BL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BM">
            <summary>
            Enum BM for "BM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BN">
            <summary>
            Enum BN for "BN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BO">
            <summary>
            Enum BO for "BO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BQ">
            <summary>
            Enum BQ for "BQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BR">
            <summary>
            Enum BR for "BR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BS">
            <summary>
            Enum BS for "BS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BT">
            <summary>
            Enum BT for "BT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BV">
            <summary>
            Enum BV for "BV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BW">
            <summary>
            Enum BW for "BW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BY">
            <summary>
            Enum BY for "BY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BZ">
            <summary>
            Enum BZ for "BZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CA">
            <summary>
            Enum CA for "CA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CC">
            <summary>
            Enum CC for "CC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CD">
            <summary>
            Enum CD for "CD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CF">
            <summary>
            Enum CF for "CF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CG">
            <summary>
            Enum CG for "CG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CH">
            <summary>
            Enum CH for "CH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CI">
            <summary>
            Enum CI for "CI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CK">
            <summary>
            Enum CK for "CK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CL">
            <summary>
            Enum CL for "CL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CM">
            <summary>
            Enum CM for "CM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CN">
            <summary>
            Enum CN for "CN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CO">
            <summary>
            Enum CO for "CO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CR">
            <summary>
            Enum CR for "CR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CU">
            <summary>
            Enum CU for "CU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CV">
            <summary>
            Enum CV for "CV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CW">
            <summary>
            Enum CW for "CW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CX">
            <summary>
            Enum CX for "CX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CY">
            <summary>
            Enum CY for "CY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CZ">
            <summary>
            Enum CZ for "CZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DE">
            <summary>
            Enum DE for "DE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DJ">
            <summary>
            Enum DJ for "DJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DK">
            <summary>
            Enum DK for "DK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DM">
            <summary>
            Enum DM for "DM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DO">
            <summary>
            Enum DO for "DO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DZ">
            <summary>
            Enum DZ for "DZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EC">
            <summary>
            Enum EC for "EC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EE">
            <summary>
            Enum EE for "EE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EG">
            <summary>
            Enum EG for "EG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EH">
            <summary>
            Enum EH for "EH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ER">
            <summary>
            Enum ER for "ER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ES">
            <summary>
            Enum ES for "ES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ET">
            <summary>
            Enum ET for "ET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FI">
            <summary>
            Enum FI for "FI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FJ">
            <summary>
            Enum FJ for "FJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FK">
            <summary>
            Enum FK for "FK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FM">
            <summary>
            Enum FM for "FM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FO">
            <summary>
            Enum FO for "FO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FR">
            <summary>
            Enum FR for "FR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GA">
            <summary>
            Enum GA for "GA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GB">
            <summary>
            Enum GB for "GB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GD">
            <summary>
            Enum GD for "GD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GE">
            <summary>
            Enum GE for "GE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GF">
            <summary>
            Enum GF for "GF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GG">
            <summary>
            Enum GG for "GG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GH">
            <summary>
            Enum GH for "GH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GI">
            <summary>
            Enum GI for "GI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GL">
            <summary>
            Enum GL for "GL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GM">
            <summary>
            Enum GM for "GM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GN">
            <summary>
            Enum GN for "GN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GP">
            <summary>
            Enum GP for "GP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GQ">
            <summary>
            Enum GQ for "GQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GR">
            <summary>
            Enum GR for "GR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GS">
            <summary>
            Enum GS for "GS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GT">
            <summary>
            Enum GT for "GT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GU">
            <summary>
            Enum GU for "GU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GW">
            <summary>
            Enum GW for "GW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GY">
            <summary>
            Enum GY for "GY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HK">
            <summary>
            Enum HK for "HK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HM">
            <summary>
            Enum HM for "HM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HN">
            <summary>
            Enum HN for "HN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HR">
            <summary>
            Enum HR for "HR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HT">
            <summary>
            Enum HT for "HT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HU">
            <summary>
            Enum HU for "HU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ID">
            <summary>
            Enum ID for "ID"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IE">
            <summary>
            Enum IE for "IE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IL">
            <summary>
            Enum IL for "IL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IM">
            <summary>
            Enum IM for "IM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IN">
            <summary>
            Enum IN for "IN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IO">
            <summary>
            Enum IO for "IO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IQ">
            <summary>
            Enum IQ for "IQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IR">
            <summary>
            Enum IR for "IR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IS">
            <summary>
            Enum IS for "IS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IT">
            <summary>
            Enum IT for "IT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JE">
            <summary>
            Enum JE for "JE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JM">
            <summary>
            Enum JM for "JM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JO">
            <summary>
            Enum JO for "JO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JP">
            <summary>
            Enum JP for "JP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KE">
            <summary>
            Enum KE for "KE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KG">
            <summary>
            Enum KG for "KG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KH">
            <summary>
            Enum KH for "KH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KI">
            <summary>
            Enum KI for "KI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KM">
            <summary>
            Enum KM for "KM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KN">
            <summary>
            Enum KN for "KN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KP">
            <summary>
            Enum KP for "KP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KR">
            <summary>
            Enum KR for "KR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KW">
            <summary>
            Enum KW for "KW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KY">
            <summary>
            Enum KY for "KY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KZ">
            <summary>
            Enum KZ for "KZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LA">
            <summary>
            Enum LA for "LA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LB">
            <summary>
            Enum LB for "LB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LC">
            <summary>
            Enum LC for "LC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LI">
            <summary>
            Enum LI for "LI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LK">
            <summary>
            Enum LK for "LK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LR">
            <summary>
            Enum LR for "LR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LS">
            <summary>
            Enum LS for "LS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LT">
            <summary>
            Enum LT for "LT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LU">
            <summary>
            Enum LU for "LU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LV">
            <summary>
            Enum LV for "LV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LY">
            <summary>
            Enum LY for "LY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MA">
            <summary>
            Enum MA for "MA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MC">
            <summary>
            Enum MC for "MC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MD">
            <summary>
            Enum MD for "MD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ME">
            <summary>
            Enum ME for "ME"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MF">
            <summary>
            Enum MF for "MF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MG">
            <summary>
            Enum MG for "MG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MH">
            <summary>
            Enum MH for "MH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MK">
            <summary>
            Enum MK for "MK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ML">
            <summary>
            Enum ML for "ML"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MM">
            <summary>
            Enum MM for "MM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MN">
            <summary>
            Enum MN for "MN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MO">
            <summary>
            Enum MO for "MO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MP">
            <summary>
            Enum MP for "MP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MQ">
            <summary>
            Enum MQ for "MQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MR">
            <summary>
            Enum MR for "MR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MS">
            <summary>
            Enum MS for "MS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MT">
            <summary>
            Enum MT for "MT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MU">
            <summary>
            Enum MU for "MU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MV">
            <summary>
            Enum MV for "MV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MW">
            <summary>
            Enum MW for "MW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MX">
            <summary>
            Enum MX for "MX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MY">
            <summary>
            Enum MY for "MY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MZ">
            <summary>
            Enum MZ for "MZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NA">
            <summary>
            Enum NA for "NA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NC">
            <summary>
            Enum NC for "NC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NE">
            <summary>
            Enum NE for "NE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NF">
            <summary>
            Enum NF for "NF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NG">
            <summary>
            Enum NG for "NG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NI">
            <summary>
            Enum NI for "NI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NL">
            <summary>
            Enum NL for "NL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NO">
            <summary>
            Enum NO for "NO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NP">
            <summary>
            Enum NP for "NP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NR">
            <summary>
            Enum NR for "NR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NU">
            <summary>
            Enum NU for "NU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NZ">
            <summary>
            Enum NZ for "NZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.OM">
            <summary>
            Enum OM for "OM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PA">
            <summary>
            Enum PA for "PA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PE">
            <summary>
            Enum PE for "PE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PF">
            <summary>
            Enum PF for "PF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PG">
            <summary>
            Enum PG for "PG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PH">
            <summary>
            Enum PH for "PH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PK">
            <summary>
            Enum PK for "PK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PL">
            <summary>
            Enum PL for "PL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PM">
            <summary>
            Enum PM for "PM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PN">
            <summary>
            Enum PN for "PN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PR">
            <summary>
            Enum PR for "PR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PS">
            <summary>
            Enum PS for "PS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PT">
            <summary>
            Enum PT for "PT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PW">
            <summary>
            Enum PW for "PW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PY">
            <summary>
            Enum PY for "PY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.QA">
            <summary>
            Enum QA for "QA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RE">
            <summary>
            Enum RE for "RE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RO">
            <summary>
            Enum RO for "RO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RS">
            <summary>
            Enum RS for "RS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RU">
            <summary>
            Enum RU for "RU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RW">
            <summary>
            Enum RW for "RW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SA">
            <summary>
            Enum SA for "SA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SB">
            <summary>
            Enum SB for "SB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SC">
            <summary>
            Enum SC for "SC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SD">
            <summary>
            Enum SD for "SD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SE">
            <summary>
            Enum SE for "SE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SG">
            <summary>
            Enum SG for "SG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SH">
            <summary>
            Enum SH for "SH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SI">
            <summary>
            Enum SI for "SI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SJ">
            <summary>
            Enum SJ for "SJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SK">
            <summary>
            Enum SK for "SK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SL">
            <summary>
            Enum SL for "SL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SM">
            <summary>
            Enum SM for "SM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SN">
            <summary>
            Enum SN for "SN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SO">
            <summary>
            Enum SO for "SO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SR">
            <summary>
            Enum SR for "SR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SS">
            <summary>
            Enum SS for "SS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ST">
            <summary>
            Enum ST for "ST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SV">
            <summary>
            Enum SV for "SV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SX">
            <summary>
            Enum SX for "SX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SY">
            <summary>
            Enum SY for "SY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SZ">
            <summary>
            Enum SZ for "SZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TC">
            <summary>
            Enum TC for "TC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TD">
            <summary>
            Enum TD for "TD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TF">
            <summary>
            Enum TF for "TF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TG">
            <summary>
            Enum TG for "TG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TH">
            <summary>
            Enum TH for "TH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TJ">
            <summary>
            Enum TJ for "TJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TK">
            <summary>
            Enum TK for "TK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TL">
            <summary>
            Enum TL for "TL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TM">
            <summary>
            Enum TM for "TM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TN">
            <summary>
            Enum TN for "TN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TO">
            <summary>
            Enum TO for "TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TR">
            <summary>
            Enum TR for "TR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TT">
            <summary>
            Enum TT for "TT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TV">
            <summary>
            Enum TV for "TV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TW">
            <summary>
            Enum TW for "TW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TZ">
            <summary>
            Enum TZ for "TZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UA">
            <summary>
            Enum UA for "UA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UG">
            <summary>
            Enum UG for "UG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UM">
            <summary>
            Enum UM for "UM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.US">
            <summary>
            Enum US for "US"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UY">
            <summary>
            Enum UY for "UY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UZ">
            <summary>
            Enum UZ for "UZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VA">
            <summary>
            Enum VA for "VA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VC">
            <summary>
            Enum VC for "VC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VE">
            <summary>
            Enum VE for "VE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VG">
            <summary>
            Enum VG for "VG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VI">
            <summary>
            Enum VI for "VI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VN">
            <summary>
            Enum VN for "VN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VU">
            <summary>
            Enum VU for "VU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.WF">
            <summary>
            Enum WF for "WF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.WS">
            <summary>
            Enum WS for "WS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.YE">
            <summary>
            Enum YE for "YE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.YT">
            <summary>
            Enum YT for "YT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZA">
            <summary>
            Enum ZA for "ZA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZM">
            <summary>
            Enum ZM for "ZM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZW">
            <summary>
            Enum ZW for "ZW"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Address.Country">
            <summary>
            The address's country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values
            </summary>
            <value>The address's country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.Address.CountryEnum},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Address" /> class.
            </summary>
            <param name="AddressLine1">The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields)..</param>
            <param name="AddressLine2">The second line of the address, if any..</param>
            <param name="AddressLine3">The third line of the address, if any..</param>
            <param name="Locality">The city or town of the address..</param>
            <param name="Sublocality">A civil region within the address&#39;s &#x60;locality&#x60;, if any..</param>
            <param name="Sublocality2">A civil region within the address&#39;s &#x60;sublocality&#x60;, if any..</param>
            <param name="Sublocality3">A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any..</param>
            <param name="AdministrativeDistrictLevel1">A civil entity within the address&#39;s country. In the US, this is the state..</param>
            <param name="AdministrativeDistrictLevel2">A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county..</param>
            <param name="AdministrativeDistrictLevel3">A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any..</param>
            <param name="PostalCode">The address&#39;s postal code..</param>
            <param name="Country">The address&#39;s country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values.</param>
            <param name="FirstName">Optional first name when it&#39;s representing recipient..</param>
            <param name="LastName">Optional last name when it&#39;s representing recipient..</param>
            <param name="Organization">Optional organization name when it&#39;s representing recipient..</param>
        </member>
        <member name="P:Square.Connect.Model.Address.AddressLine1">
            <summary>
            The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).
            </summary>
            <value>The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).</value>
        </member>
        <member name="P:Square.Connect.Model.Address.AddressLine2">
            <summary>
            The second line of the address, if any.
            </summary>
            <value>The second line of the address, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.AddressLine3">
            <summary>
            The third line of the address, if any.
            </summary>
            <value>The third line of the address, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.Locality">
            <summary>
            The city or town of the address.
            </summary>
            <value>The city or town of the address.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.Sublocality">
            <summary>
            A civil region within the address&#39;s &#x60;locality&#x60;, if any.
            </summary>
            <value>A civil region within the address&#39;s &#x60;locality&#x60;, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.Sublocality2">
            <summary>
            A civil region within the address&#39;s &#x60;sublocality&#x60;, if any.
            </summary>
            <value>A civil region within the address&#39;s &#x60;sublocality&#x60;, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.Sublocality3">
            <summary>
            A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any.
            </summary>
            <value>A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel1">
            <summary>
            A civil entity within the address&#39;s country. In the US, this is the state.
            </summary>
            <value>A civil entity within the address&#39;s country. In the US, this is the state.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel2">
            <summary>
            A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county.
            </summary>
            <value>A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel3">
            <summary>
            A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any.
            </summary>
            <value>A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.PostalCode">
            <summary>
            The address&#39;s postal code.
            </summary>
            <value>The address&#39;s postal code.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.FirstName">
            <summary>
            Optional first name when it&#39;s representing recipient.
            </summary>
            <value>Optional first name when it&#39;s representing recipient.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.LastName">
            <summary>
            Optional last name when it&#39;s representing recipient.
            </summary>
            <value>Optional last name when it&#39;s representing recipient.</value>
        </member>
        <member name="P:Square.Connect.Model.Address.Organization">
            <summary>
            Optional organization name when it&#39;s representing recipient.
            </summary>
            <value>Optional organization name when it&#39;s representing recipient.</value>
        </member>
        <member name="M:Square.Connect.Model.Address.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Address.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Address.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Address.Equals(Square.Connect.Model.Address)">
            <summary>
            Returns true if Address instances are equal
            </summary>
            <param name="other">Instance of Address to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Address.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.AggregationStrategy">
            <summary>
            Indicates how a [CatalogPricingRule](#type-catalogpricingrule) can be combined with other rules.
            </summary>
            <value>Indicates how a [CatalogPricingRule](#type-catalogpricingrule) can be combined with other rules.</value>
        </member>
        <member name="F:Square.Connect.Model.AggregationStrategy.UNKNOWN">
            <summary>
            Enum UNKNOWN for "UNKNOWN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.AggregationStrategy.BASE">
            <summary>
            Enum BASE for "BASE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.AggregationStrategy.STACKABLE">
            <summary>
            Enum STACKABLE for "STACKABLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.AggregationStrategy.EXCLUSIVE">
            <summary>
            Enum EXCLUSIVE for "EXCLUSIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.BatchChangeInventoryRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryRequest.#ctor(System.String,System.Collections.Generic.List{Square.Connect.Model.InventoryChange},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchChangeInventoryRequest" /> class.
            </summary>
            <param name="IdempotencyKey">A client-supplied, universally unique identifier (UUID) for the request.  See [Idempotency](/basics/api101/idempotency) in the [API Development 101](/basics/api101/overview) section for more information..</param>
            <param name="Changes">The set of physical counts and inventory adjustments to be made. Changes are applied based on the client-supplied timestamp and may be sent out of order. Max size is 100 changes..</param>
            <param name="IgnoreUnchangedCounts">Indicates whether the current physical count should be ignored if the quantity is unchanged since the last physical count. Default: &#x60;true&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchChangeInventoryRequest.IdempotencyKey">
            <summary>
            A client-supplied, universally unique identifier (UUID) for the request.  See [Idempotency](/basics/api101/idempotency) in the [API Development 101](/basics/api101/overview) section for more information.
            </summary>
            <value>A client-supplied, universally unique identifier (UUID) for the request.  See [Idempotency](/basics/api101/idempotency) in the [API Development 101](/basics/api101/overview) section for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchChangeInventoryRequest.Changes">
            <summary>
            The set of physical counts and inventory adjustments to be made. Changes are applied based on the client-supplied timestamp and may be sent out of order. Max size is 100 changes.
            </summary>
            <value>The set of physical counts and inventory adjustments to be made. Changes are applied based on the client-supplied timestamp and may be sent out of order. Max size is 100 changes.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchChangeInventoryRequest.IgnoreUnchangedCounts">
            <summary>
            Indicates whether the current physical count should be ignored if the quantity is unchanged since the last physical count. Default: &#x60;true&#x60;.
            </summary>
            <value>Indicates whether the current physical count should be ignored if the quantity is unchanged since the last physical count. Default: &#x60;true&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryRequest.Equals(Square.Connect.Model.BatchChangeInventoryRequest)">
            <summary>
            Returns true if BatchChangeInventoryRequest instances are equal
            </summary>
            <param name="other">Instance of BatchChangeInventoryRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchChangeInventoryResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.InventoryCount})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchChangeInventoryResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Counts">The current counts for all objects referenced in the request..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchChangeInventoryResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchChangeInventoryResponse.Counts">
            <summary>
            The current counts for all objects referenced in the request.
            </summary>
            <value>The current counts for all objects referenced in the request.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryResponse.Equals(Square.Connect.Model.BatchChangeInventoryResponse)">
            <summary>
            Returns true if BatchChangeInventoryResponse instances are equal
            </summary>
            <param name="other">Instance of BatchChangeInventoryResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchChangeInventoryResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchDeleteCatalogObjectsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchDeleteCatalogObjectsRequest" /> class.
            </summary>
            <param name="ObjectIds">The IDs of the [CatalogObject](#type-catalogobject)s to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s)..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.ObjectIds">
            <summary>
            The IDs of the [CatalogObject](#type-catalogobject)s to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).
            </summary>
            <value>The IDs of the [CatalogObject](#type-catalogobject)s to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</value>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.Equals(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
            <summary>
            Returns true if BatchDeleteCatalogObjectsRequest instances are equal
            </summary>
            <param name="other">Instance of BatchDeleteCatalogObjectsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchDeleteCatalogObjectsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchDeleteCatalogObjectsResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="DeletedObjectIds">The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request..</param>
            <param name="DeletedAt">The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.DeletedObjectIds">
            <summary>
            The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request.
            </summary>
            <value>The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.DeletedAt">
            <summary>
            The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.
            </summary>
            <value>The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.Equals(Square.Connect.Model.BatchDeleteCatalogObjectsResponse)">
            <summary>
            Returns true if BatchDeleteCatalogObjectsResponse instances are equal
            </summary>
            <param name="other">Instance of BatchDeleteCatalogObjectsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.#ctor(System.Collections.Generic.List{System.String},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest" /> class.
            </summary>
            <param name="ObjectIds">The IDs of the [CatalogObject](#type-catalogobject)s to be retrieved. (required).</param>
            <param name="IncludeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested objects, as follows:  If the &#x60;objects&#x60; field of the response contains a [CatalogItem](#type-catalogitem),  its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;objects&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of the response..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.ObjectIds">
            <summary>
            The IDs of the [CatalogObject](#type-catalogobject)s to be retrieved.
            </summary>
            <value>The IDs of the [CatalogObject](#type-catalogobject)s to be retrieved.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.IncludeRelatedObjects">
            <summary>
            If &#x60;true&#x60;, the response will include additional objects that are related to the requested objects, as follows:  If the &#x60;objects&#x60; field of the response contains a [CatalogItem](#type-catalogitem),  its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;objects&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of the response.
            </summary>
            <value>If &#x60;true&#x60;, the response will include additional objects that are related to the requested objects, as follows:  If the &#x60;objects&#x60; field of the response contains a [CatalogItem](#type-catalogitem),  its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;objects&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of the response.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.Equals(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
            <summary>
            Returns true if BatchRetrieveCatalogObjectsRequest instances are equal
            </summary>
            <param name="other">Instance of BatchRetrieveCatalogObjectsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.CatalogObject},System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="Objects">A list of [CatalogObject](#type-catalogobject)s returned..</param>
            <param name="RelatedObjects">A list of [CatalogObject](#type-catalogobject)s referenced by the object in the &#x60;objects&#x60; field..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.Objects">
            <summary>
            A list of [CatalogObject](#type-catalogobject)s returned.
            </summary>
            <value>A list of [CatalogObject](#type-catalogobject)s returned.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.RelatedObjects">
            <summary>
            A list of [CatalogObject](#type-catalogobject)s referenced by the object in the &#x60;objects&#x60; field.
            </summary>
            <value>A list of [CatalogObject](#type-catalogobject)s referenced by the object in the &#x60;objects&#x60; field.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.Equals(Square.Connect.Model.BatchRetrieveCatalogObjectsResponse)">
            <summary>
            Returns true if BatchRetrieveCatalogObjectsResponse instances are equal
            </summary>
            <param name="other">Instance of BatchRetrieveCatalogObjectsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveInventoryChangesRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.TypesEnum">
            <summary>
            Gets or Sets Types
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.TypesEnum.PHYSICALCOUNT">
            <summary>
            Enum PHYSICALCOUNT for "PHYSICAL_COUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.TypesEnum.ADJUSTMENT">
            <summary>
            Enum ADJUSTMENT for "ADJUSTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.TypesEnum.TRANSFER">
            <summary>
            Enum TRANSFER for "TRANSFER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum">
            <summary>
            Gets or Sets States
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.CUSTOM">
            <summary>
            Enum CUSTOM for "CUSTOM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.INSTOCK">
            <summary>
            Enum INSTOCK for "IN_STOCK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.SOLD">
            <summary>
            Enum SOLD for "SOLD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.RETURNEDBYCUSTOMER">
            <summary>
            Enum RETURNEDBYCUSTOMER for "RETURNED_BY_CUSTOMER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.RESERVEDFORSALE">
            <summary>
            Enum RESERVEDFORSALE for "RESERVED_FOR_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.SOLDONLINE">
            <summary>
            Enum SOLDONLINE for "SOLD_ONLINE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.ORDEREDFROMVENDOR">
            <summary>
            Enum ORDEREDFROMVENDOR for "ORDERED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.RECEIVEDFROMVENDOR">
            <summary>
            Enum RECEIVEDFROMVENDOR for "RECEIVED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.INTRANSITTO">
            <summary>
            Enum INTRANSITTO for "IN_TRANSIT_TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.WASTE">
            <summary>
            Enum WASTE for "WASTE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum.UNLINKEDRETURN">
            <summary>
            Enum UNLINKEDRETURN for "UNLINKED_RETURN"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.Types">
            <summary>
            Filters results by [InventoryChangeType](#type-inventorychangetype). Default: [`PHYSICAL_COUNT`, `ADJUSTMENT`]. `TRANSFER` is not supported as a filter. See [InventoryChangeType](#type-inventorychangetype) for possible values
            </summary>
            <value>Filters results by [InventoryChangeType](#type-inventorychangetype). Default: [`PHYSICAL_COUNT`, `ADJUSTMENT`]. `TRANSFER` is not supported as a filter. See [InventoryChangeType](#type-inventorychangetype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.States">
            <summary>
            Filters `ADJUSTMENT` query results by [InventoryState](#type-inventorystate). Only applied when set. Default: unset. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>Filters `ADJUSTMENT` query results by [InventoryState](#type-inventorystate). Only applied when set. Default: unset. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Square.Connect.Model.BatchRetrieveInventoryChangesRequest.TypesEnum},System.Collections.Generic.List{Square.Connect.Model.BatchRetrieveInventoryChangesRequest.StatesEnum},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveInventoryChangesRequest" /> class.
            </summary>
            <param name="CatalogObjectIds">Filters results by [CatalogObject](#type-catalogobject) ID. Only applied when set. Default: unset..</param>
            <param name="LocationIds">Filters results by [Location](#type-location) ID. Only applied when set. Default: unset..</param>
            <param name="Types">Filters results by [InventoryChangeType](#type-inventorychangetype). Default: [&#x60;PHYSICAL_COUNT&#x60;, &#x60;ADJUSTMENT&#x60;]. &#x60;TRANSFER&#x60; is not supported as a filter. See [InventoryChangeType](#type-inventorychangetype) for possible values.</param>
            <param name="States">Filters &#x60;ADJUSTMENT&#x60; query results by [InventoryState](#type-inventorystate). Only applied when set. Default: unset. See [InventoryState](#type-inventorystate) for possible values.</param>
            <param name="UpdatedAfter">Provided as an RFC 3339 timestamp. Returns results whose &#x60;created_at&#x60; or &#x60;calculated_at&#x60; value is after the given time. Default: UNIX epoch (&#x60;1970-01-01T00:00:00Z&#x60;)..</param>
            <param name="UpdatedBefore">Provided as an RFC 3339 timestamp. Returns results whose &#x60;created_at&#x60; or &#x60;calculated_at&#x60; value is strictly before the given time. Default: UNIX epoch (&#x60;1970-01-01T00:00:00Z&#x60;)..</param>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.CatalogObjectIds">
            <summary>
            Filters results by [CatalogObject](#type-catalogobject) ID. Only applied when set. Default: unset.
            </summary>
            <value>Filters results by [CatalogObject](#type-catalogobject) ID. Only applied when set. Default: unset.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.LocationIds">
            <summary>
            Filters results by [Location](#type-location) ID. Only applied when set. Default: unset.
            </summary>
            <value>Filters results by [Location](#type-location) ID. Only applied when set. Default: unset.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.UpdatedAfter">
            <summary>
            Provided as an RFC 3339 timestamp. Returns results whose &#x60;created_at&#x60; or &#x60;calculated_at&#x60; value is after the given time. Default: UNIX epoch (&#x60;1970-01-01T00:00:00Z&#x60;).
            </summary>
            <value>Provided as an RFC 3339 timestamp. Returns results whose &#x60;created_at&#x60; or &#x60;calculated_at&#x60; value is after the given time. Default: UNIX epoch (&#x60;1970-01-01T00:00:00Z&#x60;).</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.UpdatedBefore">
            <summary>
            Provided as an RFC 3339 timestamp. Returns results whose &#x60;created_at&#x60; or &#x60;calculated_at&#x60; value is strictly before the given time. Default: UNIX epoch (&#x60;1970-01-01T00:00:00Z&#x60;).
            </summary>
            <value>Provided as an RFC 3339 timestamp. Returns results whose &#x60;created_at&#x60; or &#x60;calculated_at&#x60; value is strictly before the given time. Default: UNIX epoch (&#x60;1970-01-01T00:00:00Z&#x60;).</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.Equals(Square.Connect.Model.BatchRetrieveInventoryChangesRequest)">
            <summary>
            Returns true if BatchRetrieveInventoryChangesRequest instances are equal
            </summary>
            <param name="other">Instance of BatchRetrieveInventoryChangesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveInventoryChangesResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.InventoryChange},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveInventoryChangesResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Changes">The current calculated inventory changes for the requested objects and locations..</param>
            <param name="Cursor">The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesResponse.Changes">
            <summary>
            The current calculated inventory changes for the requested objects and locations.
            </summary>
            <value>The current calculated inventory changes for the requested objects and locations.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryChangesResponse.Cursor">
            <summary>
            The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesResponse.Equals(Square.Connect.Model.BatchRetrieveInventoryChangesResponse)">
            <summary>
            Returns true if BatchRetrieveInventoryChangesResponse instances are equal
            </summary>
            <param name="other">Instance of BatchRetrieveInventoryChangesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryChangesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveInventoryCountsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveInventoryCountsRequest" /> class.
            </summary>
            <param name="CatalogObjectIds">Filters results by [CatalogObject](#type-catalogobject) ID. Only applied when set. Default: unset..</param>
            <param name="LocationIds">Filters results by [Location](#type-location) ID. Only applied when set. Default: unset..</param>
            <param name="UpdatedAfter">Provided as an RFC 3339 timestamp. Returns results whose &#x60;calculated_at&#x60; value is after the given time. Default: UNIX epoch (&#x60;1970-01-01T00:00:00Z&#x60;)..</param>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.CatalogObjectIds">
            <summary>
            Filters results by [CatalogObject](#type-catalogobject) ID. Only applied when set. Default: unset.
            </summary>
            <value>Filters results by [CatalogObject](#type-catalogobject) ID. Only applied when set. Default: unset.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.LocationIds">
            <summary>
            Filters results by [Location](#type-location) ID. Only applied when set. Default: unset.
            </summary>
            <value>Filters results by [Location](#type-location) ID. Only applied when set. Default: unset.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.UpdatedAfter">
            <summary>
            Provided as an RFC 3339 timestamp. Returns results whose &#x60;calculated_at&#x60; value is after the given time. Default: UNIX epoch (&#x60;1970-01-01T00:00:00Z&#x60;).
            </summary>
            <value>Provided as an RFC 3339 timestamp. Returns results whose &#x60;calculated_at&#x60; value is after the given time. Default: UNIX epoch (&#x60;1970-01-01T00:00:00Z&#x60;).</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.Equals(Square.Connect.Model.BatchRetrieveInventoryCountsRequest)">
            <summary>
            Returns true if BatchRetrieveInventoryCountsRequest instances are equal
            </summary>
            <param name="other">Instance of BatchRetrieveInventoryCountsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveInventoryCountsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.InventoryCount},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveInventoryCountsResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Counts">The current calculated inventory counts for the requested objects and locations..</param>
            <param name="Cursor">The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryCountsResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryCountsResponse.Counts">
            <summary>
            The current calculated inventory counts for the requested objects and locations.
            </summary>
            <value>The current calculated inventory counts for the requested objects and locations.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveInventoryCountsResponse.Cursor">
            <summary>
            The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsResponse.Equals(Square.Connect.Model.BatchRetrieveInventoryCountsResponse)">
            <summary>
            Returns true if BatchRetrieveInventoryCountsResponse instances are equal
            </summary>
            <param name="other">Instance of BatchRetrieveInventoryCountsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveInventoryCountsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveOrdersRequest">
            <summary>
            Defines the fields that are included in requests to the BatchRetrieveOrders endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveOrdersRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveOrdersRequest" /> class.
            </summary>
            <param name="OrderIds">The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveOrdersRequest.OrderIds">
            <summary>
            The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.
            </summary>
            <value>The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.Equals(Square.Connect.Model.BatchRetrieveOrdersRequest)">
            <summary>
            Returns true if BatchRetrieveOrdersRequest instances are equal
            </summary>
            <param name="other">Instance of BatchRetrieveOrdersRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchRetrieveOrdersResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the BatchRetrieveOrders endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Order},System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveOrdersResponse" /> class.
            </summary>
            <param name="Orders">The requested orders. This will omit any requested orders that do not exist or are not charged..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="UnconvertibleTransactionIds">List of transaction ids within the requested set of ids that encountered transformation issues when being converted to an Order..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveOrdersResponse.Orders">
            <summary>
            The requested orders. This will omit any requested orders that do not exist or are not charged.
            </summary>
            <value>The requested orders. This will omit any requested orders that do not exist or are not charged.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveOrdersResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchRetrieveOrdersResponse.UnconvertibleTransactionIds">
            <summary>
            List of transaction ids within the requested set of ids that encountered transformation issues when being converted to an Order.
            </summary>
            <value>List of transaction ids within the requested set of ids that encountered transformation issues when being converted to an Order.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.Equals(Square.Connect.Model.BatchRetrieveOrdersResponse)">
            <summary>
            Returns true if BatchRetrieveOrdersResponse instances are equal
            </summary>
            <param name="other">Instance of BatchRetrieveOrdersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchUpsertCatalogObjectsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchUpsertCatalogObjectsRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.#ctor(System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogObjectBatch})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchUpsertCatalogObjectsRequest" /> class.
            </summary>
            <param name="IdempotencyKey">A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you&#39;re unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](/basics/api101/idempotency) for more information. (required).</param>
            <param name="Batches">A batch of [CatalogObject](#type-catalogobject)s to be inserted/updated atomically. The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error in one batch will not affect other batches within the same request.  For each object, its &#x60;updated_at&#x60; field is ignored and replaced with a current [timestamp](#workingwithdates), and its &#x60;is_deleted&#x60; field must not be set to &#x60;true&#x60;.  To modify an existing object, supply its ID. To create a new object, use an ID starting with &#x60;#&#x60;. These IDs may be used to create relationships between an object and attributes of other objects that reference it. For example, you can create a [CatalogItem](#type-catalogitem) with ID &#x60;#ABC&#x60; and a [CatalogItemVariation](#type-catalogitemvariation) with its &#x60;item_id&#x60; attribute set to &#x60;#ABC&#x60; in order to associate the [CatalogItemVariation](#type-catalogitemvariation) with its parent [CatalogItem](#type-catalogitem).  Any &#x60;#&#x60;-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.  Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will be inserted or updated..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.IdempotencyKey">
            <summary>
            A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you&#39;re unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](/basics/api101/idempotency) for more information.
            </summary>
            <value>A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you&#39;re unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](/basics/api101/idempotency) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.Batches">
            <summary>
            A batch of [CatalogObject](#type-catalogobject)s to be inserted/updated atomically. The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error in one batch will not affect other batches within the same request.  For each object, its &#x60;updated_at&#x60; field is ignored and replaced with a current [timestamp](#workingwithdates), and its &#x60;is_deleted&#x60; field must not be set to &#x60;true&#x60;.  To modify an existing object, supply its ID. To create a new object, use an ID starting with &#x60;#&#x60;. These IDs may be used to create relationships between an object and attributes of other objects that reference it. For example, you can create a [CatalogItem](#type-catalogitem) with ID &#x60;#ABC&#x60; and a [CatalogItemVariation](#type-catalogitemvariation) with its &#x60;item_id&#x60; attribute set to &#x60;#ABC&#x60; in order to associate the [CatalogItemVariation](#type-catalogitemvariation) with its parent [CatalogItem](#type-catalogitem).  Any &#x60;#&#x60;-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.  Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will be inserted or updated.
            </summary>
            <value>A batch of [CatalogObject](#type-catalogobject)s to be inserted/updated atomically. The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error in one batch will not affect other batches within the same request.  For each object, its &#x60;updated_at&#x60; field is ignored and replaced with a current [timestamp](#workingwithdates), and its &#x60;is_deleted&#x60; field must not be set to &#x60;true&#x60;.  To modify an existing object, supply its ID. To create a new object, use an ID starting with &#x60;#&#x60;. These IDs may be used to create relationships between an object and attributes of other objects that reference it. For example, you can create a [CatalogItem](#type-catalogitem) with ID &#x60;#ABC&#x60; and a [CatalogItemVariation](#type-catalogitemvariation) with its &#x60;item_id&#x60; attribute set to &#x60;#ABC&#x60; in order to associate the [CatalogItemVariation](#type-catalogitemvariation) with its parent [CatalogItem](#type-catalogitem).  Any &#x60;#&#x60;-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.  Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will be inserted or updated.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.Equals(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
            <summary>
            Returns true if BatchUpsertCatalogObjectsRequest instances are equal
            </summary>
            <param name="other">Instance of BatchUpsertCatalogObjectsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BatchUpsertCatalogObjectsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.CatalogObject},System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogIdMapping})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchUpsertCatalogObjectsResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="Objects">The created [CatalogObject](#type-catalogobject)s.</param>
            <param name="UpdatedAt">The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;..</param>
            <param name="IdMappings">The mapping between client and server IDs for this Upsert..</param>
        </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.Objects">
            <summary>
            The created [CatalogObject](#type-catalogobject)s
            </summary>
            <value>The created [CatalogObject](#type-catalogobject)s</value>
        </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.UpdatedAt">
            <summary>
            The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.
            </summary>
            <value>The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.</value>
        </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.IdMappings">
            <summary>
            The mapping between client and server IDs for this Upsert.
            </summary>
            <value>The mapping between client and server IDs for this Upsert.</value>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.Equals(Square.Connect.Model.BatchUpsertCatalogObjectsResponse)">
            <summary>
            Returns true if BatchUpsertCatalogObjectsResponse instances are equal
            </summary>
            <param name="other">Instance of BatchUpsertCatalogObjectsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BreakType">
            <summary>
            A defined break template that sets an expectation for possible &#x60;Break&#x60;  instances on a &#x60;Shift&#x60;.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BreakType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BreakType" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BreakType.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BreakType" /> class.
            </summary>
            <param name="Id">UUID for this object..</param>
            <param name="LocationId">The ID of the business location this type of break applies to. (required).</param>
            <param name="BreakName">A human-readable name for this type of break. Will be displayed to employees in Square products. (required).</param>
            <param name="ExpectedDuration">Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision below minutes is truncated. (required).</param>
            <param name="IsPaid">Whether this break counts towards time worked for compensation purposes. (required).</param>
            <param name="Version">Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If a value is not provided, Square&#39;s servers execute a \&quot;blind\&quot; write; potentially  overwriting another writer&#39;s data..</param>
            <param name="CreatedAt">A read-only timestamp in RFC 3339 format..</param>
            <param name="UpdatedAt">A read-only timestamp in RFC 3339 format..</param>
        </member>
        <member name="P:Square.Connect.Model.BreakType.Id">
            <summary>
            UUID for this object.
            </summary>
            <value>UUID for this object.</value>
        </member>
        <member name="P:Square.Connect.Model.BreakType.LocationId">
            <summary>
            The ID of the business location this type of break applies to.
            </summary>
            <value>The ID of the business location this type of break applies to.</value>
        </member>
        <member name="P:Square.Connect.Model.BreakType.BreakName">
            <summary>
            A human-readable name for this type of break. Will be displayed to employees in Square products.
            </summary>
            <value>A human-readable name for this type of break. Will be displayed to employees in Square products.</value>
        </member>
        <member name="P:Square.Connect.Model.BreakType.ExpectedDuration">
            <summary>
            Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision below minutes is truncated.
            </summary>
            <value>Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision below minutes is truncated.</value>
        </member>
        <member name="P:Square.Connect.Model.BreakType.IsPaid">
            <summary>
            Whether this break counts towards time worked for compensation purposes.
            </summary>
            <value>Whether this break counts towards time worked for compensation purposes.</value>
        </member>
        <member name="P:Square.Connect.Model.BreakType.Version">
            <summary>
            Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If a value is not provided, Square&#39;s servers execute a \&quot;blind\&quot; write; potentially  overwriting another writer&#39;s data.
            </summary>
            <value>Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If a value is not provided, Square&#39;s servers execute a \&quot;blind\&quot; write; potentially  overwriting another writer&#39;s data.</value>
        </member>
        <member name="P:Square.Connect.Model.BreakType.CreatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format.
            </summary>
            <value>A read-only timestamp in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.BreakType.UpdatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format.
            </summary>
            <value>A read-only timestamp in RFC 3339 format.</value>
        </member>
        <member name="M:Square.Connect.Model.BreakType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BreakType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BreakType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BreakType.Equals(Square.Connect.Model.BreakType)">
            <summary>
            Returns true if BreakType instances are equal
            </summary>
            <param name="other">Instance of BreakType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BreakType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BusinessHours">
            <summary>
             Represents the hours of operation for a business location.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.BusinessHours.#ctor(System.Collections.Generic.List{Square.Connect.Model.BusinessHoursPeriod})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BusinessHours" /> class.
            </summary>
            <param name="Periods">The list of time periods during which the business is open. There may be at most 10 periods per day..</param>
        </member>
        <member name="P:Square.Connect.Model.BusinessHours.Periods">
            <summary>
            The list of time periods during which the business is open. There may be at most 10 periods per day.
            </summary>
            <value>The list of time periods during which the business is open. There may be at most 10 periods per day.</value>
        </member>
        <member name="M:Square.Connect.Model.BusinessHours.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BusinessHours.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BusinessHours.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BusinessHours.Equals(Square.Connect.Model.BusinessHours)">
            <summary>
            Returns true if BusinessHours instances are equal
            </summary>
            <param name="other">Instance of BusinessHours to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BusinessHours.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.BusinessHoursPeriod">
            <summary>
             Represents a period of time during which a business location is open.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.BusinessHoursPeriod.DayOfWeekEnum">
            <summary>
            The day of week for this time period. See [DayOfWeek](#type-dayofweek) for possible values
            </summary>
            <value>The day of week for this time period. See [DayOfWeek](#type-dayofweek) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.BusinessHoursPeriod.DayOfWeekEnum.SUN">
            <summary>
            Enum SUN for "SUN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BusinessHoursPeriod.DayOfWeekEnum.MON">
            <summary>
            Enum MON for "MON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BusinessHoursPeriod.DayOfWeekEnum.TUE">
            <summary>
            Enum TUE for "TUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BusinessHoursPeriod.DayOfWeekEnum.WED">
            <summary>
            Enum WED for "WED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BusinessHoursPeriod.DayOfWeekEnum.THU">
            <summary>
            Enum THU for "THU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BusinessHoursPeriod.DayOfWeekEnum.FRI">
            <summary>
            Enum FRI for "FRI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.BusinessHoursPeriod.DayOfWeekEnum.SAT">
            <summary>
            Enum SAT for "SAT"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.BusinessHoursPeriod.DayOfWeek">
            <summary>
            The day of week for this time period. See [DayOfWeek](#type-dayofweek) for possible values
            </summary>
            <value>The day of week for this time period. See [DayOfWeek](#type-dayofweek) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.BusinessHoursPeriod.#ctor(System.Nullable{Square.Connect.Model.BusinessHoursPeriod.DayOfWeekEnum},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.BusinessHoursPeriod" /> class.
            </summary>
            <param name="DayOfWeek">The day of week for this time period. See [DayOfWeek](#type-dayofweek) for possible values.</param>
            <param name="StartLocalTime">The start time of a business hours period, specified in local time using partial-time RFC3339 format..</param>
            <param name="EndLocalTime">The end time of a business hours period, specified in local time using partial-time RFC3339 format..</param>
        </member>
        <member name="P:Square.Connect.Model.BusinessHoursPeriod.StartLocalTime">
            <summary>
            The start time of a business hours period, specified in local time using partial-time RFC3339 format.
            </summary>
            <value>The start time of a business hours period, specified in local time using partial-time RFC3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.BusinessHoursPeriod.EndLocalTime">
            <summary>
            The end time of a business hours period, specified in local time using partial-time RFC3339 format.
            </summary>
            <value>The end time of a business hours period, specified in local time using partial-time RFC3339 format.</value>
        </member>
        <member name="M:Square.Connect.Model.BusinessHoursPeriod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BusinessHoursPeriod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.BusinessHoursPeriod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BusinessHoursPeriod.Equals(Square.Connect.Model.BusinessHoursPeriod)">
            <summary>
            Returns true if BusinessHoursPeriod instances are equal
            </summary>
            <param name="other">Instance of BusinessHoursPeriod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.BusinessHoursPeriod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CaptureTransactionRequest">
            <summary>
            Defines the query parameters for calls to the CaptureTransaction endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CaptureTransactionRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.Equals(Square.Connect.Model.CaptureTransactionRequest)">
            <summary>
            Returns true if CaptureTransactionRequest instances are equal
            </summary>
            <param name="other">Instance of CaptureTransactionRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CaptureTransactionResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the CaptureTransaction endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CaptureTransactionResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.CaptureTransactionResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.Equals(Square.Connect.Model.CaptureTransactionResponse)">
            <summary>
            Returns true if CaptureTransactionResponse instances are equal
            </summary>
            <param name="other">Instance of CaptureTransactionResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Card">
            <summary>
            Represents the payment details of a card to be used for payments. These details are determined by the &#x60;card_nonce&#x60; generated by &#x60;SqPaymentForm&#x60;.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Card.CardBrandEnum">
            <summary>
            The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for possible values
            </summary>
            <value>The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.OTHERBRAND">
            <summary>
            Enum OTHERBRAND for "OTHER_BRAND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.VISA">
            <summary>
            Enum VISA for "VISA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.MASTERCARD">
            <summary>
            Enum MASTERCARD for "MASTERCARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.AMERICANEXPRESS">
            <summary>
            Enum AMERICANEXPRESS for "AMERICAN_EXPRESS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.DISCOVER">
            <summary>
            Enum DISCOVER for "DISCOVER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.DISCOVERDINERS">
            <summary>
            Enum DISCOVERDINERS for "DISCOVER_DINERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.JCB">
            <summary>
            Enum JCB for "JCB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.CHINAUNIONPAY">
            <summary>
            Enum CHINAUNIONPAY for "CHINA_UNIONPAY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.SQUAREGIFTCARD">
            <summary>
            Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Card.CardBrand">
            <summary>
            The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for possible values
            </summary>
            <value>The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Card.#ctor(System.String,System.Nullable{Square.Connect.Model.Card.CardBrandEnum},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,Square.Connect.Model.Address,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Card" /> class.
            </summary>
            <param name="Id">Unique ID for this card. Generated by Square..</param>
            <param name="CardBrand">The card&#39;s brand (such as &#x60;VISA&#x60;). See [CardBrand](#type-cardbrand) for possible values.</param>
            <param name="Last4">The last 4 digits of the card number..</param>
            <param name="ExpMonth">The expiration month of the associated card as an integer between 1 and 12..</param>
            <param name="ExpYear">The four-digit year of the card&#39;s expiration date..</param>
            <param name="CardholderName">The name of the cardholder..</param>
            <param name="BillingAddress">The billing address for this card..</param>
            <param name="Fingerprint">A unique, Square-assigned ID that identifies the card across multiple locations and applications for a single Square account..</param>
        </member>
        <member name="P:Square.Connect.Model.Card.Id">
            <summary>
            Unique ID for this card. Generated by Square.
            </summary>
            <value>Unique ID for this card. Generated by Square.</value>
        </member>
        <member name="P:Square.Connect.Model.Card.Last4">
            <summary>
            The last 4 digits of the card number.
            </summary>
            <value>The last 4 digits of the card number.</value>
        </member>
        <member name="P:Square.Connect.Model.Card.ExpMonth">
            <summary>
            The expiration month of the associated card as an integer between 1 and 12.
            </summary>
            <value>The expiration month of the associated card as an integer between 1 and 12.</value>
        </member>
        <member name="P:Square.Connect.Model.Card.ExpYear">
            <summary>
            The four-digit year of the card&#39;s expiration date.
            </summary>
            <value>The four-digit year of the card&#39;s expiration date.</value>
        </member>
        <member name="P:Square.Connect.Model.Card.CardholderName">
            <summary>
            The name of the cardholder.
            </summary>
            <value>The name of the cardholder.</value>
        </member>
        <member name="P:Square.Connect.Model.Card.BillingAddress">
            <summary>
            The billing address for this card.
            </summary>
            <value>The billing address for this card.</value>
        </member>
        <member name="P:Square.Connect.Model.Card.Fingerprint">
            <summary>
            A unique, Square-assigned ID that identifies the card across multiple locations and applications for a single Square account.
            </summary>
            <value>A unique, Square-assigned ID that identifies the card across multiple locations and applications for a single Square account.</value>
        </member>
        <member name="M:Square.Connect.Model.Card.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Card.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Card.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Card.Equals(Square.Connect.Model.Card)">
            <summary>
            Returns true if Card instances are equal
            </summary>
            <param name="other">Instance of Card to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Card.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CardBrand">
            <summary>
            Indicates a card's brand, such as `VISA` or `MASTERCARD`.
            </summary>
            <value>Indicates a card's brand, such as `VISA` or `MASTERCARD`.</value>
        </member>
        <member name="F:Square.Connect.Model.CardBrand.OTHERBRAND">
            <summary>
            Enum OTHERBRAND for "OTHER_BRAND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CardBrand.VISA">
            <summary>
            Enum VISA for "VISA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CardBrand.MASTERCARD">
            <summary>
            Enum MASTERCARD for "MASTERCARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CardBrand.AMERICANEXPRESS">
            <summary>
            Enum AMERICANEXPRESS for "AMERICAN_EXPRESS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CardBrand.DISCOVER">
            <summary>
            Enum DISCOVER for "DISCOVER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CardBrand.DISCOVERDINERS">
            <summary>
            Enum DISCOVERDINERS for "DISCOVER_DINERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CardBrand.JCB">
            <summary>
            Enum JCB for "JCB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CardBrand.CHINAUNIONPAY">
            <summary>
            Enum CHINAUNIONPAY for "CHINA_UNIONPAY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CardBrand.SQUAREGIFTCARD">
            <summary>
            Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogCategory">
            <summary>
            A category to which an [CatalogItem](#type-catalogitem) belongs in the Catalog object model.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogCategory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogCategory" /> class.
            </summary>
            <param name="Name">The category&#39;s name. Searchable. This field has max length of 255 Unicode code points..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogCategory.Name">
            <summary>
            The category&#39;s name. Searchable. This field has max length of 255 Unicode code points.
            </summary>
            <value>The category&#39;s name. Searchable. This field has max length of 255 Unicode code points.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogCategory.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogCategory.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogCategory.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogCategory.Equals(Square.Connect.Model.CatalogCategory)">
            <summary>
            Returns true if CatalogCategory instances are equal
            </summary>
            <param name="other">Instance of CatalogCategory to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogCategory.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogDiscount">
            <summary>
            A discount in the Catalog object model.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum">
            <summary>
            Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for possible values
            </summary>
            <value>Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum.FIXEDPERCENTAGE">
            <summary>
            Enum FIXEDPERCENTAGE for "FIXED_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum.FIXEDAMOUNT">
            <summary>
            Enum FIXEDAMOUNT for "FIXED_AMOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum.VARIABLEPERCENTAGE">
            <summary>
            Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum.VARIABLEAMOUNT">
            <summary>
            Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.DiscountType">
            <summary>
            Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for possible values
            </summary>
            <value>Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.#ctor(System.String,System.Nullable{Square.Connect.Model.CatalogDiscount.DiscountTypeEnum},System.String,Square.Connect.Model.Money,System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogDiscount" /> class.
            </summary>
            <param name="Name">The discount&#39;s name. Searchable. This field has max length of 255 Unicode code points..</param>
            <param name="DiscountType">Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for possible values.</param>
            <param name="Percentage">The percentage of the discount as a string representation of a decimal number, using a &#x60;.&#x60; as the decimal separator and without a &#x60;%&#x60; sign. A value of &#x60;7.5&#x60; corresponds to &#x60;7.5%&#x60;. Specify a percentage of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_PERCENTAGE&#x60;.  Do not include this field for amount-based or variable discounts..</param>
            <param name="AmountMoney">The amount of the discount. Specify an amount of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_AMOUNT&#x60;.  Do not include this field for percentage-based or variable discounts..</param>
            <param name="PinRequired">Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app..</param>
            <param name="LabelColor">The color of the discount&#39;s display label in the Square Point of Sale app. This must be a valid hex color code..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.Name">
            <summary>
            The discount&#39;s name. Searchable. This field has max length of 255 Unicode code points.
            </summary>
            <value>The discount&#39;s name. Searchable. This field has max length of 255 Unicode code points.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.Percentage">
            <summary>
            The percentage of the discount as a string representation of a decimal number, using a &#x60;.&#x60; as the decimal separator and without a &#x60;%&#x60; sign. A value of &#x60;7.5&#x60; corresponds to &#x60;7.5%&#x60;. Specify a percentage of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_PERCENTAGE&#x60;.  Do not include this field for amount-based or variable discounts.
            </summary>
            <value>The percentage of the discount as a string representation of a decimal number, using a &#x60;.&#x60; as the decimal separator and without a &#x60;%&#x60; sign. A value of &#x60;7.5&#x60; corresponds to &#x60;7.5%&#x60;. Specify a percentage of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_PERCENTAGE&#x60;.  Do not include this field for amount-based or variable discounts.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.AmountMoney">
            <summary>
            The amount of the discount. Specify an amount of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_AMOUNT&#x60;.  Do not include this field for percentage-based or variable discounts.
            </summary>
            <value>The amount of the discount. Specify an amount of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_AMOUNT&#x60;.  Do not include this field for percentage-based or variable discounts.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.PinRequired">
            <summary>
            Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.
            </summary>
            <value>Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.LabelColor">
            <summary>
            The color of the discount&#39;s display label in the Square Point of Sale app. This must be a valid hex color code.
            </summary>
            <value>The color of the discount&#39;s display label in the Square Point of Sale app. This must be a valid hex color code.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.Equals(Square.Connect.Model.CatalogDiscount)">
            <summary>
            Returns true if CatalogDiscount instances are equal
            </summary>
            <param name="other">Instance of CatalogDiscount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogDiscountType">
            <summary>
            How to apply a [CatalogDiscount](#type-catalogdiscount) to a [CatalogItem](#type-catalogitem).
            </summary>
            <value>How to apply a [CatalogDiscount](#type-catalogdiscount) to a [CatalogItem](#type-catalogitem).</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogDiscountType.FIXEDPERCENTAGE">
            <summary>
            Enum FIXEDPERCENTAGE for "FIXED_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogDiscountType.FIXEDAMOUNT">
            <summary>
            Enum FIXEDAMOUNT for "FIXED_AMOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogDiscountType.VARIABLEPERCENTAGE">
            <summary>
            Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogDiscountType.VARIABLEAMOUNT">
            <summary>
            Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogIdMapping">
            <summary>
            A mapping between a client-supplied temporary ID and a permanent server ID.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogIdMapping" /> class.
            </summary>
            <param name="ClientObjectId">The client-supplied, temporary &#x60;#&#x60;-prefixed ID for a new [CatalogObject](#type-catalogobject)..</param>
            <param name="ObjectId">The permanent ID for the [CatalogObject](#type-catalogobject) created by the server..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogIdMapping.ClientObjectId">
            <summary>
            The client-supplied, temporary &#x60;#&#x60;-prefixed ID for a new [CatalogObject](#type-catalogobject).
            </summary>
            <value>The client-supplied, temporary &#x60;#&#x60;-prefixed ID for a new [CatalogObject](#type-catalogobject).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogIdMapping.ObjectId">
            <summary>
            The permanent ID for the [CatalogObject](#type-catalogobject) created by the server.
            </summary>
            <value>The permanent ID for the [CatalogObject](#type-catalogobject) created by the server.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.Equals(Square.Connect.Model.CatalogIdMapping)">
            <summary>
            Returns true if CatalogIdMapping instances are equal
            </summary>
            <param name="other">Instance of CatalogIdMapping to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogImage">
            <summary>
            An image file to use in Square catalogs. Can be associated with catalog items, item variations, and categories.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogImage.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogImage" /> class.
            </summary>
            <param name="Name">The internal name of this image. Identifies this image in calls to the Connect APIs..</param>
            <param name="Url">The URL of this image. Generated by Square after an image is uploaded to the CreateCatalogImage endpoint..</param>
            <param name="Caption">A caption that describes what is shown in the image. Displayed in the Square Online Store..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogImage.Name">
            <summary>
            The internal name of this image. Identifies this image in calls to the Connect APIs.
            </summary>
            <value>The internal name of this image. Identifies this image in calls to the Connect APIs.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogImage.Url">
            <summary>
            The URL of this image. Generated by Square after an image is uploaded to the CreateCatalogImage endpoint.
            </summary>
            <value>The URL of this image. Generated by Square after an image is uploaded to the CreateCatalogImage endpoint.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogImage.Caption">
            <summary>
            A caption that describes what is shown in the image. Displayed in the Square Online Store.
            </summary>
            <value>A caption that describes what is shown in the image. Displayed in the Square Online Store.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogImage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogImage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogImage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogImage.Equals(Square.Connect.Model.CatalogImage)">
            <summary>
            Returns true if CatalogImage instances are equal
            </summary>
            <param name="other">Instance of CatalogImage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogImage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogInfoRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogInfoRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.Equals(Square.Connect.Model.CatalogInfoRequest)">
            <summary>
            Returns true if CatalogInfoRequest instances are equal
            </summary>
            <param name="other">Instance of CatalogInfoRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogInfoResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.CatalogInfoResponseLimits,Square.Connect.Model.StandardUnitDescriptionGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogInfoResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="Limits">.</param>
            <param name="StandardUnitDescriptionGroup">Names and abbreviations for standard units..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponse.Limits">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponse.StandardUnitDescriptionGroup">
            <summary>
            Names and abbreviations for standard units.
            </summary>
            <value>Names and abbreviations for standard units.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.Equals(Square.Connect.Model.CatalogInfoResponse)">
            <summary>
            Returns true if CatalogInfoResponse instances are equal
            </summary>
            <param name="other">Instance of CatalogInfoResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogInfoResponseLimits">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogInfoResponseLimits" /> class.
            </summary>
            <param name="BatchUpsertMaxObjectsPerBatch">The maximum number of objects that may appear within a single batch in a &#x60;/v2/catalog/batch-upsert&#x60; request..</param>
            <param name="BatchUpsertMaxTotalObjects">The maximum number of objects that may appear across all batches in a &#x60;/v2/catalog/batch-upsert&#x60; request..</param>
            <param name="BatchRetrieveMaxObjectIds">The maximum number of object IDs that may appear in a &#x60;/v2/catalog/batch-retrieve&#x60; request..</param>
            <param name="SearchMaxPageLimit">The maximum number of results that may be returned in a page of a &#x60;/v2/catalog/search&#x60; response..</param>
            <param name="BatchDeleteMaxObjectIds">The maximum number of object IDs that may be included in a single &#x60;/v2/catalog/batch-delete&#x60; request..</param>
            <param name="UpdateItemTaxesMaxItemIds">The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request..</param>
            <param name="UpdateItemTaxesMaxTaxesToEnable">The maximum number of tax IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request..</param>
            <param name="UpdateItemTaxesMaxTaxesToDisable">The maximum number of tax IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request..</param>
            <param name="UpdateItemModifierListsMaxItemIds">The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request..</param>
            <param name="UpdateItemModifierListsMaxModifierListsToEnable">The maximum number of modifier list IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request..</param>
            <param name="UpdateItemModifierListsMaxModifierListsToDisable">The maximum number of modifier list IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.BatchUpsertMaxObjectsPerBatch">
            <summary>
            The maximum number of objects that may appear within a single batch in a &#x60;/v2/catalog/batch-upsert&#x60; request.
            </summary>
            <value>The maximum number of objects that may appear within a single batch in a &#x60;/v2/catalog/batch-upsert&#x60; request.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.BatchUpsertMaxTotalObjects">
            <summary>
            The maximum number of objects that may appear across all batches in a &#x60;/v2/catalog/batch-upsert&#x60; request.
            </summary>
            <value>The maximum number of objects that may appear across all batches in a &#x60;/v2/catalog/batch-upsert&#x60; request.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.BatchRetrieveMaxObjectIds">
            <summary>
            The maximum number of object IDs that may appear in a &#x60;/v2/catalog/batch-retrieve&#x60; request.
            </summary>
            <value>The maximum number of object IDs that may appear in a &#x60;/v2/catalog/batch-retrieve&#x60; request.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.SearchMaxPageLimit">
            <summary>
            The maximum number of results that may be returned in a page of a &#x60;/v2/catalog/search&#x60; response.
            </summary>
            <value>The maximum number of results that may be returned in a page of a &#x60;/v2/catalog/search&#x60; response.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.BatchDeleteMaxObjectIds">
            <summary>
            The maximum number of object IDs that may be included in a single &#x60;/v2/catalog/batch-delete&#x60; request.
            </summary>
            <value>The maximum number of object IDs that may be included in a single &#x60;/v2/catalog/batch-delete&#x60; request.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemTaxesMaxItemIds">
            <summary>
            The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.
            </summary>
            <value>The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemTaxesMaxTaxesToEnable">
            <summary>
            The maximum number of tax IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.
            </summary>
            <value>The maximum number of tax IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemTaxesMaxTaxesToDisable">
            <summary>
            The maximum number of tax IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.
            </summary>
            <value>The maximum number of tax IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemModifierListsMaxItemIds">
            <summary>
            The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.
            </summary>
            <value>The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemModifierListsMaxModifierListsToEnable">
            <summary>
            The maximum number of modifier list IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.
            </summary>
            <value>The maximum number of modifier list IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemModifierListsMaxModifierListsToDisable">
            <summary>
            The maximum number of modifier list IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.
            </summary>
            <value>The maximum number of modifier list IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.Equals(Square.Connect.Model.CatalogInfoResponseLimits)">
            <summary>
            Returns true if CatalogInfoResponseLimits instances are equal
            </summary>
            <param name="other">Instance of CatalogInfoResponseLimits to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogItem">
            <summary>
            An item (i.e., product family) in the Catalog object model.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogItem.ProductTypeEnum">
            <summary>
            The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values
            </summary>
            <value>The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.REGULAR">
            <summary>
            Enum REGULAR for "REGULAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.GIFTCARD">
            <summary>
            Enum GIFTCARD for "GIFT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.APPOINTMENTSSERVICE">
            <summary>
            Enum APPOINTMENTSSERVICE for "APPOINTMENTS_SERVICE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.RETAILITEM">
            <summary>
            Enum RETAILITEM for "RETAIL_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.RESTAURANTITEM">
            <summary>
            Enum RESTAURANTITEM for "RESTAURANT_ITEM"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.ProductType">
            <summary>
            The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values
            </summary>
            <value>The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogItem.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Square.Connect.Model.CatalogItemModifierListInfo},System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogObject},System.Nullable{Square.Connect.Model.CatalogItem.ProductTypeEnum},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogItem" /> class.
            </summary>
            <param name="Name">The item&#39;s name. Searchable. This field must not be empty. This field has max length of 512 Unicode code points..</param>
            <param name="Description">The item&#39;s description. Searchable. This field has max length of 4096 Unicode code points..</param>
            <param name="Abbreviation">The text of the item&#39;s display label in the Square Point of Sale app. Only up to the first five characters of the string are used. Searchable. This field has max length of 24 Unicode code points..</param>
            <param name="LabelColor">The color of the item&#39;s display label in the Square Point of Sale app. This must be a valid hex color code..</param>
            <param name="AvailableOnline">If &#x60;true&#x60;, the item can be added to shipping orders from the merchant&#39;s online store..</param>
            <param name="AvailableForPickup">If &#x60;true&#x60;, the item can be added to pickup orders from the merchant&#39;s online store..</param>
            <param name="AvailableElectronically">If &#x60;true&#x60;, the item can be added to electronically fulfilled orders from the merchant&#39;s online store..</param>
            <param name="CategoryId">The ID of the item&#39;s category, if any..</param>
            <param name="TaxIds">A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. [CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using &#x60;UpdateItemTaxes&#x60;..</param>
            <param name="ModifierListInfo">A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s may also be added to or deleted from an item using &#x60;UpdateItemModifierLists&#x60;..</param>
            <param name="ImageUrl">__Deprecated__. The URL of an image representing this item. Deprecated in favor of &#x60;image_id&#x60; in [&#x60;CatalogObject&#x60;](#type-catalogobject)..</param>
            <param name="Variations">A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item.  Maximum: 250 item variations.</param>
            <param name="ProductType">The product type of the item. May not be changed once an item has been created.  Only items of product type &#x60;REGULAR&#x60; may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values.</param>
            <param name="SkipModifierScreen">If &#x60;false&#x60;, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)&#39;s details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s before adding the item to the cart.  This is the default behavior.  If &#x60;true&#x60;, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item&#39;s details.  Third-party clients are encouraged to implement similar behaviors..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.Name">
            <summary>
            The item&#39;s name. Searchable. This field must not be empty. This field has max length of 512 Unicode code points.
            </summary>
            <value>The item&#39;s name. Searchable. This field must not be empty. This field has max length of 512 Unicode code points.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.Description">
            <summary>
            The item&#39;s description. Searchable. This field has max length of 4096 Unicode code points.
            </summary>
            <value>The item&#39;s description. Searchable. This field has max length of 4096 Unicode code points.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.Abbreviation">
            <summary>
            The text of the item&#39;s display label in the Square Point of Sale app. Only up to the first five characters of the string are used. Searchable. This field has max length of 24 Unicode code points.
            </summary>
            <value>The text of the item&#39;s display label in the Square Point of Sale app. Only up to the first five characters of the string are used. Searchable. This field has max length of 24 Unicode code points.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.LabelColor">
            <summary>
            The color of the item&#39;s display label in the Square Point of Sale app. This must be a valid hex color code.
            </summary>
            <value>The color of the item&#39;s display label in the Square Point of Sale app. This must be a valid hex color code.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.AvailableOnline">
            <summary>
            If &#x60;true&#x60;, the item can be added to shipping orders from the merchant&#39;s online store.
            </summary>
            <value>If &#x60;true&#x60;, the item can be added to shipping orders from the merchant&#39;s online store.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.AvailableForPickup">
            <summary>
            If &#x60;true&#x60;, the item can be added to pickup orders from the merchant&#39;s online store.
            </summary>
            <value>If &#x60;true&#x60;, the item can be added to pickup orders from the merchant&#39;s online store.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.AvailableElectronically">
            <summary>
            If &#x60;true&#x60;, the item can be added to electronically fulfilled orders from the merchant&#39;s online store.
            </summary>
            <value>If &#x60;true&#x60;, the item can be added to electronically fulfilled orders from the merchant&#39;s online store.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.CategoryId">
            <summary>
            The ID of the item&#39;s category, if any.
            </summary>
            <value>The ID of the item&#39;s category, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.TaxIds">
            <summary>
            A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. [CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using &#x60;UpdateItemTaxes&#x60;.
            </summary>
            <value>A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. [CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using &#x60;UpdateItemTaxes&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.ModifierListInfo">
            <summary>
            A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s may also be added to or deleted from an item using &#x60;UpdateItemModifierLists&#x60;.
            </summary>
            <value>A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s may also be added to or deleted from an item using &#x60;UpdateItemModifierLists&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.ImageUrl">
            <summary>
            __Deprecated__. The URL of an image representing this item. Deprecated in favor of &#x60;image_id&#x60; in [&#x60;CatalogObject&#x60;](#type-catalogobject).
            </summary>
            <value>__Deprecated__. The URL of an image representing this item. Deprecated in favor of &#x60;image_id&#x60; in [&#x60;CatalogObject&#x60;](#type-catalogobject).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.Variations">
            <summary>
            A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item.  Maximum: 250 item variations
            </summary>
            <value>A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item.  Maximum: 250 item variations</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItem.SkipModifierScreen">
            <summary>
            If &#x60;false&#x60;, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)&#39;s details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s before adding the item to the cart.  This is the default behavior.  If &#x60;true&#x60;, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item&#39;s details.  Third-party clients are encouraged to implement similar behaviors.
            </summary>
            <value>If &#x60;false&#x60;, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)&#39;s details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s before adding the item to the cart.  This is the default behavior.  If &#x60;true&#x60;, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item&#39;s details.  Third-party clients are encouraged to implement similar behaviors.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItem.Equals(Square.Connect.Model.CatalogItem)">
            <summary>
            Returns true if CatalogItem instances are equal
            </summary>
            <param name="other">Instance of CatalogItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogItemModifierListInfo">
            <summary>
            Controls the properties of a [CatalogModifierList](#type-catalogmodifierlist) as it applies to this [CatalogItem](#type-catalogitem).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogItemModifierListInfo" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.#ctor(System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogModifierOverride},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogItemModifierListInfo" /> class.
            </summary>
            <param name="ModifierListId">The ID of the [CatalogModifierList](#type-catalogmodifierlist) controlled by this [CatalogModifierListInfo](#type-catalogmodifierlistinfo). (required).</param>
            <param name="ModifierOverrides">A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given [CatalogModifier](#type-catalogmodifier) is enabled by default..</param>
            <param name="MinSelectedModifiers">If zero or larger, the smallest number of [CatalogModifier](#type-catalogmodifier)s that must be selected from this [CatalogModifierList](#type-catalogmodifierlist)..</param>
            <param name="MaxSelectedModifiers">If zero or larger, the largest number of [CatalogModifier](#type-catalogmodifier)s that can be selected from this [CatalogModifierList](#type-catalogmodifierlist)..</param>
            <param name="Enabled">If &#x60;true&#x60;, enable this [CatalogModifierList](#type-catalogmodifierlist)..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.ModifierListId">
            <summary>
            The ID of the [CatalogModifierList](#type-catalogmodifierlist) controlled by this [CatalogModifierListInfo](#type-catalogmodifierlistinfo).
            </summary>
            <value>The ID of the [CatalogModifierList](#type-catalogmodifierlist) controlled by this [CatalogModifierListInfo](#type-catalogmodifierlistinfo).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.ModifierOverrides">
            <summary>
            A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given [CatalogModifier](#type-catalogmodifier) is enabled by default.
            </summary>
            <value>A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given [CatalogModifier](#type-catalogmodifier) is enabled by default.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.MinSelectedModifiers">
            <summary>
            If zero or larger, the smallest number of [CatalogModifier](#type-catalogmodifier)s that must be selected from this [CatalogModifierList](#type-catalogmodifierlist).
            </summary>
            <value>If zero or larger, the smallest number of [CatalogModifier](#type-catalogmodifier)s that must be selected from this [CatalogModifierList](#type-catalogmodifierlist).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.MaxSelectedModifiers">
            <summary>
            If zero or larger, the largest number of [CatalogModifier](#type-catalogmodifier)s that can be selected from this [CatalogModifierList](#type-catalogmodifierlist).
            </summary>
            <value>If zero or larger, the largest number of [CatalogModifier](#type-catalogmodifier)s that can be selected from this [CatalogModifierList](#type-catalogmodifierlist).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.Enabled">
            <summary>
            If &#x60;true&#x60;, enable this [CatalogModifierList](#type-catalogmodifierlist).
            </summary>
            <value>If &#x60;true&#x60;, enable this [CatalogModifierList](#type-catalogmodifierlist).</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.Equals(Square.Connect.Model.CatalogItemModifierListInfo)">
            <summary>
            Returns true if CatalogItemModifierListInfo instances are equal
            </summary>
            <param name="other">Instance of CatalogItemModifierListInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogItemProductType">
            <summary>
            The type of a [CatalogItem](#type-catalogitem). Connect V2 only allows the creation of `REGULAR` items.
            </summary>
            <value>The type of a [CatalogItem](#type-catalogitem). Connect V2 only allows the creation of `REGULAR` items.</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.REGULAR">
            <summary>
            Enum REGULAR for "REGULAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.GIFTCARD">
            <summary>
            Enum GIFTCARD for "GIFT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.APPOINTMENTSSERVICE">
            <summary>
            Enum APPOINTMENTSSERVICE for "APPOINTMENTS_SERVICE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.RETAILITEM">
            <summary>
            Enum RETAILITEM for "RETAIL_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.RESTAURANTITEM">
            <summary>
            Enum RESTAURANTITEM for "RESTAURANT_ITEM"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogItemVariation">
            <summary>
            An item variation (i.e., product) in the Catalog object model. Each item may have a maximum of 250 item variations.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogItemVariation.PricingTypeEnum">
            <summary>
            Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for possible values
            </summary>
            <value>Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogItemVariation.PricingTypeEnum.FIXEDPRICING">
            <summary>
            Enum FIXEDPRICING for "FIXED_PRICING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItemVariation.PricingTypeEnum.VARIABLEPRICING">
            <summary>
            Enum VARIABLEPRICING for "VARIABLE_PRICING"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogItemVariation.InventoryAlertTypeEnum">
            <summary>
            Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values
            </summary>
            <value>Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogItemVariation.InventoryAlertTypeEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogItemVariation.InventoryAlertTypeEnum.LOWQUANTITY">
            <summary>
            Enum LOWQUANTITY for "LOW_QUANTITY"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.PricingType">
            <summary>
            Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for possible values
            </summary>
            <value>Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.InventoryAlertType">
            <summary>
            Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values
            </summary>
            <value>Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.CatalogItemVariation.PricingTypeEnum},Square.Connect.Model.Money,System.Collections.Generic.List{Square.Connect.Model.ItemVariationLocationOverrides},System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.CatalogItemVariation.InventoryAlertTypeEnum},System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogItemVariation" /> class.
            </summary>
            <param name="ItemId">The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable..</param>
            <param name="Name">The item variation&#39;s name. Searchable. This field has max length of 255 Unicode code points..</param>
            <param name="Sku">The item variation&#39;s SKU, if any. Searchable..</param>
            <param name="Upc">The item variation&#39;s UPC, if any. Searchable in the Connect API. This field is only exposed in the Connect API. It is not exposed in Square&#39;s Dashboard, Square Point of Sale app or Retail Point of Sale app..</param>
            <param name="Ordinal">The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent [CatalogItem](#type-catalogitem) is set according to the item variations&#39;s position. On reads, the value is not guaranteed to be sequential or unique..</param>
            <param name="PricingType">Indicates whether the item variation&#39;s price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for possible values.</param>
            <param name="PriceMoney">The item variation&#39;s price, if fixed pricing is used..</param>
            <param name="LocationOverrides">Per-[location](#type-location) price and inventory overrides..</param>
            <param name="TrackInventory">If &#x60;true&#x60;, inventory tracking is active for the variation..</param>
            <param name="InventoryAlertType">Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its &#x60;inventory_alert_threshold&#x60;. See [InventoryAlertType](#type-inventoryalerttype) for possible values.</param>
            <param name="InventoryAlertThreshold">If the inventory quantity for the variation is less than or equal to this value and &#x60;inventory_alert_type&#x60; is &#x60;LOW_QUANTITY&#x60;, the variation displays an alert in the merchant dashboard.  This value is always an integer..</param>
            <param name="UserData">Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable..</param>
            <param name="ServiceDuration">If the [CatalogItem](#type-catalogitem) that owns this item variation is of type &#x60;APPOINTMENTS_SERVICE&#x60;, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value &#x60;1800000&#x60;, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second)..</param>
            <param name="CatalogMeasurementUnitId">Represents the unit used to measure a [CatalogItemVariation](#type-catalogitemvariation) and specifies the precision for decimal quantities..</param>
            <param name="MeasurementUnitId">ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity sold of this item variation. If left unset, the item will be sold in whole quantities..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.ItemId">
            <summary>
            The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable.
            </summary>
            <value>The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.Name">
            <summary>
            The item variation&#39;s name. Searchable. This field has max length of 255 Unicode code points.
            </summary>
            <value>The item variation&#39;s name. Searchable. This field has max length of 255 Unicode code points.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.Sku">
            <summary>
            The item variation&#39;s SKU, if any. Searchable.
            </summary>
            <value>The item variation&#39;s SKU, if any. Searchable.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.Upc">
            <summary>
            The item variation&#39;s UPC, if any. Searchable in the Connect API. This field is only exposed in the Connect API. It is not exposed in Square&#39;s Dashboard, Square Point of Sale app or Retail Point of Sale app.
            </summary>
            <value>The item variation&#39;s UPC, if any. Searchable in the Connect API. This field is only exposed in the Connect API. It is not exposed in Square&#39;s Dashboard, Square Point of Sale app or Retail Point of Sale app.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.Ordinal">
            <summary>
            The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent [CatalogItem](#type-catalogitem) is set according to the item variations&#39;s position. On reads, the value is not guaranteed to be sequential or unique.
            </summary>
            <value>The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent [CatalogItem](#type-catalogitem) is set according to the item variations&#39;s position. On reads, the value is not guaranteed to be sequential or unique.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.PriceMoney">
            <summary>
            The item variation&#39;s price, if fixed pricing is used.
            </summary>
            <value>The item variation&#39;s price, if fixed pricing is used.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.LocationOverrides">
            <summary>
            Per-[location](#type-location) price and inventory overrides.
            </summary>
            <value>Per-[location](#type-location) price and inventory overrides.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.TrackInventory">
            <summary>
            If &#x60;true&#x60;, inventory tracking is active for the variation.
            </summary>
            <value>If &#x60;true&#x60;, inventory tracking is active for the variation.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.InventoryAlertThreshold">
            <summary>
            If the inventory quantity for the variation is less than or equal to this value and &#x60;inventory_alert_type&#x60; is &#x60;LOW_QUANTITY&#x60;, the variation displays an alert in the merchant dashboard.  This value is always an integer.
            </summary>
            <value>If the inventory quantity for the variation is less than or equal to this value and &#x60;inventory_alert_type&#x60; is &#x60;LOW_QUANTITY&#x60;, the variation displays an alert in the merchant dashboard.  This value is always an integer.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.UserData">
            <summary>
            Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable.
            </summary>
            <value>Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.ServiceDuration">
            <summary>
            If the [CatalogItem](#type-catalogitem) that owns this item variation is of type &#x60;APPOINTMENTS_SERVICE&#x60;, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value &#x60;1800000&#x60;, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
            </summary>
            <value>If the [CatalogItem](#type-catalogitem) that owns this item variation is of type &#x60;APPOINTMENTS_SERVICE&#x60;, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value &#x60;1800000&#x60;, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.CatalogMeasurementUnitId">
            <summary>
            Represents the unit used to measure a [CatalogItemVariation](#type-catalogitemvariation) and specifies the precision for decimal quantities.
            </summary>
            <value>Represents the unit used to measure a [CatalogItemVariation](#type-catalogitemvariation) and specifies the precision for decimal quantities.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.MeasurementUnitId">
            <summary>
            ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity sold of this item variation. If left unset, the item will be sold in whole quantities.
            </summary>
            <value>ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity sold of this item variation. If left unset, the item will be sold in whole quantities.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.Equals(Square.Connect.Model.CatalogItemVariation)">
            <summary>
            Returns true if CatalogItemVariation instances are equal
            </summary>
            <param name="other">Instance of CatalogItemVariation to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogMeasurementUnit">
            <summary>
            Represents the unit used to measure a [CatalogItemVariation](#type-catalogitemvariation) and specifies the precision for decimal quantities.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogMeasurementUnit.#ctor(Square.Connect.Model.MeasurementUnit,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogMeasurementUnit" /> class.
            </summary>
            <param name="MeasurementUnit">Indicates the unit used to measure the quantity of a catalog item variation..</param>
            <param name="Precision"> Represents the maximum number of positions allowed after the decimal in quantities measured with this unit. For example, if the precision is 2, then an itemization’s quantity can be 0.01, 0.12, etc.  Min: 0  Max: 5  Default: 3.</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogMeasurementUnit.MeasurementUnit">
            <summary>
            Indicates the unit used to measure the quantity of a catalog item variation.
            </summary>
            <value>Indicates the unit used to measure the quantity of a catalog item variation.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogMeasurementUnit.Precision">
            <summary>
             Represents the maximum number of positions allowed after the decimal in quantities measured with this unit. For example, if the precision is 2, then an itemization’s quantity can be 0.01, 0.12, etc.  Min: 0  Max: 5  Default: 3
            </summary>
            <value> Represents the maximum number of positions allowed after the decimal in quantities measured with this unit. For example, if the precision is 2, then an itemization’s quantity can be 0.01, 0.12, etc.  Min: 0  Max: 5  Default: 3</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogMeasurementUnit.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogMeasurementUnit.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogMeasurementUnit.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogMeasurementUnit.Equals(Square.Connect.Model.CatalogMeasurementUnit)">
            <summary>
            Returns true if CatalogMeasurementUnit instances are equal
            </summary>
            <param name="other">Instance of CatalogMeasurementUnit to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogMeasurementUnit.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogModifier">
            <summary>
            A modifier in the Catalog object model.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifier.#ctor(System.String,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifier" /> class.
            </summary>
            <param name="Name">The modifier&#39;s name. Searchable. This field has max length of 255 Unicode code points..</param>
            <param name="PriceMoney">The modifier&#39;s price..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogModifier.Name">
            <summary>
            The modifier&#39;s name. Searchable. This field has max length of 255 Unicode code points.
            </summary>
            <value>The modifier&#39;s name. Searchable. This field has max length of 255 Unicode code points.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogModifier.PriceMoney">
            <summary>
            The modifier&#39;s price.
            </summary>
            <value>The modifier&#39;s price.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifier.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifier.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifier.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifier.Equals(Square.Connect.Model.CatalogModifier)">
            <summary>
            Returns true if CatalogModifier instances are equal
            </summary>
            <param name="other">Instance of CatalogModifier to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifier.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogModifierList">
            <summary>
            A modifier list in the Catalog object model. A [CatalogModifierList](#type-catalogmodifierlist) contains [Modifier](#type-catalogmodifier)s that can be applied to a [CatalogItem](#type-catalogitem) at the time of sale.  For example, a modifier list \&quot;Condiments\&quot; that would apply to a \&quot;Hot Dog\&quot; [CatalogItem](#type-catalogitem) might contain [CatalogModifier](#type-catalogmodifier)s \&quot;Ketchup\&quot;, \&quot;Mustard\&quot;, and \&quot;Relish\&quot;. The &#x60;selection_type&#x60; field specifies whether or not multiple selections from the modifier list are allowed.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogModifierList.SelectionTypeEnum">
            <summary>
            Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values
            </summary>
            <value>Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogModifierList.SelectionTypeEnum.SINGLE">
            <summary>
            Enum SINGLE for "SINGLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogModifierList.SelectionTypeEnum.MULTIPLE">
            <summary>
            Enum MULTIPLE for "MULTIPLE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CatalogModifierList.SelectionType">
            <summary>
            Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values
            </summary>
            <value>Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.#ctor(System.String,System.Nullable{Square.Connect.Model.CatalogModifierList.SelectionTypeEnum},System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifierList" /> class.
            </summary>
            <param name="Name">The [CatalogModifierList](#type-catalogmodifierlist)&#39;s name. Searchable. This field has max length of 255 Unicode code points..</param>
            <param name="SelectionType">Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values.</param>
            <param name="Modifiers">The options included in the [CatalogModifierList](#type-catalogmodifierlist). You must include at least one [CatalogModifier](#type-catalogmodifier). Each [CatalogObject](#type-catalogobject) must have type &#x60;MODIFIER&#x60; and contain [CatalogModifier](#type-catalogmodifier) data..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogModifierList.Name">
            <summary>
            The [CatalogModifierList](#type-catalogmodifierlist)&#39;s name. Searchable. This field has max length of 255 Unicode code points.
            </summary>
            <value>The [CatalogModifierList](#type-catalogmodifierlist)&#39;s name. Searchable. This field has max length of 255 Unicode code points.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogModifierList.Modifiers">
            <summary>
            The options included in the [CatalogModifierList](#type-catalogmodifierlist). You must include at least one [CatalogModifier](#type-catalogmodifier). Each [CatalogObject](#type-catalogobject) must have type &#x60;MODIFIER&#x60; and contain [CatalogModifier](#type-catalogmodifier) data.
            </summary>
            <value>The options included in the [CatalogModifierList](#type-catalogmodifierlist). You must include at least one [CatalogModifier](#type-catalogmodifier). Each [CatalogObject](#type-catalogobject) must have type &#x60;MODIFIER&#x60; and contain [CatalogModifier](#type-catalogmodifier) data.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.Equals(Square.Connect.Model.CatalogModifierList)">
            <summary>
            Returns true if CatalogModifierList instances are equal
            </summary>
            <param name="other">Instance of CatalogModifierList to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogModifierListSelectionType">
            <summary>
            Indicates whether a [CatalogModifierList](#type-catalogmodifierlist) supports multiple selections.
            </summary>
            <value>Indicates whether a [CatalogModifierList](#type-catalogmodifierlist) supports multiple selections.</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogModifierListSelectionType.SINGLE">
            <summary>
            Enum SINGLE for "SINGLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogModifierListSelectionType.MULTIPLE">
            <summary>
            Enum MULTIPLE for "MULTIPLE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogModifierOverride">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifierOverride" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifierOverride" /> class.
            </summary>
            <param name="ModifierId">The ID of the [CatalogModifier](#type-catalogmodifier) whose default behavior is being overridden. (required).</param>
            <param name="OnByDefault">If &#x60;true&#x60;, this [CatalogModifier](#type-catalogmodifier) should be selected by default for this [CatalogItem](#type-catalogitem)..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogModifierOverride.ModifierId">
            <summary>
            The ID of the [CatalogModifier](#type-catalogmodifier) whose default behavior is being overridden.
            </summary>
            <value>The ID of the [CatalogModifier](#type-catalogmodifier) whose default behavior is being overridden.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogModifierOverride.OnByDefault">
            <summary>
            If &#x60;true&#x60;, this [CatalogModifier](#type-catalogmodifier) should be selected by default for this [CatalogItem](#type-catalogitem).
            </summary>
            <value>If &#x60;true&#x60;, this [CatalogModifier](#type-catalogmodifier) should be selected by default for this [CatalogItem](#type-catalogitem).</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.Equals(Square.Connect.Model.CatalogModifierOverride)">
            <summary>
            Returns true if CatalogModifierOverride instances are equal
            </summary>
            <param name="other">Instance of CatalogModifierOverride to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogObject">
            <summary>
            The wrapper object for object types in the Catalog data model. The type of a particular &#x60;CatalogObject&#x60; is determined by the value of &#x60;type&#x60; and only the corresponding data field may be set.  - if type &#x3D; &#x60;ITEM&#x60;, only &#x60;item_data&#x60; will be populated and it will contain a valid [CatalogItem](#type-catalogitem) object. - if type &#x3D; &#x60;ITEM_VARIATION&#x60;, only &#x60;item_variation_data&#x60; will be populated and it will contain a valid [CatalogItemVariation](#type-catalogitemvariation) object. - if type &#x3D; &#x60;MODIFIER&#x60;, only &#x60;modifier_data&#x60; will be populated and it will contain a valid [CatalogModifier](#type-catalogmodifier) object. - if type &#x3D; &#x60;MODIFIER_LIST&#x60;, only &#x60;modifier_list_data&#x60; will be populated and it will contain a valid [CatalogModifierList](#type-catalogmodifierlist) object. - if type &#x3D; &#x60;CATEGORY&#x60;, only &#x60;category_data&#x60; will be populated and it will contain a valid [CatalogCategory](#type-catalogcategory) object. - if type &#x3D; &#x60;DISCOUNT&#x60;, only &#x60;discount_data&#x60; will be populated and it will contain a valid [CatalogDiscount](#type-catalogdiscount) object. - if type &#x3D; &#x60;TAX&#x60;, only &#x60;tax_data&#x60; will be populated and it will contain a valid [CatalogTax](#type-catalogtax) object. - if type &#x3D; &#x60;IMAGE&#x60;, only &#x60;image_data&#x60; will be populated and it will contain a valid [CatalogImage](#type-catalogimage) object.  For a more detailed discussion of the Catalog data model, please see the [Design a Catalog](/catalog-api/design-a-catalog) guide.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogObject.TypeEnum">
            <summary>
            The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below. See [CatalogObjectType](#type-catalogobjecttype) for possible values
            </summary>
            <value>The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below. See [CatalogObjectType](#type-catalogobjecttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.ITEM">
            <summary>
            Enum ITEM for "ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.IMAGE">
            <summary>
            Enum IMAGE for "IMAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.CATEGORY">
            <summary>
            Enum CATEGORY for "CATEGORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.ITEMVARIATION">
            <summary>
            Enum ITEMVARIATION for "ITEM_VARIATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.TAX">
            <summary>
            Enum TAX for "TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.DISCOUNT">
            <summary>
            Enum DISCOUNT for "DISCOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.MODIFIERLIST">
            <summary>
            Enum MODIFIERLIST for "MODIFIER_LIST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.MODIFIER">
            <summary>
            Enum MODIFIER for "MODIFIER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.PRICINGRULE">
            <summary>
            Enum PRICINGRULE for "PRICING_RULE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.PRODUCTSET">
            <summary>
            Enum PRODUCTSET for "PRODUCT_SET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.TIMEPERIOD">
            <summary>
            Enum TIMEPERIOD for "TIME_PERIOD"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.Type">
            <summary>
            The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below. See [CatalogObjectType](#type-catalogobjecttype) for possible values
            </summary>
            <value>The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below. See [CatalogObjectType](#type-catalogobjecttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogObject" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogObject.#ctor(System.Nullable{Square.Connect.Model.CatalogObject.TypeEnum},System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Collections.Generic.List{Square.Connect.Model.CatalogV1Id},System.Nullable{System.Boolean},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,Square.Connect.Model.CatalogItem,Square.Connect.Model.CatalogCategory,Square.Connect.Model.CatalogItemVariation,Square.Connect.Model.CatalogTax,Square.Connect.Model.CatalogDiscount,Square.Connect.Model.CatalogModifierList,Square.Connect.Model.CatalogModifier,Square.Connect.Model.CatalogImage,Square.Connect.Model.CatalogMeasurementUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogObject" /> class.
            </summary>
            <param name="Type">The type of this object. Each object type has expected properties expressed in a structured format within its corresponding &#x60;*_data&#x60; field below. See [CatalogObjectType](#type-catalogobjecttype) for possible values (required).</param>
            <param name="Id">An identifier to reference this object in the catalog. When a new CatalogObject is inserted, the client should set the id to a temporary identifier starting with a &#x60;&#39;#&#39;&#x60; character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references. (required).</param>
            <param name="UpdatedAt">Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., &#x60;\&quot;2016-08-15T23:59:33.123Z\&quot;&#x60; would indicate the UTC time (denoted by &#x60;Z&#x60;) of August 15, 2016 at 23:59:33 and 123 milliseconds..</param>
            <param name="Version">The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting..</param>
            <param name="IsDeleted">If &#x60;true&#x60;, the object has been deleted from the database. Must be &#x60;false&#x60; for new objects being inserted. When deleted, the &#x60;updated_at&#x60; field will equal the deletion time..</param>
            <param name="CatalogV1Ids">The Connect V1 IDs for this object at each [location](#type-location) where it is present, where they differ from the object&#39;s Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs..</param>
            <param name="PresentAtAllLocations">If &#x60;true&#x60;, this object is present at all locations (including future locations), except where specified in the &#x60;absent_at_location_ids&#x60; field. If &#x60;false&#x60;, this object is not present at any locations (including future locations), except where specified in the &#x60;present_at_location_ids&#x60; field. If not specified, defaults to &#x60;true&#x60;..</param>
            <param name="PresentAtLocationIds">A list of locations where the object is present, even if &#x60;present_at_all_locations&#x60; is &#x60;false&#x60;..</param>
            <param name="AbsentAtLocationIds">A list of locations where the object is not present, even if &#x60;present_at_all_locations&#x60; is &#x60;true&#x60;..</param>
            <param name="ImageId">Identifies the &#x60;CatalogImage&#x60; attached to this &#x60;CatalogObject&#x60;..</param>
            <param name="ItemData">Structured data for a [CatalogItem](#type-catalogitem), set for CatalogObjects of type &#x60;ITEM&#x60;..</param>
            <param name="CategoryData">Structured data for a [CatalogCategory](#type-catalogcategory), set for CatalogObjects of type &#x60;CATEGORY&#x60;..</param>
            <param name="ItemVariationData">Structured data for a [CatalogItemVariation](#type-catalogitemvariation), set for CatalogObjects of type &#x60;ITEM_VARIATION&#x60;..</param>
            <param name="TaxData">Structured data for a [CatalogTax](#type-catalogtax), set for CatalogObjects of type &#x60;TAX&#x60;..</param>
            <param name="DiscountData">Structured data for a [CatalogDiscount](#type-catalogdiscount), set for CatalogObjects of type &#x60;DISCOUNT&#x60;..</param>
            <param name="ModifierListData">Structured data for a [CatalogModifierList](#type-catalogmodifierlist), set for CatalogObjects of type &#x60;MODIFIER_LIST&#x60;..</param>
            <param name="ModifierData">Structured data for a [CatalogModifier](#type-catalogmodifier), set for CatalogObjects of type &#x60;MODIFIER&#x60;..</param>
            <param name="ImageData">Structured data for a [CatalogImage](#type-catalogimage), set for CatalogObjects of type &#x60;IMAGE&#x60;..</param>
            <param name="MeasurementUnitData">Structured data for a [CatalogMeasurementUnit](#type-catalogmeasurementunit), set for CatalogObjects of type &#x60;MEASUREMENT_UNIT&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.Id">
            <summary>
            An identifier to reference this object in the catalog. When a new CatalogObject is inserted, the client should set the id to a temporary identifier starting with a &#x60;&#39;#&#39;&#x60; character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.
            </summary>
            <value>An identifier to reference this object in the catalog. When a new CatalogObject is inserted, the client should set the id to a temporary identifier starting with a &#x60;&#39;#&#39;&#x60; character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.UpdatedAt">
            <summary>
            Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., &#x60;\&quot;2016-08-15T23:59:33.123Z\&quot;&#x60; would indicate the UTC time (denoted by &#x60;Z&#x60;) of August 15, 2016 at 23:59:33 and 123 milliseconds.
            </summary>
            <value>Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., &#x60;\&quot;2016-08-15T23:59:33.123Z\&quot;&#x60; would indicate the UTC time (denoted by &#x60;Z&#x60;) of August 15, 2016 at 23:59:33 and 123 milliseconds.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.Version">
            <summary>
            The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.
            </summary>
            <value>The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.IsDeleted">
            <summary>
            If &#x60;true&#x60;, the object has been deleted from the database. Must be &#x60;false&#x60; for new objects being inserted. When deleted, the &#x60;updated_at&#x60; field will equal the deletion time.
            </summary>
            <value>If &#x60;true&#x60;, the object has been deleted from the database. Must be &#x60;false&#x60; for new objects being inserted. When deleted, the &#x60;updated_at&#x60; field will equal the deletion time.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.CatalogV1Ids">
            <summary>
            The Connect V1 IDs for this object at each [location](#type-location) where it is present, where they differ from the object&#39;s Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.
            </summary>
            <value>The Connect V1 IDs for this object at each [location](#type-location) where it is present, where they differ from the object&#39;s Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.PresentAtAllLocations">
            <summary>
            If &#x60;true&#x60;, this object is present at all locations (including future locations), except where specified in the &#x60;absent_at_location_ids&#x60; field. If &#x60;false&#x60;, this object is not present at any locations (including future locations), except where specified in the &#x60;present_at_location_ids&#x60; field. If not specified, defaults to &#x60;true&#x60;.
            </summary>
            <value>If &#x60;true&#x60;, this object is present at all locations (including future locations), except where specified in the &#x60;absent_at_location_ids&#x60; field. If &#x60;false&#x60;, this object is not present at any locations (including future locations), except where specified in the &#x60;present_at_location_ids&#x60; field. If not specified, defaults to &#x60;true&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.PresentAtLocationIds">
            <summary>
            A list of locations where the object is present, even if &#x60;present_at_all_locations&#x60; is &#x60;false&#x60;.
            </summary>
            <value>A list of locations where the object is present, even if &#x60;present_at_all_locations&#x60; is &#x60;false&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.AbsentAtLocationIds">
            <summary>
            A list of locations where the object is not present, even if &#x60;present_at_all_locations&#x60; is &#x60;true&#x60;.
            </summary>
            <value>A list of locations where the object is not present, even if &#x60;present_at_all_locations&#x60; is &#x60;true&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.ImageId">
            <summary>
            Identifies the &#x60;CatalogImage&#x60; attached to this &#x60;CatalogObject&#x60;.
            </summary>
            <value>Identifies the &#x60;CatalogImage&#x60; attached to this &#x60;CatalogObject&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.ItemData">
            <summary>
            Structured data for a [CatalogItem](#type-catalogitem), set for CatalogObjects of type &#x60;ITEM&#x60;.
            </summary>
            <value>Structured data for a [CatalogItem](#type-catalogitem), set for CatalogObjects of type &#x60;ITEM&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.CategoryData">
            <summary>
            Structured data for a [CatalogCategory](#type-catalogcategory), set for CatalogObjects of type &#x60;CATEGORY&#x60;.
            </summary>
            <value>Structured data for a [CatalogCategory](#type-catalogcategory), set for CatalogObjects of type &#x60;CATEGORY&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.ItemVariationData">
            <summary>
            Structured data for a [CatalogItemVariation](#type-catalogitemvariation), set for CatalogObjects of type &#x60;ITEM_VARIATION&#x60;.
            </summary>
            <value>Structured data for a [CatalogItemVariation](#type-catalogitemvariation), set for CatalogObjects of type &#x60;ITEM_VARIATION&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.TaxData">
            <summary>
            Structured data for a [CatalogTax](#type-catalogtax), set for CatalogObjects of type &#x60;TAX&#x60;.
            </summary>
            <value>Structured data for a [CatalogTax](#type-catalogtax), set for CatalogObjects of type &#x60;TAX&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.DiscountData">
            <summary>
            Structured data for a [CatalogDiscount](#type-catalogdiscount), set for CatalogObjects of type &#x60;DISCOUNT&#x60;.
            </summary>
            <value>Structured data for a [CatalogDiscount](#type-catalogdiscount), set for CatalogObjects of type &#x60;DISCOUNT&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.ModifierListData">
            <summary>
            Structured data for a [CatalogModifierList](#type-catalogmodifierlist), set for CatalogObjects of type &#x60;MODIFIER_LIST&#x60;.
            </summary>
            <value>Structured data for a [CatalogModifierList](#type-catalogmodifierlist), set for CatalogObjects of type &#x60;MODIFIER_LIST&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.ModifierData">
            <summary>
            Structured data for a [CatalogModifier](#type-catalogmodifier), set for CatalogObjects of type &#x60;MODIFIER&#x60;.
            </summary>
            <value>Structured data for a [CatalogModifier](#type-catalogmodifier), set for CatalogObjects of type &#x60;MODIFIER&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.ImageData">
            <summary>
            Structured data for a [CatalogImage](#type-catalogimage), set for CatalogObjects of type &#x60;IMAGE&#x60;.
            </summary>
            <value>Structured data for a [CatalogImage](#type-catalogimage), set for CatalogObjects of type &#x60;IMAGE&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogObject.MeasurementUnitData">
            <summary>
            Structured data for a [CatalogMeasurementUnit](#type-catalogmeasurementunit), set for CatalogObjects of type &#x60;MEASUREMENT_UNIT&#x60;.
            </summary>
            <value>Structured data for a [CatalogMeasurementUnit](#type-catalogmeasurementunit), set for CatalogObjects of type &#x60;MEASUREMENT_UNIT&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogObject.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogObject.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogObject.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogObject.Equals(Square.Connect.Model.CatalogObject)">
            <summary>
            Returns true if CatalogObject instances are equal
            </summary>
            <param name="other">Instance of CatalogObject to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogObject.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogObjectBatch">
            <summary>
            A batch of [CatalogObject](#type-catalogobject)s.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.#ctor(System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogObjectBatch" /> class.
            </summary>
            <param name="Objects">A list of [CatalogObject](#type-catalogobject)s belonging to this batch..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogObjectBatch.Objects">
            <summary>
            A list of [CatalogObject](#type-catalogobject)s belonging to this batch.
            </summary>
            <value>A list of [CatalogObject](#type-catalogobject)s belonging to this batch.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.Equals(Square.Connect.Model.CatalogObjectBatch)">
            <summary>
            Returns true if CatalogObjectBatch instances are equal
            </summary>
            <param name="other">Instance of CatalogObjectBatch to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogObjectType">
            <summary>
            Possible kinds of [CatalogObject](#type-catalogobject)s returned from the Catalog, each containing type-specific properties in the `*_data` field corresponding to the object type.
            </summary>
            <value>Possible kinds of [CatalogObject](#type-catalogobject)s returned from the Catalog, each containing type-specific properties in the `*_data` field corresponding to the object type.</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.ITEM">
            <summary>
            Enum ITEM for "ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.IMAGE">
            <summary>
            Enum IMAGE for "IMAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.CATEGORY">
            <summary>
            Enum CATEGORY for "CATEGORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.ITEMVARIATION">
            <summary>
            Enum ITEMVARIATION for "ITEM_VARIATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.TAX">
            <summary>
            Enum TAX for "TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.DISCOUNT">
            <summary>
            Enum DISCOUNT for "DISCOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.MODIFIERLIST">
            <summary>
            Enum MODIFIERLIST for "MODIFIER_LIST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.MODIFIER">
            <summary>
            Enum MODIFIER for "MODIFIER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.PRICINGRULE">
            <summary>
            Enum PRICINGRULE for "PRICING_RULE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.PRODUCTSET">
            <summary>
            Enum PRODUCTSET for "PRODUCT_SET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.TIMEPERIOD">
            <summary>
            Enum TIMEPERIOD for "TIME_PERIOD"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogPricingRule">
            <summary>
            Defines how prices are modified or set for items that match the pricing rule during the active time period.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogPricingRule.StackableEnum">
            <summary>
            Describes how the pricing rule can be combined with other pricing rules. See [Stackable](#type-stackable) for all possible values. See [AggregationStrategy](#type-aggregationstrategy) for possible values
            </summary>
            <value>Describes how the pricing rule can be combined with other pricing rules. See [Stackable](#type-stackable) for all possible values. See [AggregationStrategy](#type-aggregationstrategy) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogPricingRule.StackableEnum.UNKNOWN">
            <summary>
            Enum UNKNOWN for "UNKNOWN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogPricingRule.StackableEnum.BASE">
            <summary>
            Enum BASE for "BASE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogPricingRule.StackableEnum.STACKABLE">
            <summary>
            Enum STACKABLE for "STACKABLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogPricingRule.StackableEnum.EXCLUSIVE">
            <summary>
            Enum EXCLUSIVE for "EXCLUSIVE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.Stackable">
            <summary>
            Describes how the pricing rule can be combined with other pricing rules. See [Stackable](#type-stackable) for all possible values. See [AggregationStrategy](#type-aggregationstrategy) for possible values
            </summary>
            <value>Describes how the pricing rule can be combined with other pricing rules. See [Stackable](#type-stackable) for all possible values. See [AggregationStrategy](#type-aggregationstrategy) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogPricingRule.#ctor(System.String,System.Collections.Generic.List{System.String},Square.Connect.Model.Money,Square.Connect.Model.Money,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.CatalogPricingRule.StackableEnum},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogPricingRule" /> class.
            </summary>
            <param name="Name">User-defined name for the pricing rule. For example, \&quot;Buy one get one free\&quot; or \&quot;10% off\&quot;..</param>
            <param name="TimePeriodIds">Unique ID for the [CatalogTimePeriod](#type-catalogtimeperiod)s when this pricing rule is in effect. If left unset, the pricing rule is always in effect..</param>
            <param name="TotalPriceMoney">The total amount of money to charge for all matched items.  Only one of &#x60;total_price_money&#x60;, &#x60;item_price&#x60;, or &#x60;discount&#x60; can be supplied..</param>
            <param name="ItemPriceMoney">The amount of money to charge for each matched item.  Only one of &#x60;total_price_money&#x60;, &#x60;item_price&#x60;, or &#x60;discount&#x60; can be supplied..</param>
            <param name="DiscountId">Unique ID for the [CatalogDiscount](#type-catalogdiscount) to take off the price of all matched items.  Only one of &#x60;total_price_money&#x60;, &#x60;item_price&#x60;, or &#x60;discount&#x60; can be supplied..</param>
            <param name="MatchProductsId">Unique ID for the [CatalogProductSet](#type-catalogproductset) that will be matched by this rule. A match rule matches within the entire cart..</param>
            <param name="ApplyProductsId">The [CatalogProductSet](#type-catalogproductset) to apply the pricing rule to within the set of matched products specified by &#x60;match_products_id&#x60;. An apply rule can only match once within the set of matched products. If left unset, the pricing rule will be applied to all products within the set of matched products..</param>
            <param name="Stackable">Describes how the pricing rule can be combined with other pricing rules. See [Stackable](#type-stackable) for all possible values. See [AggregationStrategy](#type-aggregationstrategy) for possible values.</param>
            <param name="ExcludeProductsId">Identifies the [CatalogProductSet](#type-catalogproductset) to exclude from this pricing rule. An exclude rule matches within the subset of the cart that fits the match rules (the match set). An exclude rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules..</param>
            <param name="ValidFromDate">Represents the date the Pricing Rule is valid from. Represented in RFC3339 full-date format (YYYY-MM-DD)..</param>
            <param name="ValidFromLocalTime">Represents the local time the pricing rule should be valid from. Time zone is determined by the device running the Point of Sale app.  Represented in RFC3339 partial-time format (HH:MM:SS). Partial seconds will be truncated..</param>
            <param name="ValidUntilDate">Represents the date the pricing rule will become inactive.  Represented in RFC3339 full-date format (YYYY-MM-DD)..</param>
            <param name="ValidUntilLocalTime">Represents the local time at which the pricing rule will become inactive. Time zone is determined by the device running the Point of Sale app.  Represented in RFC3339 partial-time format (HH:MM:SS). Partial seconds will be truncated..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.Name">
            <summary>
            User-defined name for the pricing rule. For example, \&quot;Buy one get one free\&quot; or \&quot;10% off\&quot;.
            </summary>
            <value>User-defined name for the pricing rule. For example, \&quot;Buy one get one free\&quot; or \&quot;10% off\&quot;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.TimePeriodIds">
            <summary>
            Unique ID for the [CatalogTimePeriod](#type-catalogtimeperiod)s when this pricing rule is in effect. If left unset, the pricing rule is always in effect.
            </summary>
            <value>Unique ID for the [CatalogTimePeriod](#type-catalogtimeperiod)s when this pricing rule is in effect. If left unset, the pricing rule is always in effect.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.TotalPriceMoney">
            <summary>
            The total amount of money to charge for all matched items.  Only one of &#x60;total_price_money&#x60;, &#x60;item_price&#x60;, or &#x60;discount&#x60; can be supplied.
            </summary>
            <value>The total amount of money to charge for all matched items.  Only one of &#x60;total_price_money&#x60;, &#x60;item_price&#x60;, or &#x60;discount&#x60; can be supplied.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.ItemPriceMoney">
            <summary>
            The amount of money to charge for each matched item.  Only one of &#x60;total_price_money&#x60;, &#x60;item_price&#x60;, or &#x60;discount&#x60; can be supplied.
            </summary>
            <value>The amount of money to charge for each matched item.  Only one of &#x60;total_price_money&#x60;, &#x60;item_price&#x60;, or &#x60;discount&#x60; can be supplied.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.DiscountId">
            <summary>
            Unique ID for the [CatalogDiscount](#type-catalogdiscount) to take off the price of all matched items.  Only one of &#x60;total_price_money&#x60;, &#x60;item_price&#x60;, or &#x60;discount&#x60; can be supplied.
            </summary>
            <value>Unique ID for the [CatalogDiscount](#type-catalogdiscount) to take off the price of all matched items.  Only one of &#x60;total_price_money&#x60;, &#x60;item_price&#x60;, or &#x60;discount&#x60; can be supplied.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.MatchProductsId">
            <summary>
            Unique ID for the [CatalogProductSet](#type-catalogproductset) that will be matched by this rule. A match rule matches within the entire cart.
            </summary>
            <value>Unique ID for the [CatalogProductSet](#type-catalogproductset) that will be matched by this rule. A match rule matches within the entire cart.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.ApplyProductsId">
            <summary>
            The [CatalogProductSet](#type-catalogproductset) to apply the pricing rule to within the set of matched products specified by &#x60;match_products_id&#x60;. An apply rule can only match once within the set of matched products. If left unset, the pricing rule will be applied to all products within the set of matched products.
            </summary>
            <value>The [CatalogProductSet](#type-catalogproductset) to apply the pricing rule to within the set of matched products specified by &#x60;match_products_id&#x60;. An apply rule can only match once within the set of matched products. If left unset, the pricing rule will be applied to all products within the set of matched products.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.ExcludeProductsId">
            <summary>
            Identifies the [CatalogProductSet](#type-catalogproductset) to exclude from this pricing rule. An exclude rule matches within the subset of the cart that fits the match rules (the match set). An exclude rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.
            </summary>
            <value>Identifies the [CatalogProductSet](#type-catalogproductset) to exclude from this pricing rule. An exclude rule matches within the subset of the cart that fits the match rules (the match set). An exclude rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.ValidFromDate">
            <summary>
            Represents the date the Pricing Rule is valid from. Represented in RFC3339 full-date format (YYYY-MM-DD).
            </summary>
            <value>Represents the date the Pricing Rule is valid from. Represented in RFC3339 full-date format (YYYY-MM-DD).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.ValidFromLocalTime">
            <summary>
            Represents the local time the pricing rule should be valid from. Time zone is determined by the device running the Point of Sale app.  Represented in RFC3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
            </summary>
            <value>Represents the local time the pricing rule should be valid from. Time zone is determined by the device running the Point of Sale app.  Represented in RFC3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.ValidUntilDate">
            <summary>
            Represents the date the pricing rule will become inactive.  Represented in RFC3339 full-date format (YYYY-MM-DD).
            </summary>
            <value>Represents the date the pricing rule will become inactive.  Represented in RFC3339 full-date format (YYYY-MM-DD).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogPricingRule.ValidUntilLocalTime">
            <summary>
            Represents the local time at which the pricing rule will become inactive. Time zone is determined by the device running the Point of Sale app.  Represented in RFC3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
            </summary>
            <value>Represents the local time at which the pricing rule will become inactive. Time zone is determined by the device running the Point of Sale app.  Represented in RFC3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogPricingRule.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogPricingRule.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogPricingRule.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogPricingRule.Equals(Square.Connect.Model.CatalogPricingRule)">
            <summary>
            Returns true if CatalogPricingRule instances are equal
            </summary>
            <param name="other">Instance of CatalogPricingRule to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogPricingRule.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogPricingType">
            <summary>
            Indicates whether the price of a [CatalogItemVariation](#type-catalogitemvariation) should be entered manually at the time of sale.
            </summary>
            <value>Indicates whether the price of a [CatalogItemVariation](#type-catalogitemvariation) should be entered manually at the time of sale.</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogPricingType.FIXEDPRICING">
            <summary>
            Enum FIXEDPRICING for "FIXED_PRICING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogPricingType.VARIABLEPRICING">
            <summary>
            Enum VARIABLEPRICING for "VARIABLE_PRICING"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogProductSet">
            <summary>
            Represents a collection of catalog objects for the purpose of applying a [PricingRule](#type-pricingrule). Including a catalog object will include all of its subtypes. For example, including a category in a product set will include all of its items and associated item variations in the product set. Including an item in a product set will also include its item variations.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogProductSet.#ctor(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogProductSet" /> class.
            </summary>
            <param name="Name"> User-defined name for the product set. For example, \&quot;Clearance Items\&quot; or \&quot;Winter Sale Items\&quot;..</param>
            <param name="ProductIdsAny">Unique IDs for any [CatalogObjects](#type-catalogobject)s to include in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with &#x60;product_ids_all&#x60; in a parent [CatalogProductSet](#type-catalogproductset) to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs..</param>
            <param name="ProductIdsAll">Unique IDs for [CatalogObjects](#type-catalogobject) to include in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs..</param>
            <param name="QuantityExact">If set, there must be exactly this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in the cart for the discount to apply.  Cannot be combined with either &#x60;quantity_min&#x60; or &#x60;quantity_max&#x60;..</param>
            <param name="QuantityMin">If set, there must be at least this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in a cart for the discount to apply. See &#x60;quantity_exact&#x60;. Defaults to 0 if &#x60;quantity_exact&#x60;, &#x60;quantity_min&#x60; and &#x60;quantity_max&#x60; are all unspecified..</param>
            <param name="QuantityMax">If set, the pricing rule will apply to a maximum of this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60;..</param>
            <param name="AllProducts">If set to &#x60;true&#x60;, the product set will include every item in the catalog.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogProductSet.Name">
            <summary>
             User-defined name for the product set. For example, \&quot;Clearance Items\&quot; or \&quot;Winter Sale Items\&quot;.
            </summary>
            <value> User-defined name for the product set. For example, \&quot;Clearance Items\&quot; or \&quot;Winter Sale Items\&quot;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogProductSet.ProductIdsAny">
            <summary>
            Unique IDs for any [CatalogObjects](#type-catalogobject)s to include in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with &#x60;product_ids_all&#x60; in a parent [CatalogProductSet](#type-catalogproductset) to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.
            </summary>
            <value>Unique IDs for any [CatalogObjects](#type-catalogobject)s to include in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with &#x60;product_ids_all&#x60; in a parent [CatalogProductSet](#type-catalogproductset) to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogProductSet.ProductIdsAll">
            <summary>
            Unique IDs for [CatalogObjects](#type-catalogobject) to include in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.
            </summary>
            <value>Unique IDs for [CatalogObjects](#type-catalogobject) to include in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogProductSet.QuantityExact">
            <summary>
            If set, there must be exactly this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in the cart for the discount to apply.  Cannot be combined with either &#x60;quantity_min&#x60; or &#x60;quantity_max&#x60;.
            </summary>
            <value>If set, there must be exactly this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in the cart for the discount to apply.  Cannot be combined with either &#x60;quantity_min&#x60; or &#x60;quantity_max&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogProductSet.QuantityMin">
            <summary>
            If set, there must be at least this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in a cart for the discount to apply. See &#x60;quantity_exact&#x60;. Defaults to 0 if &#x60;quantity_exact&#x60;, &#x60;quantity_min&#x60; and &#x60;quantity_max&#x60; are all unspecified.
            </summary>
            <value>If set, there must be at least this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in a cart for the discount to apply. See &#x60;quantity_exact&#x60;. Defaults to 0 if &#x60;quantity_exact&#x60;, &#x60;quantity_min&#x60; and &#x60;quantity_max&#x60; are all unspecified.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogProductSet.QuantityMax">
            <summary>
            If set, the pricing rule will apply to a maximum of this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60;.
            </summary>
            <value>If set, the pricing rule will apply to a maximum of this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogProductSet.AllProducts">
            <summary>
            If set to &#x60;true&#x60;, the product set will include every item in the catalog.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.
            </summary>
            <value>If set to &#x60;true&#x60;, the product set will include every item in the catalog.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogProductSet.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogProductSet.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogProductSet.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogProductSet.Equals(Square.Connect.Model.CatalogProductSet)">
            <summary>
            Returns true if CatalogProductSet instances are equal
            </summary>
            <param name="other">Instance of CatalogProductSet to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogProductSet.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogQuery">
            <summary>
            A query to be applied to a [SearchCatalogObjectsRequest](#type-searchcatalogobjectsrequest). Only one query field may be present.  Where an attribute name is required, it should be specified as the name of any field marked \&quot;searchable\&quot; from the structured data types for the desired result object type(s) ([CatalogItem](#type-catalogitem), [CatalogItemVariation](#type-catalogitemvariation), [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax), [CatalogDiscount](#type-catalogdiscount), [CatalogModifierList](#type-catalogmodifierlist), [CatalogModifier](#type-catalogmodifier)).  For example, a query that should return Items may specify attribute names from any of the searchable fields of the [CatalogItem](#type-catalogitem) data type, namely &#x60;\&quot;name\&quot;&#x60;, &#x60;\&quot;description\&quot;&#x60;, and &#x60;\&quot;abbreviation\&quot;&#x60;.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuery.#ctor(Square.Connect.Model.CatalogQuerySortedAttribute,Square.Connect.Model.CatalogQueryExact,Square.Connect.Model.CatalogQueryPrefix,Square.Connect.Model.CatalogQueryRange,Square.Connect.Model.CatalogQueryText,Square.Connect.Model.CatalogQueryItemsForTax,Square.Connect.Model.CatalogQueryItemsForModifierList)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQuery" /> class.
            </summary>
            <param name="SortedAttributeQuery">A query that returns all objects, sorted by the given attribute..</param>
            <param name="ExactQuery">A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value..</param>
            <param name="PrefixQuery">A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix..</param>
            <param name="RangeQuery">A query that returns only objects for which the given (integer-valued) attribute lies in the given range..</param>
            <param name="TextQuery">A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a [CatalogItem](#type-catalogitem) contains attributes &#x60;{\&quot;name\&quot;: \&quot;t-shirt\&quot;}&#x60; and &#x60;{\&quot;description\&quot;: \&quot;Small, Purple\&quot;}&#x60;, it will be matched by the query &#x60;{\&quot;keywords\&quot;: [\&quot;shirt\&quot;, \&quot;sma\&quot;, \&quot;purp\&quot;]}&#x60;..</param>
            <param name="ItemsForTaxQuery">A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax](#type-catalogtax)es enabled..</param>
            <param name="ItemsForModifierListQuery">A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList](#type-catalogmodifierlist)s enabled..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuery.SortedAttributeQuery">
            <summary>
            A query that returns all objects, sorted by the given attribute.
            </summary>
            <value>A query that returns all objects, sorted by the given attribute.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuery.ExactQuery">
            <summary>
            A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value.
            </summary>
            <value>A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuery.PrefixQuery">
            <summary>
            A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix.
            </summary>
            <value>A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuery.RangeQuery">
            <summary>
            A query that returns only objects for which the given (integer-valued) attribute lies in the given range.
            </summary>
            <value>A query that returns only objects for which the given (integer-valued) attribute lies in the given range.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuery.TextQuery">
            <summary>
            A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a [CatalogItem](#type-catalogitem) contains attributes &#x60;{\&quot;name\&quot;: \&quot;t-shirt\&quot;}&#x60; and &#x60;{\&quot;description\&quot;: \&quot;Small, Purple\&quot;}&#x60;, it will be matched by the query &#x60;{\&quot;keywords\&quot;: [\&quot;shirt\&quot;, \&quot;sma\&quot;, \&quot;purp\&quot;]}&#x60;.
            </summary>
            <value>A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a [CatalogItem](#type-catalogitem) contains attributes &#x60;{\&quot;name\&quot;: \&quot;t-shirt\&quot;}&#x60; and &#x60;{\&quot;description\&quot;: \&quot;Small, Purple\&quot;}&#x60;, it will be matched by the query &#x60;{\&quot;keywords\&quot;: [\&quot;shirt\&quot;, \&quot;sma\&quot;, \&quot;purp\&quot;]}&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuery.ItemsForTaxQuery">
            <summary>
            A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax](#type-catalogtax)es enabled.
            </summary>
            <value>A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax](#type-catalogtax)es enabled.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuery.ItemsForModifierListQuery">
            <summary>
            A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList](#type-catalogmodifierlist)s enabled.
            </summary>
            <value>A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList](#type-catalogmodifierlist)s enabled.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuery.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuery.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuery.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuery.Equals(Square.Connect.Model.CatalogQuery)">
            <summary>
            Returns true if CatalogQuery instances are equal
            </summary>
            <param name="other">Instance of CatalogQuery to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuery.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogQueryExact">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryExact" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryExact" /> class.
            </summary>
            <param name="AttributeName">The name of the attribute to be searched. (required).</param>
            <param name="AttributeValue">The desired value of the search attribute. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryExact.AttributeName">
            <summary>
            The name of the attribute to be searched.
            </summary>
            <value>The name of the attribute to be searched.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryExact.AttributeValue">
            <summary>
            The desired value of the search attribute.
            </summary>
            <value>The desired value of the search attribute.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.Equals(Square.Connect.Model.CatalogQueryExact)">
            <summary>
            Returns true if CatalogQueryExact instances are equal
            </summary>
            <param name="other">Instance of CatalogQueryExact to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogQueryItemsForModifierList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryItemsForModifierList" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryItemsForModifierList" /> class.
            </summary>
            <param name="ModifierListIds">A set of [CatalogModifierList](#type-catalogmodifierlist) IDs to be used to find associated [CatalogItem](#type-catalogitem)s. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryItemsForModifierList.ModifierListIds">
            <summary>
            A set of [CatalogModifierList](#type-catalogmodifierlist) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.
            </summary>
            <value>A set of [CatalogModifierList](#type-catalogmodifierlist) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.Equals(Square.Connect.Model.CatalogQueryItemsForModifierList)">
            <summary>
            Returns true if CatalogQueryItemsForModifierList instances are equal
            </summary>
            <param name="other">Instance of CatalogQueryItemsForModifierList to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogQueryItemsForTax">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryItemsForTax" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryItemsForTax" /> class.
            </summary>
            <param name="TaxIds">A set of [CatalogTax](#type-catalogtax) IDs to be used to find associated [CatalogItem](#type-catalogitem)s. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryItemsForTax.TaxIds">
            <summary>
            A set of [CatalogTax](#type-catalogtax) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.
            </summary>
            <value>A set of [CatalogTax](#type-catalogtax) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.Equals(Square.Connect.Model.CatalogQueryItemsForTax)">
            <summary>
            Returns true if CatalogQueryItemsForTax instances are equal
            </summary>
            <param name="other">Instance of CatalogQueryItemsForTax to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogQueryPrefix">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryPrefix" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryPrefix" /> class.
            </summary>
            <param name="AttributeName">The name of the attribute to be searched. (required).</param>
            <param name="AttributePrefix">The desired prefix of the search attribute value. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryPrefix.AttributeName">
            <summary>
            The name of the attribute to be searched.
            </summary>
            <value>The name of the attribute to be searched.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryPrefix.AttributePrefix">
            <summary>
            The desired prefix of the search attribute value.
            </summary>
            <value>The desired prefix of the search attribute value.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.Equals(Square.Connect.Model.CatalogQueryPrefix)">
            <summary>
            Returns true if CatalogQueryPrefix instances are equal
            </summary>
            <param name="other">Instance of CatalogQueryPrefix to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogQueryRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryRange" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryRange" /> class.
            </summary>
            <param name="AttributeName">The name of the attribute to be searched. (required).</param>
            <param name="AttributeMinValue">The desired minimum value for the search attribute (inclusive)..</param>
            <param name="AttributeMaxValue">The desired maximum value for the search attribute (inclusive)..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryRange.AttributeName">
            <summary>
            The name of the attribute to be searched.
            </summary>
            <value>The name of the attribute to be searched.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryRange.AttributeMinValue">
            <summary>
            The desired minimum value for the search attribute (inclusive).
            </summary>
            <value>The desired minimum value for the search attribute (inclusive).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryRange.AttributeMaxValue">
            <summary>
            The desired maximum value for the search attribute (inclusive).
            </summary>
            <value>The desired maximum value for the search attribute (inclusive).</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.Equals(Square.Connect.Model.CatalogQueryRange)">
            <summary>
            Returns true if CatalogQueryRange instances are equal
            </summary>
            <param name="other">Instance of CatalogQueryRange to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogQuerySortedAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogQuerySortedAttribute.SortOrderEnum">
            <summary>
            The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending). See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending). See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogQuerySortedAttribute.SortOrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogQuerySortedAttribute.SortOrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuerySortedAttribute.SortOrder">
            <summary>
            The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending). See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending). See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQuerySortedAttribute" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.CatalogQuerySortedAttribute.SortOrderEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQuerySortedAttribute" /> class.
            </summary>
            <param name="AttributeName">The attribute whose value should be used as the sort key. (required).</param>
            <param name="InitialAttributeValue">The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts)..</param>
            <param name="SortOrder">The desired [SortOrder](#type-sortorder), &#x60;\&quot;ASC\&quot;&#x60; (ascending) or &#x60;\&quot;DESC\&quot;&#x60; (descending). See [SortOrder](#type-sortorder) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuerySortedAttribute.AttributeName">
            <summary>
            The attribute whose value should be used as the sort key.
            </summary>
            <value>The attribute whose value should be used as the sort key.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogQuerySortedAttribute.InitialAttributeValue">
            <summary>
            The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
            </summary>
            <value>The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.Equals(Square.Connect.Model.CatalogQuerySortedAttribute)">
            <summary>
            Returns true if CatalogQuerySortedAttribute instances are equal
            </summary>
            <param name="other">Instance of CatalogQuerySortedAttribute to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogQueryText">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryText" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryText" /> class.
            </summary>
            <param name="Keywords">A list of one, two, or three search keywords. Keywords with fewer than three characters are ignored. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogQueryText.Keywords">
            <summary>
            A list of one, two, or three search keywords. Keywords with fewer than three characters are ignored.
            </summary>
            <value>A list of one, two, or three search keywords. Keywords with fewer than three characters are ignored.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.Equals(Square.Connect.Model.CatalogQueryText)">
            <summary>
            Returns true if CatalogQueryText instances are equal
            </summary>
            <param name="other">Instance of CatalogQueryText to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogTax">
            <summary>
            A tax in the Catalog object model.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogTax.CalculationPhaseEnum">
            <summary>
            Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for possible values
            </summary>
            <value>Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogTax.CalculationPhaseEnum.SUBTOTALPHASE">
            <summary>
            Enum SUBTOTALPHASE for "TAX_SUBTOTAL_PHASE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogTax.CalculationPhaseEnum.TOTALPHASE">
            <summary>
            Enum TOTALPHASE for "TAX_TOTAL_PHASE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CatalogTax.InclusionTypeEnum">
            <summary>
            Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for possible values
            </summary>
            <value>Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CatalogTax.InclusionTypeEnum.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CatalogTax.InclusionTypeEnum.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CatalogTax.CalculationPhase">
            <summary>
            Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for possible values
            </summary>
            <value>Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogTax.InclusionType">
            <summary>
            Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for possible values
            </summary>
            <value>Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogTax.#ctor(System.String,System.Nullable{Square.Connect.Model.CatalogTax.CalculationPhaseEnum},System.Nullable{Square.Connect.Model.CatalogTax.InclusionTypeEnum},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogTax" /> class.
            </summary>
            <param name="Name">The tax&#39;s name. Searchable. This field has max length of 255 Unicode code points..</param>
            <param name="CalculationPhase">Whether the tax is calculated based on a payment&#39;s subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for possible values.</param>
            <param name="InclusionType">Whether the tax is &#x60;ADDITIVE&#x60; or &#x60;INCLUSIVE&#x60;. See [TaxInclusionType](#type-taxinclusiontype) for possible values.</param>
            <param name="Percentage">The percentage of the tax in decimal form, using a &#x60;&#39;.&#39;&#x60; as the decimal separator and without a &#x60;&#39;%&#39;&#x60; sign. A value of &#x60;7.5&#x60; corresponds to 7.5%..</param>
            <param name="AppliesToCustomAmounts">If &#x60;true&#x60;, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular [CatalogItem](#type-catalogitem)..</param>
            <param name="Enabled">If &#x60;true&#x60;, the tax will be shown as enabled in the Square Point of Sale app..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogTax.Name">
            <summary>
            The tax&#39;s name. Searchable. This field has max length of 255 Unicode code points.
            </summary>
            <value>The tax&#39;s name. Searchable. This field has max length of 255 Unicode code points.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogTax.Percentage">
            <summary>
            The percentage of the tax in decimal form, using a &#x60;&#39;.&#39;&#x60; as the decimal separator and without a &#x60;&#39;%&#39;&#x60; sign. A value of &#x60;7.5&#x60; corresponds to 7.5%.
            </summary>
            <value>The percentage of the tax in decimal form, using a &#x60;&#39;.&#39;&#x60; as the decimal separator and without a &#x60;&#39;%&#39;&#x60; sign. A value of &#x60;7.5&#x60; corresponds to 7.5%.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogTax.AppliesToCustomAmounts">
            <summary>
            If &#x60;true&#x60;, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular [CatalogItem](#type-catalogitem).
            </summary>
            <value>If &#x60;true&#x60;, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular [CatalogItem](#type-catalogitem).</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogTax.Enabled">
            <summary>
            If &#x60;true&#x60;, the tax will be shown as enabled in the Square Point of Sale app.
            </summary>
            <value>If &#x60;true&#x60;, the tax will be shown as enabled in the Square Point of Sale app.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogTax.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogTax.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogTax.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogTax.Equals(Square.Connect.Model.CatalogTax)">
            <summary>
            Returns true if CatalogTax instances are equal
            </summary>
            <param name="other">Instance of CatalogTax to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogTax.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogTimePeriod">
            <summary>
            Represents a time period - either a single period or a repeating period.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogTimePeriod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogTimePeriod" /> class.
            </summary>
            <param name="_Event">An iCalendar (RFC5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which specifies the name, timing, duration and recurrence of this time period.  Example:  &#x60;&#x60;&#x60; DTSTART:20190707T180000 DURATION:P2H RRULE:FREQ&#x3D;WEEKLY;BYDAY&#x3D;MO,WE,FR &#x60;&#x60;&#x60;  Only &#x60;SUMMARY&#x60;, &#x60;DTSTART&#x60;, &#x60;DURATION&#x60; and &#x60;RRULE&#x60; fields are supported. &#x60;DTSTART&#x60; must be in local (unzoned) time format. Note that while &#x60;BEGIN:VEVENT&#x60; and &#x60;END:VEVENT&#x60; is not required in the request. The response will always include them..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogTimePeriod._Event">
            <summary>
            An iCalendar (RFC5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which specifies the name, timing, duration and recurrence of this time period.  Example:  &#x60;&#x60;&#x60; DTSTART:20190707T180000 DURATION:P2H RRULE:FREQ&#x3D;WEEKLY;BYDAY&#x3D;MO,WE,FR &#x60;&#x60;&#x60;  Only &#x60;SUMMARY&#x60;, &#x60;DTSTART&#x60;, &#x60;DURATION&#x60; and &#x60;RRULE&#x60; fields are supported. &#x60;DTSTART&#x60; must be in local (unzoned) time format. Note that while &#x60;BEGIN:VEVENT&#x60; and &#x60;END:VEVENT&#x60; is not required in the request. The response will always include them.
            </summary>
            <value>An iCalendar (RFC5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which specifies the name, timing, duration and recurrence of this time period.  Example:  &#x60;&#x60;&#x60; DTSTART:20190707T180000 DURATION:P2H RRULE:FREQ&#x3D;WEEKLY;BYDAY&#x3D;MO,WE,FR &#x60;&#x60;&#x60;  Only &#x60;SUMMARY&#x60;, &#x60;DTSTART&#x60;, &#x60;DURATION&#x60; and &#x60;RRULE&#x60; fields are supported. &#x60;DTSTART&#x60; must be in local (unzoned) time format. Note that while &#x60;BEGIN:VEVENT&#x60; and &#x60;END:VEVENT&#x60; is not required in the request. The response will always include them.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogTimePeriod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogTimePeriod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogTimePeriod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogTimePeriod.Equals(Square.Connect.Model.CatalogTimePeriod)">
            <summary>
            Returns true if CatalogTimePeriod instances are equal
            </summary>
            <param name="other">Instance of CatalogTimePeriod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogTimePeriod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CatalogV1Id">
            <summary>
            An Items Connect V1 object ID along with its associated [location](#type-location) ID.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogV1Id" /> class.
            </summary>
            <param name="_CatalogV1Id">The ID for an object in Connect V1, if different from its Connect V2 ID..</param>
            <param name="LocationId">The ID of the [location](#type-location) this Connect V1 ID is associated with..</param>
        </member>
        <member name="P:Square.Connect.Model.CatalogV1Id._CatalogV1Id">
            <summary>
            The ID for an object in Connect V1, if different from its Connect V2 ID.
            </summary>
            <value>The ID for an object in Connect V1, if different from its Connect V2 ID.</value>
        </member>
        <member name="P:Square.Connect.Model.CatalogV1Id.LocationId">
            <summary>
            The ID of the [location](#type-location) this Connect V1 ID is associated with.
            </summary>
            <value>The ID of the [location](#type-location) this Connect V1 ID is associated with.</value>
        </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.Equals(Square.Connect.Model.CatalogV1Id)">
            <summary>
            Returns true if CatalogV1Id instances are equal
            </summary>
            <param name="other">Instance of CatalogV1Id to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ChargeRequest">
            <summary>
            Defines the parameters that can be included in the body of a request to the Charge endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequest.#ctor(System.String,Square.Connect.Model.Money,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,Square.Connect.Model.Address,Square.Connect.Model.Address,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipient},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequest" /> class.
            </summary>
            <param name="IdempotencyKey">A value you specify that uniquely identifies this transaction among transactions you&#39;ve created.  If you&#39;re unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency](/basics/api101/idempotency) for more information. (required).</param>
            <param name="AmountMoney">The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of &#x60;currency&#x60; must match the currency associated with the business that is charging the card. (required).</param>
            <param name="CardNonce">A nonce generated from the &#x60;SqPaymentForm&#x60; that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the &#x60;SqPaymentForm&#x60;. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for &#x60;customer_card_id&#x60;..</param>
            <param name="CustomerCardId">The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for &#x60;card_nonce&#x60;.  If you provide this value, you _must_ also provide a value for &#x60;customer_id&#x60;..</param>
            <param name="DelayCapture">If &#x60;true&#x60;, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).  Default value: &#x60;false&#x60;.</param>
            <param name="ReferenceId">An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters..</param>
            <param name="Note">An optional note to associate with the transaction.  This value cannot exceed 60 characters..</param>
            <param name="CustomerId">The ID of the customer to associate this transaction with. This field is required if you provide a value for &#x60;customer_card_id&#x60;, and optional otherwise..</param>
            <param name="BillingAddress">The buyer&#39;s billing address..</param>
            <param name="ShippingAddress">The buyer&#39;s shipping address, if available..</param>
            <param name="BuyerEmailAddress">The buyer&#39;s email address, if available..</param>
            <param name="OrderId">The ID of the order to associate with this transaction.  If you provide this value, the &#x60;amount_money&#x60; value of your request must __exactly match__ the value of the order&#39;s &#x60;total_money&#x60; field..</param>
            <param name="AdditionalRecipients">The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the &#x60;amount_money&#x60; value in your additional_recipients must not be more than 90% of the &#x60;amount_money&#x60; value in the charge request. The &#x60;location_id&#x60; must be the valid location of the app owner merchant.  This field requires the &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission.  This field is currently not supported in sandbox..</param>
            <param name="VerificationToken">An identifying token generated by &#x60;SqPaymentForm.verifyBuyer()&#x60;. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity..</param>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.IdempotencyKey">
            <summary>
            A value you specify that uniquely identifies this transaction among transactions you&#39;ve created.  If you&#39;re unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency](/basics/api101/idempotency) for more information.
            </summary>
            <value>A value you specify that uniquely identifies this transaction among transactions you&#39;ve created.  If you&#39;re unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency](/basics/api101/idempotency) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.AmountMoney">
            <summary>
            The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of &#x60;currency&#x60; must match the currency associated with the business that is charging the card.
            </summary>
            <value>The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of &#x60;currency&#x60; must match the currency associated with the business that is charging the card.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CardNonce">
            <summary>
            A nonce generated from the &#x60;SqPaymentForm&#x60; that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the &#x60;SqPaymentForm&#x60;. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for &#x60;customer_card_id&#x60;.
            </summary>
            <value>A nonce generated from the &#x60;SqPaymentForm&#x60; that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the &#x60;SqPaymentForm&#x60;. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for &#x60;customer_card_id&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CustomerCardId">
            <summary>
            The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for &#x60;card_nonce&#x60;.  If you provide this value, you _must_ also provide a value for &#x60;customer_id&#x60;.
            </summary>
            <value>The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for &#x60;card_nonce&#x60;.  If you provide this value, you _must_ also provide a value for &#x60;customer_id&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.DelayCapture">
            <summary>
            If &#x60;true&#x60;, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).  Default value: &#x60;false&#x60;
            </summary>
            <value>If &#x60;true&#x60;, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).  Default value: &#x60;false&#x60;</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.ReferenceId">
            <summary>
            An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.
            </summary>
            <value>An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.Note">
            <summary>
            An optional note to associate with the transaction.  This value cannot exceed 60 characters.
            </summary>
            <value>An optional note to associate with the transaction.  This value cannot exceed 60 characters.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CustomerId">
            <summary>
            The ID of the customer to associate this transaction with. This field is required if you provide a value for &#x60;customer_card_id&#x60;, and optional otherwise.
            </summary>
            <value>The ID of the customer to associate this transaction with. This field is required if you provide a value for &#x60;customer_card_id&#x60;, and optional otherwise.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.BillingAddress">
            <summary>
            The buyer&#39;s billing address.
            </summary>
            <value>The buyer&#39;s billing address.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.ShippingAddress">
            <summary>
            The buyer&#39;s shipping address, if available.
            </summary>
            <value>The buyer&#39;s shipping address, if available.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.BuyerEmailAddress">
            <summary>
            The buyer&#39;s email address, if available.
            </summary>
            <value>The buyer&#39;s email address, if available.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.OrderId">
            <summary>
            The ID of the order to associate with this transaction.  If you provide this value, the &#x60;amount_money&#x60; value of your request must __exactly match__ the value of the order&#39;s &#x60;total_money&#x60; field.
            </summary>
            <value>The ID of the order to associate with this transaction.  If you provide this value, the &#x60;amount_money&#x60; value of your request must __exactly match__ the value of the order&#39;s &#x60;total_money&#x60; field.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.AdditionalRecipients">
            <summary>
            The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the &#x60;amount_money&#x60; value in your additional_recipients must not be more than 90% of the &#x60;amount_money&#x60; value in the charge request. The &#x60;location_id&#x60; must be the valid location of the app owner merchant.  This field requires the &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission.  This field is currently not supported in sandbox.
            </summary>
            <value>The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the &#x60;amount_money&#x60; value in your additional_recipients must not be more than 90% of the &#x60;amount_money&#x60; value in the charge request. The &#x60;location_id&#x60; must be the valid location of the app owner merchant.  This field requires the &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission.  This field is currently not supported in sandbox.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequest.VerificationToken">
            <summary>
            An identifying token generated by &#x60;SqPaymentForm.verifyBuyer()&#x60;. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.
            </summary>
            <value>An identifying token generated by &#x60;SqPaymentForm.verifyBuyer()&#x60;. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.</value>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequest.Equals(Square.Connect.Model.ChargeRequest)">
            <summary>
            Returns true if ChargeRequest instances are equal
            </summary>
            <param name="other">Instance of ChargeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ChargeRequestAdditionalRecipient">
            <summary>
            Represents an additional recipient (other than the merchant) entitled to a portion of the tender. Support is currently limited to USD, CAD and GBP currencies
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequestAdditionalRecipient" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.#ctor(System.String,System.String,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequestAdditionalRecipient" /> class.
            </summary>
            <param name="LocationId">The location ID for a recipient (other than the merchant) receiving a portion of the tender. (required).</param>
            <param name="Description">The description of the additional recipient. (required).</param>
            <param name="AmountMoney">The amount of money distributed to the recipient. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequestAdditionalRecipient.LocationId">
            <summary>
            The location ID for a recipient (other than the merchant) receiving a portion of the tender.
            </summary>
            <value>The location ID for a recipient (other than the merchant) receiving a portion of the tender.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequestAdditionalRecipient.Description">
            <summary>
            The description of the additional recipient.
            </summary>
            <value>The description of the additional recipient.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeRequestAdditionalRecipient.AmountMoney">
            <summary>
            The amount of money distributed to the recipient.
            </summary>
            <value>The amount of money distributed to the recipient.</value>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.Equals(Square.Connect.Model.ChargeRequestAdditionalRecipient)">
            <summary>
            Returns true if ChargeRequestAdditionalRecipient instances are equal
            </summary>
            <param name="other">Instance of ChargeRequestAdditionalRecipient to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ChargeResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the Charge endpoint.  One of &#x60;errors&#x60; or &#x60;transaction&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ChargeResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Transaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Transaction">The created transaction..</param>
        </member>
        <member name="P:Square.Connect.Model.ChargeResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.ChargeResponse.Transaction">
            <summary>
            The created transaction.
            </summary>
            <value>The created transaction.</value>
        </member>
        <member name="M:Square.Connect.Model.ChargeResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeResponse.Equals(Square.Connect.Model.ChargeResponse)">
            <summary>
            Returns true if ChargeResponse instances are equal
            </summary>
            <param name="other">Instance of ChargeResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ChargeResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Checkout">
            <summary>
            Square Checkout lets merchants accept online payments for supported payment types using a checkout workflow hosted on squareup.com.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.Checkout.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Square.Connect.Model.Address,System.String,Square.Connect.Model.Order,System.String,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipient})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Checkout" /> class.
            </summary>
            <param name="Id">ID generated by Square Checkout when a new checkout is requested..</param>
            <param name="CheckoutPageUrl">The URL that the buyer&#39;s browser should be redirected to after the checkout is completed..</param>
            <param name="AskForShippingAddress">If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;..</param>
            <param name="MerchantSupportEmail">The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set..</param>
            <param name="PrePopulateBuyerEmail">If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set..</param>
            <param name="PrePopulateShippingAddress">If provided, the buyer&#39;s shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set..</param>
            <param name="RedirectUrl">The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &#x60;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;orderId&#x3D;xxxxxx&amp;referenceId&#x3D;xxxxxx&amp;transactionId&#x3D;xxxxxx&#x60;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow..</param>
            <param name="Order">Order to be checked out..</param>
            <param name="CreatedAt">The time when the checkout was created, in RFC 3339 format..</param>
            <param name="AdditionalRecipients">Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration..</param>
        </member>
        <member name="P:Square.Connect.Model.Checkout.Id">
            <summary>
            ID generated by Square Checkout when a new checkout is requested.
            </summary>
            <value>ID generated by Square Checkout when a new checkout is requested.</value>
        </member>
        <member name="P:Square.Connect.Model.Checkout.CheckoutPageUrl">
            <summary>
            The URL that the buyer&#39;s browser should be redirected to after the checkout is completed.
            </summary>
            <value>The URL that the buyer&#39;s browser should be redirected to after the checkout is completed.</value>
        </member>
        <member name="P:Square.Connect.Model.Checkout.AskForShippingAddress">
            <summary>
            If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;.
            </summary>
            <value>If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.Checkout.MerchantSupportEmail">
            <summary>
            The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set.
            </summary>
            <value>The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set.</value>
        </member>
        <member name="P:Square.Connect.Model.Checkout.PrePopulateBuyerEmail">
            <summary>
            If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
            </summary>
            <value>If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.</value>
        </member>
        <member name="P:Square.Connect.Model.Checkout.PrePopulateShippingAddress">
            <summary>
            If provided, the buyer&#39;s shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.
            </summary>
            <value>If provided, the buyer&#39;s shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.</value>
        </member>
        <member name="P:Square.Connect.Model.Checkout.RedirectUrl">
            <summary>
            The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &#x60;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;orderId&#x3D;xxxxxx&amp;referenceId&#x3D;xxxxxx&amp;transactionId&#x3D;xxxxxx&#x60;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.
            </summary>
            <value>The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &#x60;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;orderId&#x3D;xxxxxx&amp;referenceId&#x3D;xxxxxx&amp;transactionId&#x3D;xxxxxx&#x60;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.</value>
        </member>
        <member name="P:Square.Connect.Model.Checkout.Order">
            <summary>
            Order to be checked out.
            </summary>
            <value>Order to be checked out.</value>
        </member>
        <member name="P:Square.Connect.Model.Checkout.CreatedAt">
            <summary>
            The time when the checkout was created, in RFC 3339 format.
            </summary>
            <value>The time when the checkout was created, in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.Checkout.AdditionalRecipients">
            <summary>
            Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.
            </summary>
            <value>Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.</value>
        </member>
        <member name="M:Square.Connect.Model.Checkout.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Checkout.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Checkout.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Checkout.Equals(Square.Connect.Model.Checkout)">
            <summary>
            Returns true if Checkout instances are equal
            </summary>
            <param name="other">Instance of Checkout to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Checkout.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Coordinates">
            <summary>
            Latitude and longitude coordinates.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.Coordinates.#ctor(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Coordinates" /> class.
            </summary>
            <param name="Latitude">The coordinate&#39;s latitude expressed in degrees..</param>
            <param name="Longitude">The coordinate&#39;s longitude expressed in degrees..</param>
        </member>
        <member name="P:Square.Connect.Model.Coordinates.Latitude">
            <summary>
            The coordinate&#39;s latitude expressed in degrees.
            </summary>
            <value>The coordinate&#39;s latitude expressed in degrees.</value>
        </member>
        <member name="P:Square.Connect.Model.Coordinates.Longitude">
            <summary>
            The coordinate&#39;s longitude expressed in degrees.
            </summary>
            <value>The coordinate&#39;s longitude expressed in degrees.</value>
        </member>
        <member name="M:Square.Connect.Model.Coordinates.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Coordinates.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Coordinates.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Coordinates.Equals(Square.Connect.Model.Coordinates)">
            <summary>
            Returns true if Coordinates instances are equal
            </summary>
            <param name="other">Instance of Coordinates to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Coordinates.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Country">
            <summary>
            Indicates the country associated with another entity, such as a business. Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
            </summary>
            <value>Indicates the country associated with another entity, such as a business. Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).</value>
        </member>
        <member name="F:Square.Connect.Model.Country.ZZ">
            <summary>
            Enum ZZ for "ZZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AD">
            <summary>
            Enum AD for "AD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AE">
            <summary>
            Enum AE for "AE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AF">
            <summary>
            Enum AF for "AF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AG">
            <summary>
            Enum AG for "AG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AI">
            <summary>
            Enum AI for "AI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AL">
            <summary>
            Enum AL for "AL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AM">
            <summary>
            Enum AM for "AM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AO">
            <summary>
            Enum AO for "AO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AQ">
            <summary>
            Enum AQ for "AQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AR">
            <summary>
            Enum AR for "AR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AS">
            <summary>
            Enum AS for "AS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AT">
            <summary>
            Enum AT for "AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AU">
            <summary>
            Enum AU for "AU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AW">
            <summary>
            Enum AW for "AW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AX">
            <summary>
            Enum AX for "AX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.AZ">
            <summary>
            Enum AZ for "AZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BA">
            <summary>
            Enum BA for "BA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BB">
            <summary>
            Enum BB for "BB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BD">
            <summary>
            Enum BD for "BD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BE">
            <summary>
            Enum BE for "BE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BF">
            <summary>
            Enum BF for "BF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BG">
            <summary>
            Enum BG for "BG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BH">
            <summary>
            Enum BH for "BH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BI">
            <summary>
            Enum BI for "BI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BJ">
            <summary>
            Enum BJ for "BJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BL">
            <summary>
            Enum BL for "BL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BM">
            <summary>
            Enum BM for "BM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BN">
            <summary>
            Enum BN for "BN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BO">
            <summary>
            Enum BO for "BO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BQ">
            <summary>
            Enum BQ for "BQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BR">
            <summary>
            Enum BR for "BR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BS">
            <summary>
            Enum BS for "BS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BT">
            <summary>
            Enum BT for "BT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BV">
            <summary>
            Enum BV for "BV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BW">
            <summary>
            Enum BW for "BW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BY">
            <summary>
            Enum BY for "BY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.BZ">
            <summary>
            Enum BZ for "BZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CA">
            <summary>
            Enum CA for "CA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CC">
            <summary>
            Enum CC for "CC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CD">
            <summary>
            Enum CD for "CD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CF">
            <summary>
            Enum CF for "CF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CG">
            <summary>
            Enum CG for "CG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CH">
            <summary>
            Enum CH for "CH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CI">
            <summary>
            Enum CI for "CI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CK">
            <summary>
            Enum CK for "CK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CL">
            <summary>
            Enum CL for "CL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CM">
            <summary>
            Enum CM for "CM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CN">
            <summary>
            Enum CN for "CN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CO">
            <summary>
            Enum CO for "CO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CR">
            <summary>
            Enum CR for "CR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CU">
            <summary>
            Enum CU for "CU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CV">
            <summary>
            Enum CV for "CV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CW">
            <summary>
            Enum CW for "CW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CX">
            <summary>
            Enum CX for "CX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CY">
            <summary>
            Enum CY for "CY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.CZ">
            <summary>
            Enum CZ for "CZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.DE">
            <summary>
            Enum DE for "DE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.DJ">
            <summary>
            Enum DJ for "DJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.DK">
            <summary>
            Enum DK for "DK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.DM">
            <summary>
            Enum DM for "DM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.DO">
            <summary>
            Enum DO for "DO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.DZ">
            <summary>
            Enum DZ for "DZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.EC">
            <summary>
            Enum EC for "EC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.EE">
            <summary>
            Enum EE for "EE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.EG">
            <summary>
            Enum EG for "EG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.EH">
            <summary>
            Enum EH for "EH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ER">
            <summary>
            Enum ER for "ER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ES">
            <summary>
            Enum ES for "ES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ET">
            <summary>
            Enum ET for "ET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.FI">
            <summary>
            Enum FI for "FI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.FJ">
            <summary>
            Enum FJ for "FJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.FK">
            <summary>
            Enum FK for "FK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.FM">
            <summary>
            Enum FM for "FM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.FO">
            <summary>
            Enum FO for "FO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.FR">
            <summary>
            Enum FR for "FR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GA">
            <summary>
            Enum GA for "GA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GB">
            <summary>
            Enum GB for "GB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GD">
            <summary>
            Enum GD for "GD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GE">
            <summary>
            Enum GE for "GE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GF">
            <summary>
            Enum GF for "GF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GG">
            <summary>
            Enum GG for "GG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GH">
            <summary>
            Enum GH for "GH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GI">
            <summary>
            Enum GI for "GI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GL">
            <summary>
            Enum GL for "GL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GM">
            <summary>
            Enum GM for "GM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GN">
            <summary>
            Enum GN for "GN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GP">
            <summary>
            Enum GP for "GP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GQ">
            <summary>
            Enum GQ for "GQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GR">
            <summary>
            Enum GR for "GR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GS">
            <summary>
            Enum GS for "GS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GT">
            <summary>
            Enum GT for "GT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GU">
            <summary>
            Enum GU for "GU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GW">
            <summary>
            Enum GW for "GW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.GY">
            <summary>
            Enum GY for "GY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.HK">
            <summary>
            Enum HK for "HK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.HM">
            <summary>
            Enum HM for "HM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.HN">
            <summary>
            Enum HN for "HN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.HR">
            <summary>
            Enum HR for "HR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.HT">
            <summary>
            Enum HT for "HT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.HU">
            <summary>
            Enum HU for "HU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ID">
            <summary>
            Enum ID for "ID"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.IE">
            <summary>
            Enum IE for "IE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.IL">
            <summary>
            Enum IL for "IL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.IM">
            <summary>
            Enum IM for "IM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.IN">
            <summary>
            Enum IN for "IN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.IO">
            <summary>
            Enum IO for "IO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.IQ">
            <summary>
            Enum IQ for "IQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.IR">
            <summary>
            Enum IR for "IR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.IS">
            <summary>
            Enum IS for "IS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.IT">
            <summary>
            Enum IT for "IT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.JE">
            <summary>
            Enum JE for "JE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.JM">
            <summary>
            Enum JM for "JM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.JO">
            <summary>
            Enum JO for "JO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.JP">
            <summary>
            Enum JP for "JP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KE">
            <summary>
            Enum KE for "KE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KG">
            <summary>
            Enum KG for "KG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KH">
            <summary>
            Enum KH for "KH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KI">
            <summary>
            Enum KI for "KI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KM">
            <summary>
            Enum KM for "KM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KN">
            <summary>
            Enum KN for "KN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KP">
            <summary>
            Enum KP for "KP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KR">
            <summary>
            Enum KR for "KR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KW">
            <summary>
            Enum KW for "KW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KY">
            <summary>
            Enum KY for "KY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.KZ">
            <summary>
            Enum KZ for "KZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LA">
            <summary>
            Enum LA for "LA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LB">
            <summary>
            Enum LB for "LB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LC">
            <summary>
            Enum LC for "LC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LI">
            <summary>
            Enum LI for "LI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LK">
            <summary>
            Enum LK for "LK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LR">
            <summary>
            Enum LR for "LR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LS">
            <summary>
            Enum LS for "LS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LT">
            <summary>
            Enum LT for "LT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LU">
            <summary>
            Enum LU for "LU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LV">
            <summary>
            Enum LV for "LV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.LY">
            <summary>
            Enum LY for "LY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MA">
            <summary>
            Enum MA for "MA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MC">
            <summary>
            Enum MC for "MC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MD">
            <summary>
            Enum MD for "MD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ME">
            <summary>
            Enum ME for "ME"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MF">
            <summary>
            Enum MF for "MF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MG">
            <summary>
            Enum MG for "MG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MH">
            <summary>
            Enum MH for "MH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MK">
            <summary>
            Enum MK for "MK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ML">
            <summary>
            Enum ML for "ML"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MM">
            <summary>
            Enum MM for "MM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MN">
            <summary>
            Enum MN for "MN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MO">
            <summary>
            Enum MO for "MO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MP">
            <summary>
            Enum MP for "MP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MQ">
            <summary>
            Enum MQ for "MQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MR">
            <summary>
            Enum MR for "MR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MS">
            <summary>
            Enum MS for "MS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MT">
            <summary>
            Enum MT for "MT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MU">
            <summary>
            Enum MU for "MU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MV">
            <summary>
            Enum MV for "MV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MW">
            <summary>
            Enum MW for "MW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MX">
            <summary>
            Enum MX for "MX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MY">
            <summary>
            Enum MY for "MY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.MZ">
            <summary>
            Enum MZ for "MZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NA">
            <summary>
            Enum NA for "NA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NC">
            <summary>
            Enum NC for "NC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NE">
            <summary>
            Enum NE for "NE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NF">
            <summary>
            Enum NF for "NF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NG">
            <summary>
            Enum NG for "NG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NI">
            <summary>
            Enum NI for "NI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NL">
            <summary>
            Enum NL for "NL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NO">
            <summary>
            Enum NO for "NO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NP">
            <summary>
            Enum NP for "NP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NR">
            <summary>
            Enum NR for "NR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NU">
            <summary>
            Enum NU for "NU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.NZ">
            <summary>
            Enum NZ for "NZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.OM">
            <summary>
            Enum OM for "OM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PA">
            <summary>
            Enum PA for "PA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PE">
            <summary>
            Enum PE for "PE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PF">
            <summary>
            Enum PF for "PF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PG">
            <summary>
            Enum PG for "PG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PH">
            <summary>
            Enum PH for "PH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PK">
            <summary>
            Enum PK for "PK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PL">
            <summary>
            Enum PL for "PL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PM">
            <summary>
            Enum PM for "PM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PN">
            <summary>
            Enum PN for "PN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PR">
            <summary>
            Enum PR for "PR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PS">
            <summary>
            Enum PS for "PS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PT">
            <summary>
            Enum PT for "PT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PW">
            <summary>
            Enum PW for "PW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.PY">
            <summary>
            Enum PY for "PY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.QA">
            <summary>
            Enum QA for "QA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.RE">
            <summary>
            Enum RE for "RE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.RO">
            <summary>
            Enum RO for "RO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.RS">
            <summary>
            Enum RS for "RS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.RU">
            <summary>
            Enum RU for "RU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.RW">
            <summary>
            Enum RW for "RW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SA">
            <summary>
            Enum SA for "SA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SB">
            <summary>
            Enum SB for "SB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SC">
            <summary>
            Enum SC for "SC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SD">
            <summary>
            Enum SD for "SD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SE">
            <summary>
            Enum SE for "SE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SG">
            <summary>
            Enum SG for "SG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SH">
            <summary>
            Enum SH for "SH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SI">
            <summary>
            Enum SI for "SI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SJ">
            <summary>
            Enum SJ for "SJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SK">
            <summary>
            Enum SK for "SK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SL">
            <summary>
            Enum SL for "SL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SM">
            <summary>
            Enum SM for "SM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SN">
            <summary>
            Enum SN for "SN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SO">
            <summary>
            Enum SO for "SO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SR">
            <summary>
            Enum SR for "SR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SS">
            <summary>
            Enum SS for "SS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ST">
            <summary>
            Enum ST for "ST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SV">
            <summary>
            Enum SV for "SV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SX">
            <summary>
            Enum SX for "SX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SY">
            <summary>
            Enum SY for "SY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.SZ">
            <summary>
            Enum SZ for "SZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TC">
            <summary>
            Enum TC for "TC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TD">
            <summary>
            Enum TD for "TD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TF">
            <summary>
            Enum TF for "TF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TG">
            <summary>
            Enum TG for "TG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TH">
            <summary>
            Enum TH for "TH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TJ">
            <summary>
            Enum TJ for "TJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TK">
            <summary>
            Enum TK for "TK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TL">
            <summary>
            Enum TL for "TL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TM">
            <summary>
            Enum TM for "TM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TN">
            <summary>
            Enum TN for "TN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TO">
            <summary>
            Enum TO for "TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TR">
            <summary>
            Enum TR for "TR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TT">
            <summary>
            Enum TT for "TT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TV">
            <summary>
            Enum TV for "TV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TW">
            <summary>
            Enum TW for "TW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.TZ">
            <summary>
            Enum TZ for "TZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.UA">
            <summary>
            Enum UA for "UA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.UG">
            <summary>
            Enum UG for "UG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.UM">
            <summary>
            Enum UM for "UM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.US">
            <summary>
            Enum US for "US"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.UY">
            <summary>
            Enum UY for "UY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.UZ">
            <summary>
            Enum UZ for "UZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.VA">
            <summary>
            Enum VA for "VA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.VC">
            <summary>
            Enum VC for "VC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.VE">
            <summary>
            Enum VE for "VE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.VG">
            <summary>
            Enum VG for "VG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.VI">
            <summary>
            Enum VI for "VI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.VN">
            <summary>
            Enum VN for "VN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.VU">
            <summary>
            Enum VU for "VU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.WF">
            <summary>
            Enum WF for "WF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.WS">
            <summary>
            Enum WS for "WS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.YE">
            <summary>
            Enum YE for "YE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.YT">
            <summary>
            Enum YT for "YT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ZA">
            <summary>
            Enum ZA for "ZA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ZM">
            <summary>
            Enum ZM for "ZM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Country.ZW">
            <summary>
            Enum ZW for "ZW"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CreateBreakTypeRequest">
            <summary>
            A request to create a new &#x60;BreakType&#x60;
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateBreakTypeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeRequest.#ctor(System.String,Square.Connect.Model.BreakType)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateBreakTypeRequest" /> class.
            </summary>
            <param name="IdempotencyKey">Unique string value to insure idempotency of the operation.</param>
            <param name="BreakType">The &#x60;BreakType&#x60; to be created. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.CreateBreakTypeRequest.IdempotencyKey">
            <summary>
            Unique string value to insure idempotency of the operation
            </summary>
            <value>Unique string value to insure idempotency of the operation</value>
        </member>
        <member name="P:Square.Connect.Model.CreateBreakTypeRequest.BreakType">
            <summary>
            The &#x60;BreakType&#x60; to be created.
            </summary>
            <value>The &#x60;BreakType&#x60; to be created.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeRequest.Equals(Square.Connect.Model.CreateBreakTypeRequest)">
            <summary>
            Returns true if CreateBreakTypeRequest instances are equal
            </summary>
            <param name="other">Instance of CreateBreakTypeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateBreakTypeResponse">
            <summary>
            The response to the request to create a &#x60;BreakType&#x60;. Contains the created &#x60;BreakType&#x60; object. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeResponse.#ctor(Square.Connect.Model.BreakType,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateBreakTypeResponse" /> class.
            </summary>
            <param name="BreakType">The &#x60;BreakType&#x60; that was created by the request..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateBreakTypeResponse.BreakType">
            <summary>
            The &#x60;BreakType&#x60; that was created by the request.
            </summary>
            <value>The &#x60;BreakType&#x60; that was created by the request.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateBreakTypeResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeResponse.Equals(Square.Connect.Model.CreateBreakTypeResponse)">
            <summary>
            Returns true if CreateBreakTypeResponse instances are equal
            </summary>
            <param name="other">Instance of CreateBreakTypeResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateBreakTypeResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateCheckoutRequest">
            <summary>
            Defines the parameters that can be included in the body of a request to the CreateCheckout endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCheckoutRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.#ctor(System.String,Square.Connect.Model.CreateOrderRequest,System.Nullable{System.Boolean},System.String,System.String,Square.Connect.Model.Address,System.String,System.Collections.Generic.List{Square.Connect.Model.ChargeRequestAdditionalRecipient},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCheckoutRequest" /> class.
            </summary>
            <param name="IdempotencyKey">A unique string that identifies this checkout among others you&#39;ve created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you&#39;re unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency](/basics/api101/idempotency) for more information. (required).</param>
            <param name="Order">The order including line items to be checked out. (required).</param>
            <param name="AskForShippingAddress">If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;..</param>
            <param name="MerchantSupportEmail">The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set..</param>
            <param name="PrePopulateBuyerEmail">If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set..</param>
            <param name="PrePopulateShippingAddress">If provided, the buyer&#39;s shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set..</param>
            <param name="RedirectUrl">The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &#x60;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;orderId&#x3D;xxxxxx&amp;referenceId&#x3D;xxxxxx&amp;transactionId&#x3D;xxxxxx&#x60;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set..</param>
            <param name="AdditionalRecipients">The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the &#x60;amount_money&#x60; value in your additional_recipients must not be more than 90% of the &#x60;total_money&#x60; calculated by Square for your order. The &#x60;location_id&#x60; must be the valid location of the app owner merchant.  This field requires &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission.  This field is currently not supported in sandbox..</param>
            <param name="Note">An optional note to associate with the checkout object.  This value cannot exceed 60 characters..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.IdempotencyKey">
            <summary>
            A unique string that identifies this checkout among others you&#39;ve created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you&#39;re unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency](/basics/api101/idempotency) for more information.
            </summary>
            <value>A unique string that identifies this checkout among others you&#39;ve created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you&#39;re unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency](/basics/api101/idempotency) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.Order">
            <summary>
            The order including line items to be checked out.
            </summary>
            <value>The order including line items to be checked out.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.AskForShippingAddress">
            <summary>
            If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;.
            </summary>
            <value>If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.MerchantSupportEmail">
            <summary>
            The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set.
            </summary>
            <value>The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.PrePopulateBuyerEmail">
            <summary>
            If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
            </summary>
            <value>If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.PrePopulateShippingAddress">
            <summary>
            If provided, the buyer&#39;s shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.
            </summary>
            <value>If provided, the buyer&#39;s shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.RedirectUrl">
            <summary>
            The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &#x60;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;orderId&#x3D;xxxxxx&amp;referenceId&#x3D;xxxxxx&amp;transactionId&#x3D;xxxxxx&#x60;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.
            </summary>
            <value>The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &#x60;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;orderId&#x3D;xxxxxx&amp;referenceId&#x3D;xxxxxx&amp;transactionId&#x3D;xxxxxx&#x60;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.AdditionalRecipients">
            <summary>
            The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the &#x60;amount_money&#x60; value in your additional_recipients must not be more than 90% of the &#x60;total_money&#x60; calculated by Square for your order. The &#x60;location_id&#x60; must be the valid location of the app owner merchant.  This field requires &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission.  This field is currently not supported in sandbox.
            </summary>
            <value>The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the &#x60;amount_money&#x60; value in your additional_recipients must not be more than 90% of the &#x60;total_money&#x60; calculated by Square for your order. The &#x60;location_id&#x60; must be the valid location of the app owner merchant.  This field requires &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission.  This field is currently not supported in sandbox.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.Note">
            <summary>
            An optional note to associate with the checkout object.  This value cannot exceed 60 characters.
            </summary>
            <value>An optional note to associate with the checkout object.  This value cannot exceed 60 characters.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.Equals(Square.Connect.Model.CreateCheckoutRequest)">
            <summary>
            Returns true if CreateCheckoutRequest instances are equal
            </summary>
            <param name="other">Instance of CreateCheckoutRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateCheckoutResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the CreateCheckout endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.#ctor(Square.Connect.Model.Checkout,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCheckoutResponse" /> class.
            </summary>
            <param name="Checkout">The newly created checkout. If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutResponse.Checkout">
            <summary>
            The newly created checkout. If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key.
            </summary>
            <value>The newly created checkout. If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCheckoutResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.Equals(Square.Connect.Model.CreateCheckoutResponse)">
            <summary>
            Returns true if CreateCheckoutResponse instances are equal
            </summary>
            <param name="other">Instance of CreateCheckoutResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateCustomerCardRequest">
            <summary>
            Defines the fields that are included in the request body of a request to the CreateCustomerCard endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.#ctor(System.String,Square.Connect.Model.Address,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardRequest" /> class.
            </summary>
            <param name="CardNonce">A card nonce representing the credit card to link to the customer.  Card nonces are generated by the &#x60;SqPaymentForm&#x60; that buyers enter their card information into. See [Embedding the payment form](/payment-form/payment-form-walkthrough) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card. (required).</param>
            <param name="BillingAddress">Address information for the card on file. Only the &#x60;postal_code&#x60; field is required for payments in the US and Canada..</param>
            <param name="CardholderName">The full name printed on the credit card..</param>
            <param name="VerificationToken">An identifying token generated by &#x60;SqPaymentForm.verifyBuyer()&#x60;. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.CardNonce">
            <summary>
            A card nonce representing the credit card to link to the customer.  Card nonces are generated by the &#x60;SqPaymentForm&#x60; that buyers enter their card information into. See [Embedding the payment form](/payment-form/payment-form-walkthrough) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card.
            </summary>
            <value>A card nonce representing the credit card to link to the customer.  Card nonces are generated by the &#x60;SqPaymentForm&#x60; that buyers enter their card information into. See [Embedding the payment form](/payment-form/payment-form-walkthrough) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.BillingAddress">
            <summary>
            Address information for the card on file. Only the &#x60;postal_code&#x60; field is required for payments in the US and Canada.
            </summary>
            <value>Address information for the card on file. Only the &#x60;postal_code&#x60; field is required for payments in the US and Canada.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.CardholderName">
            <summary>
            The full name printed on the credit card.
            </summary>
            <value>The full name printed on the credit card.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.VerificationToken">
            <summary>
            An identifying token generated by &#x60;SqPaymentForm.verifyBuyer()&#x60;. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.
            </summary>
            <value>An identifying token generated by &#x60;SqPaymentForm.verifyBuyer()&#x60;. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.Equals(Square.Connect.Model.CreateCustomerCardRequest)">
            <summary>
            Returns true if CreateCustomerCardRequest instances are equal
            </summary>
            <param name="other">Instance of CreateCustomerCardRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateCustomerCardResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the CreateCustomerCard endpoint.  One of &#x60;errors&#x60; or &#x60;card&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Card)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Card">The created card on file..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardResponse.Card">
            <summary>
            The created card on file.
            </summary>
            <value>The created card on file.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.Equals(Square.Connect.Model.CreateCustomerCardResponse)">
            <summary>
            Returns true if CreateCustomerCardResponse instances are equal
            </summary>
            <param name="other">Instance of CreateCustomerCardResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateCustomerRequest">
            <summary>
            Defines the body parameters that can be provided in a request to the CreateCustomer endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerRequest" /> class.
            </summary>
            <param name="IdempotencyKey">The idempotency key for the request. See the [Idempotency](/basics/api101/idempotency) guide for more information..</param>
            <param name="GivenName">The customer&#39;s given (i.e., first) name..</param>
            <param name="FamilyName">The customer&#39;s family (i.e., last) name..</param>
            <param name="CompanyName">The name of the customer&#39;s company..</param>
            <param name="Nickname">A nickname for the customer..</param>
            <param name="EmailAddress">The customer&#39;s email address..</param>
            <param name="Address">The customer&#39;s physical address..</param>
            <param name="PhoneNumber">The customer&#39;s phone number..</param>
            <param name="ReferenceId">An optional second ID you can set to associate the customer with an entity in another system..</param>
            <param name="Note">An optional note to associate with the customer..</param>
            <param name="Birthday">The customer birthday in RFC-3339 format. Year is optional, timezone and times are not allowed. Example: &#x60;0000-09-01T00:00:00-00:00&#x60; for a birthday on September 1st. &#x60;1998-09-01T00:00:00-00:00&#x60; for a birthday on September 1st 1998..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.IdempotencyKey">
            <summary>
            The idempotency key for the request. See the [Idempotency](/basics/api101/idempotency) guide for more information.
            </summary>
            <value>The idempotency key for the request. See the [Idempotency](/basics/api101/idempotency) guide for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.GivenName">
            <summary>
            The customer&#39;s given (i.e., first) name.
            </summary>
            <value>The customer&#39;s given (i.e., first) name.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.FamilyName">
            <summary>
            The customer&#39;s family (i.e., last) name.
            </summary>
            <value>The customer&#39;s family (i.e., last) name.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.CompanyName">
            <summary>
            The name of the customer&#39;s company.
            </summary>
            <value>The name of the customer&#39;s company.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Nickname">
            <summary>
            A nickname for the customer.
            </summary>
            <value>A nickname for the customer.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.EmailAddress">
            <summary>
            The customer&#39;s email address.
            </summary>
            <value>The customer&#39;s email address.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Address">
            <summary>
            The customer&#39;s physical address.
            </summary>
            <value>The customer&#39;s physical address.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.PhoneNumber">
            <summary>
            The customer&#39;s phone number.
            </summary>
            <value>The customer&#39;s phone number.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.ReferenceId">
            <summary>
            An optional second ID you can set to associate the customer with an entity in another system.
            </summary>
            <value>An optional second ID you can set to associate the customer with an entity in another system.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Note">
            <summary>
            An optional note to associate with the customer.
            </summary>
            <value>An optional note to associate with the customer.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Birthday">
            <summary>
            The customer birthday in RFC-3339 format. Year is optional, timezone and times are not allowed. Example: &#x60;0000-09-01T00:00:00-00:00&#x60; for a birthday on September 1st. &#x60;1998-09-01T00:00:00-00:00&#x60; for a birthday on September 1st 1998.
            </summary>
            <value>The customer birthday in RFC-3339 format. Year is optional, timezone and times are not allowed. Example: &#x60;0000-09-01T00:00:00-00:00&#x60; for a birthday on September 1st. &#x60;1998-09-01T00:00:00-00:00&#x60; for a birthday on September 1st 1998.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.Equals(Square.Connect.Model.CreateCustomerRequest)">
            <summary>
            Returns true if CreateCustomerRequest instances are equal
            </summary>
            <param name="other">Instance of CreateCustomerRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateCustomerResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the CreateCustomer endpoint.  One of &#x60;errors&#x60; or &#x60;customer&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Customer">The created customer..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateCustomerResponse.Customer">
            <summary>
            The created customer.
            </summary>
            <value>The created customer.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.Equals(Square.Connect.Model.CreateCustomerResponse)">
            <summary>
            Returns true if CreateCustomerResponse instances are equal
            </summary>
            <param name="other">Instance of CreateCustomerResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateMobileAuthorizationCodeRequest">
            <summary>
            Defines the body parameters that can be provided in a request to the CreateMobileAuthorizationCode endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateMobileAuthorizationCodeRequest" /> class.
            </summary>
            <param name="LocationId">The Square location ID the authorization code should be tied to..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateMobileAuthorizationCodeRequest.LocationId">
            <summary>
            The Square location ID the authorization code should be tied to.
            </summary>
            <value>The Square location ID the authorization code should be tied to.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeRequest.Equals(Square.Connect.Model.CreateMobileAuthorizationCodeRequest)">
            <summary>
            Returns true if CreateMobileAuthorizationCodeRequest instances are equal
            </summary>
            <param name="other">Instance of CreateMobileAuthorizationCodeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateMobileAuthorizationCodeResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the CreateMobileAuthorizationCode endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeResponse.#ctor(System.String,System.String,Square.Connect.Model.Error)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateMobileAuthorizationCodeResponse" /> class.
            </summary>
            <param name="AuthorizationCode">Generated authorization code that connects a mobile application instance to a Square account..</param>
            <param name="ExpiresAt">The timestamp when &#x60;authorization_code&#x60; expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;..</param>
            <param name="Error">An error object that provides details about how creation of authorization code failed..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateMobileAuthorizationCodeResponse.AuthorizationCode">
            <summary>
            Generated authorization code that connects a mobile application instance to a Square account.
            </summary>
            <value>Generated authorization code that connects a mobile application instance to a Square account.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateMobileAuthorizationCodeResponse.ExpiresAt">
            <summary>
            The timestamp when &#x60;authorization_code&#x60; expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.
            </summary>
            <value>The timestamp when &#x60;authorization_code&#x60; expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateMobileAuthorizationCodeResponse.Error">
            <summary>
            An error object that provides details about how creation of authorization code failed.
            </summary>
            <value>An error object that provides details about how creation of authorization code failed.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeResponse.Equals(Square.Connect.Model.CreateMobileAuthorizationCodeResponse)">
            <summary>
            Returns true if CreateMobileAuthorizationCodeResponse instances are equal
            </summary>
            <param name="other">Instance of CreateMobileAuthorizationCodeResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateMobileAuthorizationCodeResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateOrderRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.#ctor(Square.Connect.Model.Order,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestLineItem},System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestTax},System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestDiscount})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequest" /> class.
            </summary>
            <param name="Order">The order to create. If this field is set, then the only other top-level field that can be set is the idempotency_key..</param>
            <param name="IdempotencyKey">A value you specify that uniquely identifies this order among orders you&#39;ve created.  If you&#39;re unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency](/basics/api101/idempotency) for more information..</param>
            <param name="ReferenceId">__Deprecated__: Please set the reference_id on the nested [order](#type-order) field instead.  An optional ID you can associate with the order for your own purposes (such as to associate the order with an entity ID in your own database).  This value cannot exceed 40 characters..</param>
            <param name="LineItems">__Deprecated__: Please set the line_items on the nested [order](#type-order) field instead.  The line items to associate with this order.  Each line item represents a different product to include in a purchase..</param>
            <param name="Taxes">__Deprecated__: Please set the taxes on the nested [order](#type-order) field instead.  The taxes to include on the order..</param>
            <param name="Discounts">__Deprecated__: Please set the discounts on the nested [order](#type-order) field instead.  The discounts to include on the order..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.Order">
            <summary>
            The order to create. If this field is set, then the only other top-level field that can be set is the idempotency_key.
            </summary>
            <value>The order to create. If this field is set, then the only other top-level field that can be set is the idempotency_key.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.IdempotencyKey">
            <summary>
            A value you specify that uniquely identifies this order among orders you&#39;ve created.  If you&#39;re unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency](/basics/api101/idempotency) for more information.
            </summary>
            <value>A value you specify that uniquely identifies this order among orders you&#39;ve created.  If you&#39;re unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency](/basics/api101/idempotency) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.ReferenceId">
            <summary>
            __Deprecated__: Please set the reference_id on the nested [order](#type-order) field instead.  An optional ID you can associate with the order for your own purposes (such as to associate the order with an entity ID in your own database).  This value cannot exceed 40 characters.
            </summary>
            <value>__Deprecated__: Please set the reference_id on the nested [order](#type-order) field instead.  An optional ID you can associate with the order for your own purposes (such as to associate the order with an entity ID in your own database).  This value cannot exceed 40 characters.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.LineItems">
            <summary>
            __Deprecated__: Please set the line_items on the nested [order](#type-order) field instead.  The line items to associate with this order.  Each line item represents a different product to include in a purchase.
            </summary>
            <value>__Deprecated__: Please set the line_items on the nested [order](#type-order) field instead.  The line items to associate with this order.  Each line item represents a different product to include in a purchase.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.Taxes">
            <summary>
            __Deprecated__: Please set the taxes on the nested [order](#type-order) field instead.  The taxes to include on the order.
            </summary>
            <value>__Deprecated__: Please set the taxes on the nested [order](#type-order) field instead.  The taxes to include on the order.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.Discounts">
            <summary>
            __Deprecated__: Please set the discounts on the nested [order](#type-order) field instead.  The discounts to include on the order.
            </summary>
            <value>__Deprecated__: Please set the discounts on the nested [order](#type-order) field instead.  The discounts to include on the order.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.Equals(Square.Connect.Model.CreateOrderRequest)">
            <summary>
            Returns true if CreateOrderRequest instances are equal
            </summary>
            <param name="other">Instance of CreateOrderRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestDiscount">
            <summary>
            __Deprecated__: Please use the [OrderLineItemDiscount](#type-orderlineitemdiscount) type in the order field of [CreateOrderRequest](#type-createorderrequest) instead.  Represents a discount that can apply to either a single line item or an entire order.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestDiscount" /> class.
            </summary>
            <param name="CatalogObjectId">Only used for catalog discounts. The catalog object ID for an existing [CatalogDiscount](#type-catalogdiscount).  Do not provide a value for this field if you provide values in other fields for an ad hoc discount..</param>
            <param name="Name">Only used for ad hoc discounts. The discount&#39;s name..</param>
            <param name="Percentage">Only used for ad hoc discounts. The percentage of the discount, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0.</param>
            <param name="AmountMoney">Only used for ad hoc discounts. The monetary amount of the discount..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestDiscount.CatalogObjectId">
            <summary>
            Only used for catalog discounts. The catalog object ID for an existing [CatalogDiscount](#type-catalogdiscount).  Do not provide a value for this field if you provide values in other fields for an ad hoc discount.
            </summary>
            <value>Only used for catalog discounts. The catalog object ID for an existing [CatalogDiscount](#type-catalogdiscount).  Do not provide a value for this field if you provide values in other fields for an ad hoc discount.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestDiscount.Name">
            <summary>
            Only used for ad hoc discounts. The discount&#39;s name.
            </summary>
            <value>Only used for ad hoc discounts. The discount&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestDiscount.Percentage">
            <summary>
            Only used for ad hoc discounts. The percentage of the discount, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0
            </summary>
            <value>Only used for ad hoc discounts. The percentage of the discount, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestDiscount.AmountMoney">
            <summary>
            Only used for ad hoc discounts. The monetary amount of the discount.
            </summary>
            <value>Only used for ad hoc discounts. The monetary amount of the discount.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.Equals(Square.Connect.Model.CreateOrderRequestDiscount)">
            <summary>
            Returns true if CreateOrderRequestDiscount instances are equal
            </summary>
            <param name="other">Instance of CreateOrderRequestDiscount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestLineItem">
            <summary>
            __Deprecated__: Please use the [OrderLineItem](#type-orderlineitem) type in the order field of [CreateOrderRequest](#type-createorderrequest) instead.  Represents a line item to include in an order. Each line item describes a different product to purchase, with its own quantity and price details.  Line items can either reference objects from the merchant&#39;s catalog, or can alternatively specify a name and price instead.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestLineItem" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.#ctor(System.String,System.String,Square.Connect.Model.Money,System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestModifier},System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestTax},System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestDiscount})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestLineItem" /> class.
            </summary>
            <param name="Name">Only used for ad hoc line items. The name of the line item. This value cannot exceed 500 characters.  Do not provide a value for this field if you provide a value for &#x60;catalog_object_id&#x60;..</param>
            <param name="Quantity">The quantity to purchase, as a string representation of a number.  This string must have a positive integer value. (required).</param>
            <param name="BasePriceMoney">The base price for a single unit of the line item.  &#x60;base_price_money&#x60; is required for ad hoc line items and variable priced [CatalogItemVariation](#type-catalogitemvariation)s. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the CatalogItemVariation&#39;s price..</param>
            <param name="VariationName">Only used for ad hoc line items. The variation name of the line item. This value cannot exceed 255 characters.  If this value is not set for an ad hoc line item, the default value of &#x60;Regular&#x60; is used.  Do not provide a value for this field if you provide a value for the &#x60;catalog_object_id&#x60;..</param>
            <param name="Note">The note of the line item. This value cannot exceed 500 characters..</param>
            <param name="CatalogObjectId">Only used for Catalog line items. The catalog object ID for an existing [CatalogItemVariation](#type-catalogitemvariation).  Do not provide a value for this field if you provide a value for &#x60;name&#x60; and &#x60;base_price_money&#x60;..</param>
            <param name="Modifiers">Only used for Catalog line items. The modifiers to include on the line item..</param>
            <param name="Taxes">The taxes to include on the line item..</param>
            <param name="Discounts">The discounts to include on the line item..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Name">
            <summary>
            Only used for ad hoc line items. The name of the line item. This value cannot exceed 500 characters.  Do not provide a value for this field if you provide a value for &#x60;catalog_object_id&#x60;.
            </summary>
            <value>Only used for ad hoc line items. The name of the line item. This value cannot exceed 500 characters.  Do not provide a value for this field if you provide a value for &#x60;catalog_object_id&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Quantity">
            <summary>
            The quantity to purchase, as a string representation of a number.  This string must have a positive integer value.
            </summary>
            <value>The quantity to purchase, as a string representation of a number.  This string must have a positive integer value.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.BasePriceMoney">
            <summary>
            The base price for a single unit of the line item.  &#x60;base_price_money&#x60; is required for ad hoc line items and variable priced [CatalogItemVariation](#type-catalogitemvariation)s. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the CatalogItemVariation&#39;s price.
            </summary>
            <value>The base price for a single unit of the line item.  &#x60;base_price_money&#x60; is required for ad hoc line items and variable priced [CatalogItemVariation](#type-catalogitemvariation)s. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the CatalogItemVariation&#39;s price.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.VariationName">
            <summary>
            Only used for ad hoc line items. The variation name of the line item. This value cannot exceed 255 characters.  If this value is not set for an ad hoc line item, the default value of &#x60;Regular&#x60; is used.  Do not provide a value for this field if you provide a value for the &#x60;catalog_object_id&#x60;.
            </summary>
            <value>Only used for ad hoc line items. The variation name of the line item. This value cannot exceed 255 characters.  If this value is not set for an ad hoc line item, the default value of &#x60;Regular&#x60; is used.  Do not provide a value for this field if you provide a value for the &#x60;catalog_object_id&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Note">
            <summary>
            The note of the line item. This value cannot exceed 500 characters.
            </summary>
            <value>The note of the line item. This value cannot exceed 500 characters.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.CatalogObjectId">
            <summary>
            Only used for Catalog line items. The catalog object ID for an existing [CatalogItemVariation](#type-catalogitemvariation).  Do not provide a value for this field if you provide a value for &#x60;name&#x60; and &#x60;base_price_money&#x60;.
            </summary>
            <value>Only used for Catalog line items. The catalog object ID for an existing [CatalogItemVariation](#type-catalogitemvariation).  Do not provide a value for this field if you provide a value for &#x60;name&#x60; and &#x60;base_price_money&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Modifiers">
            <summary>
            Only used for Catalog line items. The modifiers to include on the line item.
            </summary>
            <value>Only used for Catalog line items. The modifiers to include on the line item.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Taxes">
            <summary>
            The taxes to include on the line item.
            </summary>
            <value>The taxes to include on the line item.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Discounts">
            <summary>
            The discounts to include on the line item.
            </summary>
            <value>The discounts to include on the line item.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.Equals(Square.Connect.Model.CreateOrderRequestLineItem)">
            <summary>
            Returns true if CreateOrderRequestLineItem instances are equal
            </summary>
            <param name="other">Instance of CreateOrderRequestLineItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestModifier">
            <summary>
            __Deprecated__: Please use the [OrderLineItemModifier](#type-orderlineitemmodifier) type instead.  Represents a modifier applied to a single line item.  Modifiers can reference existing objects in a merchant catalog or be constructed ad hoc at the time of purchase by providing a name and price.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.#ctor(System.String,System.String,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestModifier" /> class.
            </summary>
            <param name="CatalogObjectId">The catalog object ID of a [CatalogModifier](#type-catalogmodifier)..</param>
            <param name="Name">Only used for ad hoc modifiers. The name of the modifier. &#x60;name&#x60; cannot exceed 255 characters.  Do not provide a value for &#x60;name&#x60; if you provide a value for &#x60;catalog_object_id&#x60;..</param>
            <param name="BasePriceMoney">The base price for the modifier.  &#x60;base_price_money&#x60; is required for ad hoc modifiers. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the predefined [CatalogModifier](#type-catalogmodifier) price..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestModifier.CatalogObjectId">
            <summary>
            The catalog object ID of a [CatalogModifier](#type-catalogmodifier).
            </summary>
            <value>The catalog object ID of a [CatalogModifier](#type-catalogmodifier).</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestModifier.Name">
            <summary>
            Only used for ad hoc modifiers. The name of the modifier. &#x60;name&#x60; cannot exceed 255 characters.  Do not provide a value for &#x60;name&#x60; if you provide a value for &#x60;catalog_object_id&#x60;.
            </summary>
            <value>Only used for ad hoc modifiers. The name of the modifier. &#x60;name&#x60; cannot exceed 255 characters.  Do not provide a value for &#x60;name&#x60; if you provide a value for &#x60;catalog_object_id&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestModifier.BasePriceMoney">
            <summary>
            The base price for the modifier.  &#x60;base_price_money&#x60; is required for ad hoc modifiers. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the predefined [CatalogModifier](#type-catalogmodifier) price.
            </summary>
            <value>The base price for the modifier.  &#x60;base_price_money&#x60; is required for ad hoc modifiers. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the predefined [CatalogModifier](#type-catalogmodifier) price.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.Equals(Square.Connect.Model.CreateOrderRequestModifier)">
            <summary>
            Returns true if CreateOrderRequestModifier instances are equal
            </summary>
            <param name="other">Instance of CreateOrderRequestModifier to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestTax">
            <summary>
            __Deprecated__: Please use the [OrderLineItemTax](#type-orderlineitemtax) type in the order field of [CreateOrderRequest](#type-createorderrequest) instead.  Represents a tax that can apply to either a single line item or an entire order.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestTax.TypeEnum">
            <summary>
            Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
            </summary>
            <value>Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CreateOrderRequestTax.TypeEnum.UNKNOWNTAX">
            <summary>
            Enum UNKNOWNTAX for "UNKNOWN_TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CreateOrderRequestTax.TypeEnum.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CreateOrderRequestTax.TypeEnum.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestTax.Type">
            <summary>
            Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
            </summary>
            <value>Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.CreateOrderRequestTax.TypeEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestTax" /> class.
            </summary>
            <param name="CatalogObjectId">Only used for catalog taxes. The catalog object ID of an existing [CatalogTax](#type-catalogtax).  Do not provide a value for this field if you provide values in other fields for an ad hoc tax..</param>
            <param name="Name">Only used for ad hoc taxes. The tax&#39;s name.  Do not provide a value for this field if you set &#x60;catalog_object_id&#x60;..</param>
            <param name="Type">Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: &#x60;ADDITIVE&#x60;; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.</param>
            <param name="Percentage">Only used for ad hoc taxes. The percentage of the tax, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0.</param>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestTax.CatalogObjectId">
            <summary>
            Only used for catalog taxes. The catalog object ID of an existing [CatalogTax](#type-catalogtax).  Do not provide a value for this field if you provide values in other fields for an ad hoc tax.
            </summary>
            <value>Only used for catalog taxes. The catalog object ID of an existing [CatalogTax](#type-catalogtax).  Do not provide a value for this field if you provide values in other fields for an ad hoc tax.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestTax.Name">
            <summary>
            Only used for ad hoc taxes. The tax&#39;s name.  Do not provide a value for this field if you set &#x60;catalog_object_id&#x60;.
            </summary>
            <value>Only used for ad hoc taxes. The tax&#39;s name.  Do not provide a value for this field if you set &#x60;catalog_object_id&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestTax.Percentage">
            <summary>
            Only used for ad hoc taxes. The percentage of the tax, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0
            </summary>
            <value>Only used for ad hoc taxes. The percentage of the tax, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0</value>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.Equals(Square.Connect.Model.CreateOrderRequestTax)">
            <summary>
            Returns true if CreateOrderRequestTax instances are equal
            </summary>
            <param name="other">Instance of CreateOrderRequestTax to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateOrderResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the CreateOrder endpoint.  One of &#x60;errors&#x60; or &#x60;order&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.#ctor(Square.Connect.Model.Order,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderResponse" /> class.
            </summary>
            <param name="Order">The newly created order..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderResponse.Order">
            <summary>
            The newly created order.
            </summary>
            <value>The newly created order.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateOrderResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.Equals(Square.Connect.Model.CreateOrderResponse)">
            <summary>
            Returns true if CreateOrderResponse instances are equal
            </summary>
            <param name="other">Instance of CreateOrderResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateRefundRequest">
            <summary>
            Defines the body parameters that can be included in a request to the CreateRefund endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundRequest" /> class.
            </summary>
            <param name="IdempotencyKey">A value you specify that uniquely identifies this refund among refunds you&#39;ve created for the tender.  If you&#39;re unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency](/basics/api101/idempotency) for more information. (required).</param>
            <param name="TenderId">The ID of the tender to refund.  A [&#x60;Transaction&#x60;](#type-transaction) has one or more &#x60;tenders&#x60; (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API. (required).</param>
            <param name="Reason">A description of the reason for the refund.  Default value: &#x60;Refund via API&#x60;.</param>
            <param name="AmountMoney">The amount of money to refund.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  This amount cannot exceed the amount that was originally charged to the tender that corresponds to &#x60;tender_id&#x60;. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.IdempotencyKey">
            <summary>
            A value you specify that uniquely identifies this refund among refunds you&#39;ve created for the tender.  If you&#39;re unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency](/basics/api101/idempotency) for more information.
            </summary>
            <value>A value you specify that uniquely identifies this refund among refunds you&#39;ve created for the tender.  If you&#39;re unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency](/basics/api101/idempotency) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.TenderId">
            <summary>
            The ID of the tender to refund.  A [&#x60;Transaction&#x60;](#type-transaction) has one or more &#x60;tenders&#x60; (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.
            </summary>
            <value>The ID of the tender to refund.  A [&#x60;Transaction&#x60;](#type-transaction) has one or more &#x60;tenders&#x60; (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.Reason">
            <summary>
            A description of the reason for the refund.  Default value: &#x60;Refund via API&#x60;
            </summary>
            <value>A description of the reason for the refund.  Default value: &#x60;Refund via API&#x60;</value>
        </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.AmountMoney">
            <summary>
            The amount of money to refund.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  This amount cannot exceed the amount that was originally charged to the tender that corresponds to &#x60;tender_id&#x60;.
            </summary>
            <value>The amount of money to refund.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  This amount cannot exceed the amount that was originally charged to the tender that corresponds to &#x60;tender_id&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.Equals(Square.Connect.Model.CreateRefundRequest)">
            <summary>
            Returns true if CreateRefundRequest instances are equal
            </summary>
            <param name="other">Instance of CreateRefundRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateRefundResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the CreateRefund endpoint.  One of &#x60;errors&#x60; or &#x60;refund&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Refund)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Refund">The created refund..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateRefundResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateRefundResponse.Refund">
            <summary>
            The created refund.
            </summary>
            <value>The created refund.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.Equals(Square.Connect.Model.CreateRefundResponse)">
            <summary>
            Returns true if CreateRefundResponse instances are equal
            </summary>
            <param name="other">Instance of CreateRefundResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateShiftRequest">
            <summary>
            Represents a request to create a &#x60;Shift&#x60;
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateShiftRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftRequest.#ctor(System.String,Square.Connect.Model.Shift)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateShiftRequest" /> class.
            </summary>
            <param name="IdempotencyKey">Unique string value to insure the idempotency of the operation..</param>
            <param name="Shift">The &#x60;Shift&#x60; to be created (required).</param>
        </member>
        <member name="P:Square.Connect.Model.CreateShiftRequest.IdempotencyKey">
            <summary>
            Unique string value to insure the idempotency of the operation.
            </summary>
            <value>Unique string value to insure the idempotency of the operation.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateShiftRequest.Shift">
            <summary>
            The &#x60;Shift&#x60; to be created
            </summary>
            <value>The &#x60;Shift&#x60; to be created</value>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftRequest.Equals(Square.Connect.Model.CreateShiftRequest)">
            <summary>
            Returns true if CreateShiftRequest instances are equal
            </summary>
            <param name="other">Instance of CreateShiftRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CreateShiftResponse">
            <summary>
            The response to the request to create a &#x60;Shift&#x60;. Contains the created &#x60;Shift&#x60; object. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftResponse.#ctor(Square.Connect.Model.Shift,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateShiftResponse" /> class.
            </summary>
            <param name="Shift">The &#x60;Shift&#x60; that was created on the request..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.CreateShiftResponse.Shift">
            <summary>
            The &#x60;Shift&#x60; that was created on the request.
            </summary>
            <value>The &#x60;Shift&#x60; that was created on the request.</value>
        </member>
        <member name="P:Square.Connect.Model.CreateShiftResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftResponse.Equals(Square.Connect.Model.CreateShiftResponse)">
            <summary>
            Returns true if CreateShiftResponse instances are equal
            </summary>
            <param name="other">Instance of CreateShiftResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CreateShiftResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Currency">
            <summary>
            Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
            </summary>
            <value>Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).</value>
        </member>
        <member name="F:Square.Connect.Model.Currency.UNKNOWNCURRENCY">
            <summary>
            Enum UNKNOWNCURRENCY for "UNKNOWN_CURRENCY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.AED">
            <summary>
            Enum AED for "AED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.AFN">
            <summary>
            Enum AFN for "AFN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ALL">
            <summary>
            Enum ALL for "ALL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.AMD">
            <summary>
            Enum AMD for "AMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ANG">
            <summary>
            Enum ANG for "ANG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.AOA">
            <summary>
            Enum AOA for "AOA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ARS">
            <summary>
            Enum ARS for "ARS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.AUD">
            <summary>
            Enum AUD for "AUD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.AWG">
            <summary>
            Enum AWG for "AWG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.AZN">
            <summary>
            Enum AZN for "AZN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BAM">
            <summary>
            Enum BAM for "BAM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BBD">
            <summary>
            Enum BBD for "BBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BDT">
            <summary>
            Enum BDT for "BDT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BGN">
            <summary>
            Enum BGN for "BGN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BHD">
            <summary>
            Enum BHD for "BHD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BIF">
            <summary>
            Enum BIF for "BIF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BMD">
            <summary>
            Enum BMD for "BMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BND">
            <summary>
            Enum BND for "BND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BOB">
            <summary>
            Enum BOB for "BOB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BOV">
            <summary>
            Enum BOV for "BOV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BRL">
            <summary>
            Enum BRL for "BRL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BSD">
            <summary>
            Enum BSD for "BSD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BTN">
            <summary>
            Enum BTN for "BTN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BWP">
            <summary>
            Enum BWP for "BWP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BYR">
            <summary>
            Enum BYR for "BYR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BZD">
            <summary>
            Enum BZD for "BZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CAD">
            <summary>
            Enum CAD for "CAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CDF">
            <summary>
            Enum CDF for "CDF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CHE">
            <summary>
            Enum CHE for "CHE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CHF">
            <summary>
            Enum CHF for "CHF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CHW">
            <summary>
            Enum CHW for "CHW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CLF">
            <summary>
            Enum CLF for "CLF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CLP">
            <summary>
            Enum CLP for "CLP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CNY">
            <summary>
            Enum CNY for "CNY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.COP">
            <summary>
            Enum COP for "COP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.COU">
            <summary>
            Enum COU for "COU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CRC">
            <summary>
            Enum CRC for "CRC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CUC">
            <summary>
            Enum CUC for "CUC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CUP">
            <summary>
            Enum CUP for "CUP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CVE">
            <summary>
            Enum CVE for "CVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.CZK">
            <summary>
            Enum CZK for "CZK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.DJF">
            <summary>
            Enum DJF for "DJF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.DKK">
            <summary>
            Enum DKK for "DKK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.DOP">
            <summary>
            Enum DOP for "DOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.DZD">
            <summary>
            Enum DZD for "DZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.EGP">
            <summary>
            Enum EGP for "EGP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ERN">
            <summary>
            Enum ERN for "ERN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ETB">
            <summary>
            Enum ETB for "ETB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.EUR">
            <summary>
            Enum EUR for "EUR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.FJD">
            <summary>
            Enum FJD for "FJD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.FKP">
            <summary>
            Enum FKP for "FKP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.GBP">
            <summary>
            Enum GBP for "GBP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.GEL">
            <summary>
            Enum GEL for "GEL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.GHS">
            <summary>
            Enum GHS for "GHS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.GIP">
            <summary>
            Enum GIP for "GIP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.GMD">
            <summary>
            Enum GMD for "GMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.GNF">
            <summary>
            Enum GNF for "GNF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.GTQ">
            <summary>
            Enum GTQ for "GTQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.GYD">
            <summary>
            Enum GYD for "GYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.HKD">
            <summary>
            Enum HKD for "HKD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.HNL">
            <summary>
            Enum HNL for "HNL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.HRK">
            <summary>
            Enum HRK for "HRK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.HTG">
            <summary>
            Enum HTG for "HTG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.HUF">
            <summary>
            Enum HUF for "HUF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.IDR">
            <summary>
            Enum IDR for "IDR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ILS">
            <summary>
            Enum ILS for "ILS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.INR">
            <summary>
            Enum INR for "INR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.IQD">
            <summary>
            Enum IQD for "IQD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.IRR">
            <summary>
            Enum IRR for "IRR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ISK">
            <summary>
            Enum ISK for "ISK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.JMD">
            <summary>
            Enum JMD for "JMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.JOD">
            <summary>
            Enum JOD for "JOD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.JPY">
            <summary>
            Enum JPY for "JPY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.KES">
            <summary>
            Enum KES for "KES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.KGS">
            <summary>
            Enum KGS for "KGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.KHR">
            <summary>
            Enum KHR for "KHR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.KMF">
            <summary>
            Enum KMF for "KMF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.KPW">
            <summary>
            Enum KPW for "KPW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.KRW">
            <summary>
            Enum KRW for "KRW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.KWD">
            <summary>
            Enum KWD for "KWD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.KYD">
            <summary>
            Enum KYD for "KYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.KZT">
            <summary>
            Enum KZT for "KZT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.LAK">
            <summary>
            Enum LAK for "LAK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.LBP">
            <summary>
            Enum LBP for "LBP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.LKR">
            <summary>
            Enum LKR for "LKR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.LRD">
            <summary>
            Enum LRD for "LRD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.LSL">
            <summary>
            Enum LSL for "LSL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.LTL">
            <summary>
            Enum LTL for "LTL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.LVL">
            <summary>
            Enum LVL for "LVL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.LYD">
            <summary>
            Enum LYD for "LYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MAD">
            <summary>
            Enum MAD for "MAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MDL">
            <summary>
            Enum MDL for "MDL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MGA">
            <summary>
            Enum MGA for "MGA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MKD">
            <summary>
            Enum MKD for "MKD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MMK">
            <summary>
            Enum MMK for "MMK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MNT">
            <summary>
            Enum MNT for "MNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MOP">
            <summary>
            Enum MOP for "MOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MRO">
            <summary>
            Enum MRO for "MRO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MUR">
            <summary>
            Enum MUR for "MUR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MVR">
            <summary>
            Enum MVR for "MVR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MWK">
            <summary>
            Enum MWK for "MWK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MXN">
            <summary>
            Enum MXN for "MXN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MXV">
            <summary>
            Enum MXV for "MXV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MYR">
            <summary>
            Enum MYR for "MYR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.MZN">
            <summary>
            Enum MZN for "MZN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.NAD">
            <summary>
            Enum NAD for "NAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.NGN">
            <summary>
            Enum NGN for "NGN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.NIO">
            <summary>
            Enum NIO for "NIO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.NOK">
            <summary>
            Enum NOK for "NOK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.NPR">
            <summary>
            Enum NPR for "NPR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.NZD">
            <summary>
            Enum NZD for "NZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.OMR">
            <summary>
            Enum OMR for "OMR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.PAB">
            <summary>
            Enum PAB for "PAB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.PEN">
            <summary>
            Enum PEN for "PEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.PGK">
            <summary>
            Enum PGK for "PGK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.PHP">
            <summary>
            Enum PHP for "PHP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.PKR">
            <summary>
            Enum PKR for "PKR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.PLN">
            <summary>
            Enum PLN for "PLN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.PYG">
            <summary>
            Enum PYG for "PYG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.QAR">
            <summary>
            Enum QAR for "QAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.RON">
            <summary>
            Enum RON for "RON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.RSD">
            <summary>
            Enum RSD for "RSD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.RUB">
            <summary>
            Enum RUB for "RUB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.RWF">
            <summary>
            Enum RWF for "RWF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SAR">
            <summary>
            Enum SAR for "SAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SBD">
            <summary>
            Enum SBD for "SBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SCR">
            <summary>
            Enum SCR for "SCR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SDG">
            <summary>
            Enum SDG for "SDG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SEK">
            <summary>
            Enum SEK for "SEK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SGD">
            <summary>
            Enum SGD for "SGD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SHP">
            <summary>
            Enum SHP for "SHP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SLL">
            <summary>
            Enum SLL for "SLL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SOS">
            <summary>
            Enum SOS for "SOS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SRD">
            <summary>
            Enum SRD for "SRD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SSP">
            <summary>
            Enum SSP for "SSP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.STD">
            <summary>
            Enum STD for "STD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SVC">
            <summary>
            Enum SVC for "SVC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SYP">
            <summary>
            Enum SYP for "SYP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.SZL">
            <summary>
            Enum SZL for "SZL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.THB">
            <summary>
            Enum THB for "THB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.TJS">
            <summary>
            Enum TJS for "TJS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.TMT">
            <summary>
            Enum TMT for "TMT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.TND">
            <summary>
            Enum TND for "TND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.TOP">
            <summary>
            Enum TOP for "TOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.TRY">
            <summary>
            Enum TRY for "TRY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.TTD">
            <summary>
            Enum TTD for "TTD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.TWD">
            <summary>
            Enum TWD for "TWD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.TZS">
            <summary>
            Enum TZS for "TZS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.UAH">
            <summary>
            Enum UAH for "UAH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.UGX">
            <summary>
            Enum UGX for "UGX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.USD">
            <summary>
            Enum USD for "USD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.USN">
            <summary>
            Enum USN for "USN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.USS">
            <summary>
            Enum USS for "USS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.UYI">
            <summary>
            Enum UYI for "UYI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.UYU">
            <summary>
            Enum UYU for "UYU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.UZS">
            <summary>
            Enum UZS for "UZS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.VEF">
            <summary>
            Enum VEF for "VEF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.VND">
            <summary>
            Enum VND for "VND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.VUV">
            <summary>
            Enum VUV for "VUV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.WST">
            <summary>
            Enum WST for "WST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XAF">
            <summary>
            Enum XAF for "XAF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XAG">
            <summary>
            Enum XAG for "XAG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XAU">
            <summary>
            Enum XAU for "XAU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XBA">
            <summary>
            Enum XBA for "XBA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XBB">
            <summary>
            Enum XBB for "XBB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XBC">
            <summary>
            Enum XBC for "XBC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XBD">
            <summary>
            Enum XBD for "XBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XCD">
            <summary>
            Enum XCD for "XCD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XDR">
            <summary>
            Enum XDR for "XDR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XOF">
            <summary>
            Enum XOF for "XOF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XPD">
            <summary>
            Enum XPD for "XPD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XPF">
            <summary>
            Enum XPF for "XPF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XPT">
            <summary>
            Enum XPT for "XPT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XTS">
            <summary>
            Enum XTS for "XTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.XXX">
            <summary>
            Enum XXX for "XXX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.YER">
            <summary>
            Enum YER for "YER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ZAR">
            <summary>
            Enum ZAR for "ZAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ZMK">
            <summary>
            Enum ZMK for "ZMK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.ZMW">
            <summary>
            Enum ZMW for "ZMW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Currency.BTC">
            <summary>
            Enum BTC for "BTC"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Customer">
            <summary>
            Represents one of a business&#39;s customers, which can have one or more cards on file associated with it.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Customer.CreationSourceEnum">
            <summary>
            A creation source represents the method used to create the customer profile. See [CustomerCreationSource](#type-customercreationsource) for possible values
            </summary>
            <value>A creation source represents the method used to create the customer profile. See [CustomerCreationSource](#type-customercreationsource) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.APPOINTMENTS">
            <summary>
            Enum APPOINTMENTS for "APPOINTMENTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.COUPON">
            <summary>
            Enum COUPON for "COUPON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.DELETIONRECOVERY">
            <summary>
            Enum DELETIONRECOVERY for "DELETION_RECOVERY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.DIRECTORY">
            <summary>
            Enum DIRECTORY for "DIRECTORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.EGIFTING">
            <summary>
            Enum EGIFTING for "EGIFTING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.EMAILCOLLECTION">
            <summary>
            Enum EMAILCOLLECTION for "EMAIL_COLLECTION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.FEEDBACK">
            <summary>
            Enum FEEDBACK for "FEEDBACK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.IMPORT">
            <summary>
            Enum IMPORT for "IMPORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.INVOICES">
            <summary>
            Enum INVOICES for "INVOICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.LOYALTY">
            <summary>
            Enum LOYALTY for "LOYALTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.MARKETING">
            <summary>
            Enum MARKETING for "MARKETING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.MERGE">
            <summary>
            Enum MERGE for "MERGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.ONLINESTORE">
            <summary>
            Enum ONLINESTORE for "ONLINE_STORE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.INSTANTPROFILE">
            <summary>
            Enum INSTANTPROFILE for "INSTANT_PROFILE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.TERMINAL">
            <summary>
            Enum TERMINAL for "TERMINAL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.THIRDPARTY">
            <summary>
            Enum THIRDPARTY for "THIRD_PARTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.THIRDPARTYIMPORT">
            <summary>
            Enum THIRDPARTYIMPORT for "THIRD_PARTY_IMPORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Customer.CreationSourceEnum.UNMERGERECOVERY">
            <summary>
            Enum UNMERGERECOVERY for "UNMERGE_RECOVERY"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Customer.CreationSource">
            <summary>
            A creation source represents the method used to create the customer profile. See [CustomerCreationSource](#type-customercreationsource) for possible values
            </summary>
            <value>A creation source represents the method used to create the customer profile. See [CustomerCreationSource](#type-customercreationsource) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Customer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Customer" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.Customer.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.Card},System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String,System.String,Square.Connect.Model.CustomerPreferences,System.Collections.Generic.List{Square.Connect.Model.CustomerGroupInfo},System.Nullable{Square.Connect.Model.Customer.CreationSourceEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Customer" /> class.
            </summary>
            <param name="Id">The customer&#39;s unique ID. (required).</param>
            <param name="CreatedAt">The time when the customer was created, in RFC 3339 format. (required).</param>
            <param name="UpdatedAt">The time when the customer was last updated, in RFC 3339 format. (required).</param>
            <param name="Cards">The payment details of the customer&#39;s cards on file..</param>
            <param name="GivenName">The customer&#39;s given (i.e., first) name..</param>
            <param name="FamilyName">The customer&#39;s family (i.e., last) name..</param>
            <param name="Nickname">The customer&#39;s nickname..</param>
            <param name="CompanyName">The name of the customer&#39;s company..</param>
            <param name="EmailAddress">The customer&#39;s email address..</param>
            <param name="Address">The customer&#39;s physical address..</param>
            <param name="PhoneNumber">The customer&#39;s phone number..</param>
            <param name="Birthday">The customer&#39;s birthday in RFC-3339 format. Year is optional, timezone and times are not allowed. Example: &#x60;0000-09-01T00:00:00-00:00&#x60; for a birthday on September 1st. &#x60;1998-09-01T00:00:00-00:00&#x60; for a birthday on September 1st 1998..</param>
            <param name="ReferenceId">A second ID you can set to associate the customer with an entity in another system..</param>
            <param name="Note">A note to associate with the customer..</param>
            <param name="Preferences">The customer&#39;s preferences..</param>
            <param name="Groups">The groups the customer belongs to..</param>
            <param name="CreationSource">A creation source represents the method used to create the customer profile. See [CustomerCreationSource](#type-customercreationsource) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.Customer.Id">
            <summary>
            The customer&#39;s unique ID.
            </summary>
            <value>The customer&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.CreatedAt">
            <summary>
            The time when the customer was created, in RFC 3339 format.
            </summary>
            <value>The time when the customer was created, in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.UpdatedAt">
            <summary>
            The time when the customer was last updated, in RFC 3339 format.
            </summary>
            <value>The time when the customer was last updated, in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.Cards">
            <summary>
            The payment details of the customer&#39;s cards on file.
            </summary>
            <value>The payment details of the customer&#39;s cards on file.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.GivenName">
            <summary>
            The customer&#39;s given (i.e., first) name.
            </summary>
            <value>The customer&#39;s given (i.e., first) name.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.FamilyName">
            <summary>
            The customer&#39;s family (i.e., last) name.
            </summary>
            <value>The customer&#39;s family (i.e., last) name.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.Nickname">
            <summary>
            The customer&#39;s nickname.
            </summary>
            <value>The customer&#39;s nickname.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.CompanyName">
            <summary>
            The name of the customer&#39;s company.
            </summary>
            <value>The name of the customer&#39;s company.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.EmailAddress">
            <summary>
            The customer&#39;s email address.
            </summary>
            <value>The customer&#39;s email address.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.Address">
            <summary>
            The customer&#39;s physical address.
            </summary>
            <value>The customer&#39;s physical address.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.PhoneNumber">
            <summary>
            The customer&#39;s phone number.
            </summary>
            <value>The customer&#39;s phone number.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.Birthday">
            <summary>
            The customer&#39;s birthday in RFC-3339 format. Year is optional, timezone and times are not allowed. Example: &#x60;0000-09-01T00:00:00-00:00&#x60; for a birthday on September 1st. &#x60;1998-09-01T00:00:00-00:00&#x60; for a birthday on September 1st 1998.
            </summary>
            <value>The customer&#39;s birthday in RFC-3339 format. Year is optional, timezone and times are not allowed. Example: &#x60;0000-09-01T00:00:00-00:00&#x60; for a birthday on September 1st. &#x60;1998-09-01T00:00:00-00:00&#x60; for a birthday on September 1st 1998.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.ReferenceId">
            <summary>
            A second ID you can set to associate the customer with an entity in another system.
            </summary>
            <value>A second ID you can set to associate the customer with an entity in another system.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.Note">
            <summary>
            A note to associate with the customer.
            </summary>
            <value>A note to associate with the customer.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.Preferences">
            <summary>
            The customer&#39;s preferences.
            </summary>
            <value>The customer&#39;s preferences.</value>
        </member>
        <member name="P:Square.Connect.Model.Customer.Groups">
            <summary>
            The groups the customer belongs to.
            </summary>
            <value>The groups the customer belongs to.</value>
        </member>
        <member name="M:Square.Connect.Model.Customer.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Customer.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Customer.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Customer.Equals(Square.Connect.Model.Customer)">
            <summary>
            Returns true if Customer instances are equal
            </summary>
            <param name="other">Instance of Customer to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Customer.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CustomerCreationSource">
            <summary>
            Indicates the method used to create the customer profile.
            </summary>
            <value>Indicates the method used to create the customer profile.</value>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.APPOINTMENTS">
            <summary>
            Enum APPOINTMENTS for "APPOINTMENTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.COUPON">
            <summary>
            Enum COUPON for "COUPON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.DELETIONRECOVERY">
            <summary>
            Enum DELETIONRECOVERY for "DELETION_RECOVERY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.DIRECTORY">
            <summary>
            Enum DIRECTORY for "DIRECTORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.EGIFTING">
            <summary>
            Enum EGIFTING for "EGIFTING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.EMAILCOLLECTION">
            <summary>
            Enum EMAILCOLLECTION for "EMAIL_COLLECTION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.FEEDBACK">
            <summary>
            Enum FEEDBACK for "FEEDBACK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.IMPORT">
            <summary>
            Enum IMPORT for "IMPORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.INVOICES">
            <summary>
            Enum INVOICES for "INVOICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.LOYALTY">
            <summary>
            Enum LOYALTY for "LOYALTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.MARKETING">
            <summary>
            Enum MARKETING for "MARKETING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.MERGE">
            <summary>
            Enum MERGE for "MERGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.ONLINESTORE">
            <summary>
            Enum ONLINESTORE for "ONLINE_STORE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.INSTANTPROFILE">
            <summary>
            Enum INSTANTPROFILE for "INSTANT_PROFILE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.TERMINAL">
            <summary>
            Enum TERMINAL for "TERMINAL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.THIRDPARTY">
            <summary>
            Enum THIRDPARTY for "THIRD_PARTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.THIRDPARTYIMPORT">
            <summary>
            Enum THIRDPARTYIMPORT for "THIRD_PARTY_IMPORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSource.UNMERGERECOVERY">
            <summary>
            Enum UNMERGERECOVERY for "UNMERGE_RECOVERY"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CustomerCreationSourceFilter">
            <summary>
            Creation source filter.  If one or more creation sources are set, customer profiles are included in, or excluded from, the result if they match at least one of the filter criteria.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum">
            <summary>
            Gets or Sets Values
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.APPOINTMENTS">
            <summary>
            Enum APPOINTMENTS for "APPOINTMENTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.COUPON">
            <summary>
            Enum COUPON for "COUPON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.DELETIONRECOVERY">
            <summary>
            Enum DELETIONRECOVERY for "DELETION_RECOVERY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.DIRECTORY">
            <summary>
            Enum DIRECTORY for "DIRECTORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.EGIFTING">
            <summary>
            Enum EGIFTING for "EGIFTING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.EMAILCOLLECTION">
            <summary>
            Enum EMAILCOLLECTION for "EMAIL_COLLECTION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.FEEDBACK">
            <summary>
            Enum FEEDBACK for "FEEDBACK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.IMPORT">
            <summary>
            Enum IMPORT for "IMPORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.INVOICES">
            <summary>
            Enum INVOICES for "INVOICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.LOYALTY">
            <summary>
            Enum LOYALTY for "LOYALTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.MARKETING">
            <summary>
            Enum MARKETING for "MARKETING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.MERGE">
            <summary>
            Enum MERGE for "MERGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.ONLINESTORE">
            <summary>
            Enum ONLINESTORE for "ONLINE_STORE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.INSTANTPROFILE">
            <summary>
            Enum INSTANTPROFILE for "INSTANT_PROFILE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.TERMINAL">
            <summary>
            Enum TERMINAL for "TERMINAL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.THIRDPARTY">
            <summary>
            Enum THIRDPARTY for "THIRD_PARTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.THIRDPARTYIMPORT">
            <summary>
            Enum THIRDPARTYIMPORT for "THIRD_PARTY_IMPORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum.UNMERGERECOVERY">
            <summary>
            Enum UNMERGERECOVERY for "UNMERGE_RECOVERY"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CustomerCreationSourceFilter.RuleEnum">
            <summary>
            Indicates whether a customer profile matching the filter criteria should be included in the result or excluded from the result. Default: `INCLUDE`. See [CustomerInclusionExclusion](#type-customerinclusionexclusion) for possible values
            </summary>
            <value>Indicates whether a customer profile matching the filter criteria should be included in the result or excluded from the result. Default: `INCLUDE`. See [CustomerInclusionExclusion](#type-customerinclusionexclusion) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.RuleEnum.INCLUDE">
            <summary>
            Enum INCLUDE for "INCLUDE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerCreationSourceFilter.RuleEnum.EXCLUDE">
            <summary>
            Enum EXCLUDE for "EXCLUDE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CustomerCreationSourceFilter.Values">
            <summary>
            The list of creation sources used as filtering criteria. See [CustomerCreationSource](#type-customercreationsource) for possible values
            </summary>
            <value>The list of creation sources used as filtering criteria. See [CustomerCreationSource](#type-customercreationsource) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.CustomerCreationSourceFilter.Rule">
            <summary>
            Indicates whether a customer profile matching the filter criteria should be included in the result or excluded from the result. Default: `INCLUDE`. See [CustomerInclusionExclusion](#type-customerinclusionexclusion) for possible values
            </summary>
            <value>Indicates whether a customer profile matching the filter criteria should be included in the result or excluded from the result. Default: `INCLUDE`. See [CustomerInclusionExclusion](#type-customerinclusionexclusion) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CustomerCreationSourceFilter.#ctor(System.Collections.Generic.List{Square.Connect.Model.CustomerCreationSourceFilter.ValuesEnum},System.Nullable{Square.Connect.Model.CustomerCreationSourceFilter.RuleEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerCreationSourceFilter" /> class.
            </summary>
            <param name="Values">The list of creation sources used as filtering criteria. See [CustomerCreationSource](#type-customercreationsource) for possible values.</param>
            <param name="Rule">Indicates whether a customer profile matching the filter criteria should be included in the result or excluded from the result. Default: &#x60;INCLUDE&#x60;. See [CustomerInclusionExclusion](#type-customerinclusionexclusion) for possible values.</param>
        </member>
        <member name="M:Square.Connect.Model.CustomerCreationSourceFilter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerCreationSourceFilter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerCreationSourceFilter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerCreationSourceFilter.Equals(Square.Connect.Model.CustomerCreationSourceFilter)">
            <summary>
            Returns true if CustomerCreationSourceFilter instances are equal
            </summary>
            <param name="other">Instance of CustomerCreationSourceFilter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerCreationSourceFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CustomerFilter">
            <summary>
            Represents a set of [&#x60;CustomerQuery&#x60;](#type-customerquery) filters used to limit the set of Customers returned by [&#x60;SearchCustomers&#x60;](#endpoint-customers-seachcustomers).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CustomerFilter.#ctor(Square.Connect.Model.CustomerCreationSourceFilter,Square.Connect.Model.TimeRange,Square.Connect.Model.TimeRange)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerFilter" /> class.
            </summary>
            <param name="CreationSource">A filter to select customers based on their creation source..</param>
            <param name="CreatedAt">A filter to select customers based on when they were created..</param>
            <param name="UpdatedAt">A filter to select customers based on when they were updated..</param>
        </member>
        <member name="P:Square.Connect.Model.CustomerFilter.CreationSource">
            <summary>
            A filter to select customers based on their creation source.
            </summary>
            <value>A filter to select customers based on their creation source.</value>
        </member>
        <member name="P:Square.Connect.Model.CustomerFilter.CreatedAt">
            <summary>
            A filter to select customers based on when they were created.
            </summary>
            <value>A filter to select customers based on when they were created.</value>
        </member>
        <member name="P:Square.Connect.Model.CustomerFilter.UpdatedAt">
            <summary>
            A filter to select customers based on when they were updated.
            </summary>
            <value>A filter to select customers based on when they were updated.</value>
        </member>
        <member name="M:Square.Connect.Model.CustomerFilter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerFilter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerFilter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerFilter.Equals(Square.Connect.Model.CustomerFilter)">
            <summary>
            Returns true if CustomerFilter instances are equal
            </summary>
            <param name="other">Instance of CustomerFilter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CustomerGroupInfo">
            <summary>
            Contains some brief information about a customer group with its identifier included.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerGroupInfo" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerGroupInfo" /> class.
            </summary>
            <param name="Id">The ID of the customer group. (required).</param>
            <param name="Name">The name of the customer group. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.CustomerGroupInfo.Id">
            <summary>
            The ID of the customer group.
            </summary>
            <value>The ID of the customer group.</value>
        </member>
        <member name="P:Square.Connect.Model.CustomerGroupInfo.Name">
            <summary>
            The name of the customer group.
            </summary>
            <value>The name of the customer group.</value>
        </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.Equals(Square.Connect.Model.CustomerGroupInfo)">
            <summary>
            Returns true if CustomerGroupInfo instances are equal
            </summary>
            <param name="other">Instance of CustomerGroupInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CustomerInclusionExclusion">
            <summary>
            Indicates whether customers should be included in, or excluded from, the result set when they match the filtering criteria.
            </summary>
            <value>Indicates whether customers should be included in, or excluded from, the result set when they match the filtering criteria.</value>
        </member>
        <member name="F:Square.Connect.Model.CustomerInclusionExclusion.INCLUDE">
            <summary>
            Enum INCLUDE for "INCLUDE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerInclusionExclusion.EXCLUDE">
            <summary>
            Enum EXCLUDE for "EXCLUDE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CustomerPreferences">
            <summary>
            Represents a particular customer&#39;s preferences.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerPreferences" /> class.
            </summary>
            <param name="EmailUnsubscribed">The customer has unsubscribed from receiving marketing campaign emails..</param>
        </member>
        <member name="P:Square.Connect.Model.CustomerPreferences.EmailUnsubscribed">
            <summary>
            The customer has unsubscribed from receiving marketing campaign emails.
            </summary>
            <value>The customer has unsubscribed from receiving marketing campaign emails.</value>
        </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.Equals(Square.Connect.Model.CustomerPreferences)">
            <summary>
            Returns true if CustomerPreferences instances are equal
            </summary>
            <param name="other">Instance of CustomerPreferences to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CustomerQuery">
            <summary>
            Represents a query (filtering and sorting criteria) used to search for customer profiles.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.CustomerQuery.#ctor(Square.Connect.Model.CustomerFilter,Square.Connect.Model.CustomerSort)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerQuery" /> class.
            </summary>
            <param name="Filter">A list of filter criteria..</param>
            <param name="Sort">Sort criteria for query results. The default sort behavior is to order customers alphabetically by &#x60;given_name&#x60; and &#x60;last_name&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.CustomerQuery.Filter">
            <summary>
            A list of filter criteria.
            </summary>
            <value>A list of filter criteria.</value>
        </member>
        <member name="P:Square.Connect.Model.CustomerQuery.Sort">
            <summary>
            Sort criteria for query results. The default sort behavior is to order customers alphabetically by &#x60;given_name&#x60; and &#x60;last_name&#x60;.
            </summary>
            <value>Sort criteria for query results. The default sort behavior is to order customers alphabetically by &#x60;given_name&#x60; and &#x60;last_name&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.CustomerQuery.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerQuery.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerQuery.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerQuery.Equals(Square.Connect.Model.CustomerQuery)">
            <summary>
            Returns true if CustomerQuery instances are equal
            </summary>
            <param name="other">Instance of CustomerQuery to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerQuery.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CustomerSort">
            <summary>
            Indicates the field to use for sorting customer profiles. For example, by total money spent with the merchant or the date of their first purchase.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CustomerSort.FieldEnum">
            <summary>
            The field to sort the results on. It could be the total money spent at the merchant, the date of the first visit (etc). See [CustomerSortField](#type-customersortfield) for possible values
            </summary>
            <value>The field to sort the results on. It could be the total money spent at the merchant, the date of the first visit (etc). See [CustomerSortField](#type-customersortfield) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CustomerSort.FieldEnum.DEFAULT">
            <summary>
            Enum DEFAULT for "DEFAULT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerSort.FieldEnum.CREATEDAT">
            <summary>
            Enum CREATEDAT for "CREATED_AT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.CustomerSort.OrderEnum">
            <summary>
            Indicates the order in which results should be displayed based on the value of the sort field. String comparisons use standard alphabetic comparison to determine order. Strings representing numbers are sorted as strings. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>Indicates the order in which results should be displayed based on the value of the sort field. String comparisons use standard alphabetic comparison to determine order. Strings representing numbers are sorted as strings. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.CustomerSort.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerSort.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.CustomerSort.Field">
            <summary>
            The field to sort the results on. It could be the total money spent at the merchant, the date of the first visit (etc). See [CustomerSortField](#type-customersortfield) for possible values
            </summary>
            <value>The field to sort the results on. It could be the total money spent at the merchant, the date of the first visit (etc). See [CustomerSortField](#type-customersortfield) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.CustomerSort.Order">
            <summary>
            Indicates the order in which results should be displayed based on the value of the sort field. String comparisons use standard alphabetic comparison to determine order. Strings representing numbers are sorted as strings. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>Indicates the order in which results should be displayed based on the value of the sort field. String comparisons use standard alphabetic comparison to determine order. Strings representing numbers are sorted as strings. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.CustomerSort.#ctor(System.Nullable{Square.Connect.Model.CustomerSort.FieldEnum},System.Nullable{Square.Connect.Model.CustomerSort.OrderEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerSort" /> class.
            </summary>
            <param name="Field">The field to sort the results on. It could be the total money spent at the merchant, the date of the first visit (etc). See [CustomerSortField](#type-customersortfield) for possible values.</param>
            <param name="Order">Indicates the order in which results should be displayed based on the value of the sort field. String comparisons use standard alphabetic comparison to determine order. Strings representing numbers are sorted as strings. See [SortOrder](#type-sortorder) for possible values.</param>
        </member>
        <member name="M:Square.Connect.Model.CustomerSort.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerSort.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerSort.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerSort.Equals(Square.Connect.Model.CustomerSort)">
            <summary>
            Returns true if CustomerSort instances are equal
            </summary>
            <param name="other">Instance of CustomerSort to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.CustomerSort.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.CustomerSortField">
            <summary>
            Indicates the sort criteria for a list of Customers.
            </summary>
            <value>Indicates the sort criteria for a list of Customers.</value>
        </member>
        <member name="F:Square.Connect.Model.CustomerSortField.DEFAULT">
            <summary>
            Enum DEFAULT for "DEFAULT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.CustomerSortField.CREATEDAT">
            <summary>
            Enum CREATEDAT for "CREATED_AT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.DateRange">
            <summary>
            A range defined by two dates. Used for filtering a query for Connect v2  objects that have date properties.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DateRange.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DateRange" /> class.
            </summary>
            <param name="StartDate">String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The beginning of a date range (inclusive).</param>
            <param name="EndDate">String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The end of a date range (inclusive).</param>
        </member>
        <member name="P:Square.Connect.Model.DateRange.StartDate">
            <summary>
            String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The beginning of a date range (inclusive)
            </summary>
            <value>String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The beginning of a date range (inclusive)</value>
        </member>
        <member name="P:Square.Connect.Model.DateRange.EndDate">
            <summary>
            String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The end of a date range (inclusive)
            </summary>
            <value>String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The end of a date range (inclusive)</value>
        </member>
        <member name="M:Square.Connect.Model.DateRange.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DateRange.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DateRange.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DateRange.Equals(Square.Connect.Model.DateRange)">
            <summary>
            Returns true if DateRange instances are equal
            </summary>
            <param name="other">Instance of DateRange to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DateRange.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DayOfWeek">
            <summary>
            Indicates the specific day  of the week.
            </summary>
            <value>Indicates the specific day  of the week.</value>
        </member>
        <member name="F:Square.Connect.Model.DayOfWeek.SUN">
            <summary>
            Enum SUN for "SUN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.DayOfWeek.MON">
            <summary>
            Enum MON for "MON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.DayOfWeek.TUE">
            <summary>
            Enum TUE for "TUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.DayOfWeek.WED">
            <summary>
            Enum WED for "WED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.DayOfWeek.THU">
            <summary>
            Enum THU for "THU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.DayOfWeek.FRI">
            <summary>
            Enum FRI for "FRI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.DayOfWeek.SAT">
            <summary>
            Enum SAT for "SAT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.DeleteBreakTypeRequest">
            <summary>
            A request to delete a &#x60;BreakType&#x60;
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteBreakTypeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeRequest.Equals(Square.Connect.Model.DeleteBreakTypeRequest)">
            <summary>
            Returns true if DeleteBreakTypeRequest instances are equal
            </summary>
            <param name="other">Instance of DeleteBreakTypeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DeleteBreakTypeResponse">
            <summary>
            The response to a request to delete a &#x60;BreakType&#x60;. May contain a set  of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteBreakTypeResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.DeleteBreakTypeResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeResponse.Equals(Square.Connect.Model.DeleteBreakTypeResponse)">
            <summary>
            Returns true if DeleteBreakTypeResponse instances are equal
            </summary>
            <param name="other">Instance of DeleteBreakTypeResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteBreakTypeResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DeleteCatalogObjectRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCatalogObjectRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.Equals(Square.Connect.Model.DeleteCatalogObjectRequest)">
            <summary>
            Returns true if DeleteCatalogObjectRequest instances are equal
            </summary>
            <param name="other">Instance of DeleteCatalogObjectRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DeleteCatalogObjectResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCatalogObjectResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="DeletedObjectIds">The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request. Multiple IDs may be returned when associated objects are also deleted, for example a [CatalogItemVariation](#type-catalogitemvariation) will be deleted (and its ID included in this field) when its parent [CatalogItem](#type-catalogitem) is deleted..</param>
            <param name="DeletedAt">The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;..</param>
        </member>
        <member name="P:Square.Connect.Model.DeleteCatalogObjectResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.DeleteCatalogObjectResponse.DeletedObjectIds">
            <summary>
            The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request. Multiple IDs may be returned when associated objects are also deleted, for example a [CatalogItemVariation](#type-catalogitemvariation) will be deleted (and its ID included in this field) when its parent [CatalogItem](#type-catalogitem) is deleted.
            </summary>
            <value>The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request. Multiple IDs may be returned when associated objects are also deleted, for example a [CatalogItemVariation](#type-catalogitemvariation) will be deleted (and its ID included in this field) when its parent [CatalogItem](#type-catalogitem) is deleted.</value>
        </member>
        <member name="P:Square.Connect.Model.DeleteCatalogObjectResponse.DeletedAt">
            <summary>
            The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.
            </summary>
            <value>The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.</value>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.Equals(Square.Connect.Model.DeleteCatalogObjectResponse)">
            <summary>
            Returns true if DeleteCatalogObjectResponse instances are equal
            </summary>
            <param name="other">Instance of DeleteCatalogObjectResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DeleteCustomerCardRequest">
            <summary>
            Defines the fields that are included in requests to the DeleteCustomerCard endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerCardRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.Equals(Square.Connect.Model.DeleteCustomerCardRequest)">
            <summary>
            Returns true if DeleteCustomerCardRequest instances are equal
            </summary>
            <param name="other">Instance of DeleteCustomerCardRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DeleteCustomerCardResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the DeleteCustomerCard endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerCardResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.DeleteCustomerCardResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.Equals(Square.Connect.Model.DeleteCustomerCardResponse)">
            <summary>
            Returns true if DeleteCustomerCardResponse instances are equal
            </summary>
            <param name="other">Instance of DeleteCustomerCardResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DeleteCustomerRequest">
            <summary>
            Defines the fields that are included in a request to the DeleteCustomer endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.Equals(Square.Connect.Model.DeleteCustomerRequest)">
            <summary>
            Returns true if DeleteCustomerRequest instances are equal
            </summary>
            <param name="other">Instance of DeleteCustomerRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DeleteCustomerResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the DeleteCustomer endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.DeleteCustomerResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.Equals(Square.Connect.Model.DeleteCustomerResponse)">
            <summary>
            Returns true if DeleteCustomerResponse instances are equal
            </summary>
            <param name="other">Instance of DeleteCustomerResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DeleteShiftRequest">
            <summary>
            A request to delete a &#x60;Shift&#x60;
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteShiftRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftRequest.Equals(Square.Connect.Model.DeleteShiftRequest)">
            <summary>
            Returns true if DeleteShiftRequest instances are equal
            </summary>
            <param name="other">Instance of DeleteShiftRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.DeleteShiftResponse">
            <summary>
            The response to a request to delete a &#x60;Shift&#x60;. May contain a set of  &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteShiftResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.DeleteShiftResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftResponse.Equals(Square.Connect.Model.DeleteShiftResponse)">
            <summary>
            Returns true if DeleteShiftResponse instances are equal
            </summary>
            <param name="other">Instance of DeleteShiftResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.DeleteShiftResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Device">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.Device.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Device" /> class.
            </summary>
            <param name="Id">The device&#39;s Square-issued ID..</param>
            <param name="Name">The device&#39;s merchant-specified name..</param>
        </member>
        <member name="P:Square.Connect.Model.Device.Id">
            <summary>
            The device&#39;s Square-issued ID.
            </summary>
            <value>The device&#39;s Square-issued ID.</value>
        </member>
        <member name="P:Square.Connect.Model.Device.Name">
            <summary>
            The device&#39;s merchant-specified name.
            </summary>
            <value>The device&#39;s merchant-specified name.</value>
        </member>
        <member name="M:Square.Connect.Model.Device.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Device.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Device.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Device.Equals(Square.Connect.Model.Device)">
            <summary>
            Returns true if Device instances are equal
            </summary>
            <param name="other">Instance of Device to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Device.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Employee">
            <summary>
            An employee created in the **Square Dashboard** account of a business.  Used by the Labor API.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Employee.StatusEnum">
            <summary>
            Specifies the status of the employee being fetched. See [EmployeeStatus](#type-employeestatus) for possible values
            </summary>
            <value>Specifies the status of the employee being fetched. See [EmployeeStatus](#type-employeestatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Employee.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for "ACTIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Employee.StatusEnum.INACTIVE">
            <summary>
            Enum INACTIVE for "INACTIVE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Employee.Status">
            <summary>
            Specifies the status of the employee being fetched. See [EmployeeStatus](#type-employeestatus) for possible values
            </summary>
            <value>Specifies the status of the employee being fetched. See [EmployeeStatus](#type-employeestatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Employee.#ctor(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Nullable{Square.Connect.Model.Employee.StatusEnum},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Employee" /> class.
            </summary>
            <param name="Id">UUID for this &#x60;Employee&#x60;..</param>
            <param name="FirstName">Given (first) name of the employee..</param>
            <param name="LastName">Family (last) name of the employee.</param>
            <param name="Email">Email of the employee.</param>
            <param name="PhoneNumber">Phone number of the employee in E.164 format, i.e. \&quot;+12125554250\&quot;.</param>
            <param name="LocationIds">A list of location IDs where this employee has access..</param>
            <param name="Status">Specifies the status of the employee being fetched. See [EmployeeStatus](#type-employeestatus) for possible values.</param>
            <param name="CreatedAt">A read-only timestamp in RFC 3339 format..</param>
            <param name="UpdatedAt">A read-only timestamp in RFC 3339 format..</param>
        </member>
        <member name="P:Square.Connect.Model.Employee.Id">
            <summary>
            UUID for this &#x60;Employee&#x60;.
            </summary>
            <value>UUID for this &#x60;Employee&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.Employee.FirstName">
            <summary>
            Given (first) name of the employee.
            </summary>
            <value>Given (first) name of the employee.</value>
        </member>
        <member name="P:Square.Connect.Model.Employee.LastName">
            <summary>
            Family (last) name of the employee
            </summary>
            <value>Family (last) name of the employee</value>
        </member>
        <member name="P:Square.Connect.Model.Employee.Email">
            <summary>
            Email of the employee
            </summary>
            <value>Email of the employee</value>
        </member>
        <member name="P:Square.Connect.Model.Employee.PhoneNumber">
            <summary>
            Phone number of the employee in E.164 format, i.e. \&quot;+12125554250\&quot;
            </summary>
            <value>Phone number of the employee in E.164 format, i.e. \&quot;+12125554250\&quot;</value>
        </member>
        <member name="P:Square.Connect.Model.Employee.LocationIds">
            <summary>
            A list of location IDs where this employee has access.
            </summary>
            <value>A list of location IDs where this employee has access.</value>
        </member>
        <member name="P:Square.Connect.Model.Employee.CreatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format.
            </summary>
            <value>A read-only timestamp in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.Employee.UpdatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format.
            </summary>
            <value>A read-only timestamp in RFC 3339 format.</value>
        </member>
        <member name="M:Square.Connect.Model.Employee.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Employee.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Employee.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Employee.Equals(Square.Connect.Model.Employee)">
            <summary>
            Returns true if Employee instances are equal
            </summary>
            <param name="other">Instance of Employee to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Employee.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.EmployeeStatus">
            <summary>
            The status of the Employee being retrieved.
            </summary>
            <value>The status of the Employee being retrieved.</value>
        </member>
        <member name="F:Square.Connect.Model.EmployeeStatus.ACTIVE">
            <summary>
            Enum ACTIVE for "ACTIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.EmployeeStatus.INACTIVE">
            <summary>
            Enum INACTIVE for "INACTIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.EmployeeWage">
            <summary>
            The hourly wage rate that an employee will earn on a &#x60;Shift&#x60; for doing the job specified by the &#x60;title&#x60; property of this object.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.EmployeeWage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.EmployeeWage" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.EmployeeWage.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.EmployeeWage" /> class.
            </summary>
            <param name="Id">UUID for this object..</param>
            <param name="EmployeeId">The &#x60;Employee&#x60; that this wage is assigned to. (required).</param>
            <param name="Title">The job title that this wage relates to..</param>
            <param name="HourlyRate">Can be a custom-set hourly wage or the calculated effective hourly wage based on annual wage and hours worked per week..</param>
        </member>
        <member name="P:Square.Connect.Model.EmployeeWage.Id">
            <summary>
            UUID for this object.
            </summary>
            <value>UUID for this object.</value>
        </member>
        <member name="P:Square.Connect.Model.EmployeeWage.EmployeeId">
            <summary>
            The &#x60;Employee&#x60; that this wage is assigned to.
            </summary>
            <value>The &#x60;Employee&#x60; that this wage is assigned to.</value>
        </member>
        <member name="P:Square.Connect.Model.EmployeeWage.Title">
            <summary>
            The job title that this wage relates to.
            </summary>
            <value>The job title that this wage relates to.</value>
        </member>
        <member name="P:Square.Connect.Model.EmployeeWage.HourlyRate">
            <summary>
            Can be a custom-set hourly wage or the calculated effective hourly wage based on annual wage and hours worked per week.
            </summary>
            <value>Can be a custom-set hourly wage or the calculated effective hourly wage based on annual wage and hours worked per week.</value>
        </member>
        <member name="M:Square.Connect.Model.EmployeeWage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.EmployeeWage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.EmployeeWage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.EmployeeWage.Equals(Square.Connect.Model.EmployeeWage)">
            <summary>
            Returns true if EmployeeWage instances are equal
            </summary>
            <param name="other">Instance of EmployeeWage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.EmployeeWage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Error">
            <summary>
            Represents an error encountered during a request to the Connect API.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Error.CategoryEnum">
            <summary>
            The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values
            </summary>
            <value>The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.APIERROR">
            <summary>
            Enum APIERROR for "API_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.AUTHENTICATIONERROR">
            <summary>
            Enum AUTHENTICATIONERROR for "AUTHENTICATION_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.INVALIDREQUESTERROR">
            <summary>
            Enum INVALIDREQUESTERROR for "INVALID_REQUEST_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.RATELIMITERROR">
            <summary>
            Enum RATELIMITERROR for "RATE_LIMIT_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.PAYMENTMETHODERROR">
            <summary>
            Enum PAYMENTMETHODERROR for "PAYMENT_METHOD_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.REFUNDERROR">
            <summary>
            Enum REFUNDERROR for "REFUND_ERROR"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Error.CodeEnum">
            <summary>
            The error's specific code. See [ErrorCode](#type-errorcode) for possible values
            </summary>
            <value>The error's specific code. See [ErrorCode](#type-errorcode) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INTERNALSERVERERROR">
            <summary>
            Enum INTERNALSERVERERROR for "INTERNAL_SERVER_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNAUTHORIZED">
            <summary>
            Enum UNAUTHORIZED for "UNAUTHORIZED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ACCESSTOKENEXPIRED">
            <summary>
            Enum ACCESSTOKENEXPIRED for "ACCESS_TOKEN_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ACCESSTOKENREVOKED">
            <summary>
            Enum ACCESSTOKENREVOKED for "ACCESS_TOKEN_REVOKED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.FORBIDDEN">
            <summary>
            Enum FORBIDDEN for "FORBIDDEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INSUFFICIENTSCOPES">
            <summary>
            Enum INSUFFICIENTSCOPES for "INSUFFICIENT_SCOPES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.APPLICATIONDISABLED">
            <summary>
            Enum APPLICATIONDISABLED for "APPLICATION_DISABLED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.V1APPLICATION">
            <summary>
            Enum V1APPLICATION for "V1_APPLICATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.V1ACCESSTOKEN">
            <summary>
            Enum V1ACCESSTOKEN for "V1_ACCESS_TOKEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDPROCESSINGNOTENABLED">
            <summary>
            Enum CARDPROCESSINGNOTENABLED for "CARD_PROCESSING_NOT_ENABLED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.BADREQUEST">
            <summary>
            Enum BADREQUEST for "BAD_REQUEST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.MISSINGREQUIREDPARAMETER">
            <summary>
            Enum MISSINGREQUIREDPARAMETER for "MISSING_REQUIRED_PARAMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INCORRECTTYPE">
            <summary>
            Enum INCORRECTTYPE for "INCORRECT_TYPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDTIME">
            <summary>
            Enum INVALIDTIME for "INVALID_TIME"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDTIMERANGE">
            <summary>
            Enum INVALIDTIMERANGE for "INVALID_TIME_RANGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDVALUE">
            <summary>
            Enum INVALIDVALUE for "INVALID_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCURSOR">
            <summary>
            Enum INVALIDCURSOR for "INVALID_CURSOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNKNOWNQUERYPARAMETER">
            <summary>
            Enum UNKNOWNQUERYPARAMETER for "UNKNOWN_QUERY_PARAMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CONFLICTINGPARAMETERS">
            <summary>
            Enum CONFLICTINGPARAMETERS for "CONFLICTING_PARAMETERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDJSONBODY">
            <summary>
            Enum EXPECTEDJSONBODY for "EXPECTED_JSON_BODY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDSORTORDER">
            <summary>
            Enum INVALIDSORTORDER for "INVALID_SORT_ORDER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUEREGEXMISMATCH">
            <summary>
            Enum VALUEREGEXMISMATCH for "VALUE_REGEX_MISMATCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOSHORT">
            <summary>
            Enum VALUETOOSHORT for "VALUE_TOO_SHORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOLONG">
            <summary>
            Enum VALUETOOLONG for "VALUE_TOO_LONG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOLOW">
            <summary>
            Enum VALUETOOLOW for "VALUE_TOO_LOW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOHIGH">
            <summary>
            Enum VALUETOOHIGH for "VALUE_TOO_HIGH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUEEMPTY">
            <summary>
            Enum VALUEEMPTY for "VALUE_EMPTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ARRAYLENGTHTOOLONG">
            <summary>
            Enum ARRAYLENGTHTOOLONG for "ARRAY_LENGTH_TOO_LONG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ARRAYLENGTHTOOSHORT">
            <summary>
            Enum ARRAYLENGTHTOOSHORT for "ARRAY_LENGTH_TOO_SHORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ARRAYEMPTY">
            <summary>
            Enum ARRAYEMPTY for "ARRAY_EMPTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDBOOLEAN">
            <summary>
            Enum EXPECTEDBOOLEAN for "EXPECTED_BOOLEAN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDINTEGER">
            <summary>
            Enum EXPECTEDINTEGER for "EXPECTED_INTEGER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDFLOAT">
            <summary>
            Enum EXPECTEDFLOAT for "EXPECTED_FLOAT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDSTRING">
            <summary>
            Enum EXPECTEDSTRING for "EXPECTED_STRING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDOBJECT">
            <summary>
            Enum EXPECTEDOBJECT for "EXPECTED_OBJECT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDARRAY">
            <summary>
            Enum EXPECTEDARRAY for "EXPECTED_ARRAY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDMAP">
            <summary>
            Enum EXPECTEDMAP for "EXPECTED_MAP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDBASE64ENCODEDBYTEARRAY">
            <summary>
            Enum EXPECTEDBASE64ENCODEDBYTEARRAY for "EXPECTED_BASE64_ENCODED_BYTE_ARRAY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDARRAYVALUE">
            <summary>
            Enum INVALIDARRAYVALUE for "INVALID_ARRAY_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDENUMVALUE">
            <summary>
            Enum INVALIDENUMVALUE for "INVALID_ENUM_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCONTENTTYPE">
            <summary>
            Enum INVALIDCONTENTTYPE for "INVALID_CONTENT_TYPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDFORMVALUE">
            <summary>
            Enum INVALIDFORMVALUE for "INVALID_FORM_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ONEINSTRUMENTEXPECTED">
            <summary>
            Enum ONEINSTRUMENTEXPECTED for "ONE_INSTRUMENT_EXPECTED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOFIELDSSET">
            <summary>
            Enum NOFIELDSSET for "NO_FIELDS_SET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DEPRECATEDFIELDSET">
            <summary>
            Enum DEPRECATEDFIELDSET for "DEPRECATED_FIELD_SET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.RETIREDFIELDSET">
            <summary>
            Enum RETIREDFIELDSET for "RETIRED_FIELD_SET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDEXPIRED">
            <summary>
            Enum CARDEXPIRED for "CARD_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEXPIRATION">
            <summary>
            Enum INVALIDEXPIRATION for "INVALID_EXPIRATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEXPIRATIONYEAR">
            <summary>
            Enum INVALIDEXPIRATIONYEAR for "INVALID_EXPIRATION_YEAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEXPIRATIONDATE">
            <summary>
            Enum INVALIDEXPIRATIONDATE for "INVALID_EXPIRATION_DATE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDCARDBRAND">
            <summary>
            Enum UNSUPPORTEDCARDBRAND for "UNSUPPORTED_CARD_BRAND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDENTRYMETHOD">
            <summary>
            Enum UNSUPPORTEDENTRYMETHOD for "UNSUPPORTED_ENTRY_METHOD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDENCRYPTEDCARD">
            <summary>
            Enum INVALIDENCRYPTEDCARD for "INVALID_ENCRYPTED_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCARD">
            <summary>
            Enum INVALIDCARD for "INVALID_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONEXPIRED">
            <summary>
            Enum DELAYEDTRANSACTIONEXPIRED for "DELAYED_TRANSACTION_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONCANCELED">
            <summary>
            Enum DELAYEDTRANSACTIONCANCELED for "DELAYED_TRANSACTION_CANCELED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONCAPTURED">
            <summary>
            Enum DELAYEDTRANSACTIONCAPTURED for "DELAYED_TRANSACTION_CAPTURED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONFAILED">
            <summary>
            Enum DELAYEDTRANSACTIONFAILED for "DELAYED_TRANSACTION_FAILED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDTOKENEXPIRED">
            <summary>
            Enum CARDTOKENEXPIRED for "CARD_TOKEN_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDTOKENUSED">
            <summary>
            Enum CARDTOKENUSED for "CARD_TOKEN_USED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.AMOUNTTOOHIGH">
            <summary>
            Enum AMOUNTTOOHIGH for "AMOUNT_TOO_HIGH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDINSTRUMENTTYPE">
            <summary>
            Enum UNSUPPORTEDINSTRUMENTTYPE for "UNSUPPORTED_INSTRUMENT_TYPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REFUNDAMOUNTINVALID">
            <summary>
            Enum REFUNDAMOUNTINVALID for "REFUND_AMOUNT_INVALID"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REFUNDALREADYPENDING">
            <summary>
            Enum REFUNDALREADYPENDING for "REFUND_ALREADY_PENDING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.PAYMENTNOTREFUNDABLE">
            <summary>
            Enum PAYMENTNOTREFUNDABLE for "PAYMENT_NOT_REFUNDABLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCARDDATA">
            <summary>
            Enum INVALIDCARDDATA for "INVALID_CARD_DATA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.LOCATIONMISMATCH">
            <summary>
            Enum LOCATIONMISMATCH for "LOCATION_MISMATCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.IDEMPOTENCYKEYREUSED">
            <summary>
            Enum IDEMPOTENCYKEYREUSED for "IDEMPOTENCY_KEY_REUSED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNEXPECTEDVALUE">
            <summary>
            Enum UNEXPECTEDVALUE for "UNEXPECTED_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.SANDBOXNOTSUPPORTED">
            <summary>
            Enum SANDBOXNOTSUPPORTED for "SANDBOX_NOT_SUPPORTED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEMAILADDRESS">
            <summary>
            Enum INVALIDEMAILADDRESS for "INVALID_EMAIL_ADDRESS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDPHONENUMBER">
            <summary>
            Enum INVALIDPHONENUMBER for "INVALID_PHONE_NUMBER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CHECKOUTEXPIRED">
            <summary>
            Enum CHECKOUTEXPIRED for "CHECKOUT_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.BADCERTIFICATE">
            <summary>
            Enum BADCERTIFICATE for "BAD_CERTIFICATE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDSQUAREVERSIONFORMAT">
            <summary>
            Enum INVALIDSQUAREVERSIONFORMAT for "INVALID_SQUARE_VERSION_FORMAT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.APIVERSIONINCOMPATIBLE">
            <summary>
            Enum APIVERSIONINCOMPATIBLE for "API_VERSION_INCOMPATIBLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDDECLINED">
            <summary>
            Enum CARDDECLINED for "CARD_DECLINED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VERIFYCVVFAILURE">
            <summary>
            Enum VERIFYCVVFAILURE for "VERIFY_CVV_FAILURE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VERIFYAVSFAILURE">
            <summary>
            Enum VERIFYAVSFAILURE for "VERIFY_AVS_FAILURE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDDECLINEDCALLISSUER">
            <summary>
            Enum CARDDECLINEDCALLISSUER for "CARD_DECLINED_CALL_ISSUER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOTFOUND">
            <summary>
            Enum NOTFOUND for "NOT_FOUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.APPLEPAYMENTPROCESSINGCERTIFICATEHASHNOTFOUND">
            <summary>
            Enum APPLEPAYMENTPROCESSINGCERTIFICATEHASHNOTFOUND for "APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.METHODNOTALLOWED">
            <summary>
            Enum METHODNOTALLOWED for "METHOD_NOT_ALLOWED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOTACCEPTABLE">
            <summary>
            Enum NOTACCEPTABLE for "NOT_ACCEPTABLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REQUESTTIMEOUT">
            <summary>
            Enum REQUESTTIMEOUT for "REQUEST_TIMEOUT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CONFLICT">
            <summary>
            Enum CONFLICT for "CONFLICT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REQUESTENTITYTOOLARGE">
            <summary>
            Enum REQUESTENTITYTOOLARGE for "REQUEST_ENTITY_TOO_LARGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDMEDIATYPE">
            <summary>
            Enum UNSUPPORTEDMEDIATYPE for "UNSUPPORTED_MEDIA_TYPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.RATELIMITED">
            <summary>
            Enum RATELIMITED for "RATE_LIMITED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOTIMPLEMENTED">
            <summary>
            Enum NOTIMPLEMENTED for "NOT_IMPLEMENTED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.SERVICEUNAVAILABLE">
            <summary>
            Enum SERVICEUNAVAILABLE for "SERVICE_UNAVAILABLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.GATEWAYTIMEOUT">
            <summary>
            Enum GATEWAYTIMEOUT for "GATEWAY_TIMEOUT"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Error.Category">
            <summary>
            The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values
            </summary>
            <value>The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.Error.Code">
            <summary>
            The error's specific code. See [ErrorCode](#type-errorcode) for possible values
            </summary>
            <value>The error's specific code. See [ErrorCode](#type-errorcode) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Error.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Error" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.Error.#ctor(System.Nullable{Square.Connect.Model.Error.CategoryEnum},System.Nullable{Square.Connect.Model.Error.CodeEnum},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Error" /> class.
            </summary>
            <param name="Category">The error&#39;s high-level category. See [ErrorCategory](#type-errorcategory) for possible values (required).</param>
            <param name="Code">The error&#39;s specific code. See [ErrorCode](#type-errorcode) for possible values (required).</param>
            <param name="Detail">A human-readable description of the error for debugging purposes..</param>
            <param name="Field">The name of the field provided in the original request that the error pertains to, if any..</param>
        </member>
        <member name="P:Square.Connect.Model.Error.Detail">
            <summary>
            A human-readable description of the error for debugging purposes.
            </summary>
            <value>A human-readable description of the error for debugging purposes.</value>
        </member>
        <member name="P:Square.Connect.Model.Error.Field">
            <summary>
            The name of the field provided in the original request that the error pertains to, if any.
            </summary>
            <value>The name of the field provided in the original request that the error pertains to, if any.</value>
        </member>
        <member name="M:Square.Connect.Model.Error.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Error.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Error.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Error.Equals(Square.Connect.Model.Error)">
            <summary>
            Returns true if Error instances are equal
            </summary>
            <param name="other">Instance of Error to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Error.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ErrorCategory">
            <summary>
            Indicates which high-level category of error has occurred during a request to the Connect API.
            </summary>
            <value>Indicates which high-level category of error has occurred during a request to the Connect API.</value>
        </member>
        <member name="F:Square.Connect.Model.ErrorCategory.APIERROR">
            <summary>
            Enum APIERROR for "API_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCategory.AUTHENTICATIONERROR">
            <summary>
            Enum AUTHENTICATIONERROR for "AUTHENTICATION_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCategory.INVALIDREQUESTERROR">
            <summary>
            Enum INVALIDREQUESTERROR for "INVALID_REQUEST_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCategory.RATELIMITERROR">
            <summary>
            Enum RATELIMITERROR for "RATE_LIMIT_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCategory.PAYMENTMETHODERROR">
            <summary>
            Enum PAYMENTMETHODERROR for "PAYMENT_METHOD_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCategory.REFUNDERROR">
            <summary>
            Enum REFUNDERROR for "REFUND_ERROR"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ErrorCode">
            <summary>
            Indicates specific errors that can occur during a request to the Connect API.
            </summary>
            <value>Indicates specific errors that can occur during a request to the Connect API.</value>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INTERNALSERVERERROR">
            <summary>
            Enum INTERNALSERVERERROR for "INTERNAL_SERVER_ERROR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNAUTHORIZED">
            <summary>
            Enum UNAUTHORIZED for "UNAUTHORIZED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.ACCESSTOKENEXPIRED">
            <summary>
            Enum ACCESSTOKENEXPIRED for "ACCESS_TOKEN_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.ACCESSTOKENREVOKED">
            <summary>
            Enum ACCESSTOKENREVOKED for "ACCESS_TOKEN_REVOKED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.FORBIDDEN">
            <summary>
            Enum FORBIDDEN for "FORBIDDEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INSUFFICIENTSCOPES">
            <summary>
            Enum INSUFFICIENTSCOPES for "INSUFFICIENT_SCOPES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.APPLICATIONDISABLED">
            <summary>
            Enum APPLICATIONDISABLED for "APPLICATION_DISABLED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.V1APPLICATION">
            <summary>
            Enum V1APPLICATION for "V1_APPLICATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.V1ACCESSTOKEN">
            <summary>
            Enum V1ACCESSTOKEN for "V1_ACCESS_TOKEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDPROCESSINGNOTENABLED">
            <summary>
            Enum CARDPROCESSINGNOTENABLED for "CARD_PROCESSING_NOT_ENABLED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.BADREQUEST">
            <summary>
            Enum BADREQUEST for "BAD_REQUEST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.MISSINGREQUIREDPARAMETER">
            <summary>
            Enum MISSINGREQUIREDPARAMETER for "MISSING_REQUIRED_PARAMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INCORRECTTYPE">
            <summary>
            Enum INCORRECTTYPE for "INCORRECT_TYPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDTIME">
            <summary>
            Enum INVALIDTIME for "INVALID_TIME"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDTIMERANGE">
            <summary>
            Enum INVALIDTIMERANGE for "INVALID_TIME_RANGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDVALUE">
            <summary>
            Enum INVALIDVALUE for "INVALID_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCURSOR">
            <summary>
            Enum INVALIDCURSOR for "INVALID_CURSOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNKNOWNQUERYPARAMETER">
            <summary>
            Enum UNKNOWNQUERYPARAMETER for "UNKNOWN_QUERY_PARAMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.CONFLICTINGPARAMETERS">
            <summary>
            Enum CONFLICTINGPARAMETERS for "CONFLICTING_PARAMETERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDJSONBODY">
            <summary>
            Enum EXPECTEDJSONBODY for "EXPECTED_JSON_BODY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDSORTORDER">
            <summary>
            Enum INVALIDSORTORDER for "INVALID_SORT_ORDER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUEREGEXMISMATCH">
            <summary>
            Enum VALUEREGEXMISMATCH for "VALUE_REGEX_MISMATCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOSHORT">
            <summary>
            Enum VALUETOOSHORT for "VALUE_TOO_SHORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOLONG">
            <summary>
            Enum VALUETOOLONG for "VALUE_TOO_LONG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOLOW">
            <summary>
            Enum VALUETOOLOW for "VALUE_TOO_LOW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOHIGH">
            <summary>
            Enum VALUETOOHIGH for "VALUE_TOO_HIGH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUEEMPTY">
            <summary>
            Enum VALUEEMPTY for "VALUE_EMPTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.ARRAYLENGTHTOOLONG">
            <summary>
            Enum ARRAYLENGTHTOOLONG for "ARRAY_LENGTH_TOO_LONG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.ARRAYLENGTHTOOSHORT">
            <summary>
            Enum ARRAYLENGTHTOOSHORT for "ARRAY_LENGTH_TOO_SHORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.ARRAYEMPTY">
            <summary>
            Enum ARRAYEMPTY for "ARRAY_EMPTY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDBOOLEAN">
            <summary>
            Enum EXPECTEDBOOLEAN for "EXPECTED_BOOLEAN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDINTEGER">
            <summary>
            Enum EXPECTEDINTEGER for "EXPECTED_INTEGER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDFLOAT">
            <summary>
            Enum EXPECTEDFLOAT for "EXPECTED_FLOAT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDSTRING">
            <summary>
            Enum EXPECTEDSTRING for "EXPECTED_STRING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDOBJECT">
            <summary>
            Enum EXPECTEDOBJECT for "EXPECTED_OBJECT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDARRAY">
            <summary>
            Enum EXPECTEDARRAY for "EXPECTED_ARRAY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDMAP">
            <summary>
            Enum EXPECTEDMAP for "EXPECTED_MAP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDBASE64ENCODEDBYTEARRAY">
            <summary>
            Enum EXPECTEDBASE64ENCODEDBYTEARRAY for "EXPECTED_BASE64_ENCODED_BYTE_ARRAY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDARRAYVALUE">
            <summary>
            Enum INVALIDARRAYVALUE for "INVALID_ARRAY_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDENUMVALUE">
            <summary>
            Enum INVALIDENUMVALUE for "INVALID_ENUM_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCONTENTTYPE">
            <summary>
            Enum INVALIDCONTENTTYPE for "INVALID_CONTENT_TYPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDFORMVALUE">
            <summary>
            Enum INVALIDFORMVALUE for "INVALID_FORM_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.ONEINSTRUMENTEXPECTED">
            <summary>
            Enum ONEINSTRUMENTEXPECTED for "ONE_INSTRUMENT_EXPECTED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOFIELDSSET">
            <summary>
            Enum NOFIELDSSET for "NO_FIELDS_SET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.DEPRECATEDFIELDSET">
            <summary>
            Enum DEPRECATEDFIELDSET for "DEPRECATED_FIELD_SET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.RETIREDFIELDSET">
            <summary>
            Enum RETIREDFIELDSET for "RETIRED_FIELD_SET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDEXPIRED">
            <summary>
            Enum CARDEXPIRED for "CARD_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEXPIRATION">
            <summary>
            Enum INVALIDEXPIRATION for "INVALID_EXPIRATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEXPIRATIONYEAR">
            <summary>
            Enum INVALIDEXPIRATIONYEAR for "INVALID_EXPIRATION_YEAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEXPIRATIONDATE">
            <summary>
            Enum INVALIDEXPIRATIONDATE for "INVALID_EXPIRATION_DATE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDCARDBRAND">
            <summary>
            Enum UNSUPPORTEDCARDBRAND for "UNSUPPORTED_CARD_BRAND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDENTRYMETHOD">
            <summary>
            Enum UNSUPPORTEDENTRYMETHOD for "UNSUPPORTED_ENTRY_METHOD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDENCRYPTEDCARD">
            <summary>
            Enum INVALIDENCRYPTEDCARD for "INVALID_ENCRYPTED_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCARD">
            <summary>
            Enum INVALIDCARD for "INVALID_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONEXPIRED">
            <summary>
            Enum DELAYEDTRANSACTIONEXPIRED for "DELAYED_TRANSACTION_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONCANCELED">
            <summary>
            Enum DELAYEDTRANSACTIONCANCELED for "DELAYED_TRANSACTION_CANCELED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONCAPTURED">
            <summary>
            Enum DELAYEDTRANSACTIONCAPTURED for "DELAYED_TRANSACTION_CAPTURED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONFAILED">
            <summary>
            Enum DELAYEDTRANSACTIONFAILED for "DELAYED_TRANSACTION_FAILED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDTOKENEXPIRED">
            <summary>
            Enum CARDTOKENEXPIRED for "CARD_TOKEN_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDTOKENUSED">
            <summary>
            Enum CARDTOKENUSED for "CARD_TOKEN_USED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.AMOUNTTOOHIGH">
            <summary>
            Enum AMOUNTTOOHIGH for "AMOUNT_TOO_HIGH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDINSTRUMENTTYPE">
            <summary>
            Enum UNSUPPORTEDINSTRUMENTTYPE for "UNSUPPORTED_INSTRUMENT_TYPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.REFUNDAMOUNTINVALID">
            <summary>
            Enum REFUNDAMOUNTINVALID for "REFUND_AMOUNT_INVALID"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.REFUNDALREADYPENDING">
            <summary>
            Enum REFUNDALREADYPENDING for "REFUND_ALREADY_PENDING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.PAYMENTNOTREFUNDABLE">
            <summary>
            Enum PAYMENTNOTREFUNDABLE for "PAYMENT_NOT_REFUNDABLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCARDDATA">
            <summary>
            Enum INVALIDCARDDATA for "INVALID_CARD_DATA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.LOCATIONMISMATCH">
            <summary>
            Enum LOCATIONMISMATCH for "LOCATION_MISMATCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.IDEMPOTENCYKEYREUSED">
            <summary>
            Enum IDEMPOTENCYKEYREUSED for "IDEMPOTENCY_KEY_REUSED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNEXPECTEDVALUE">
            <summary>
            Enum UNEXPECTEDVALUE for "UNEXPECTED_VALUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.SANDBOXNOTSUPPORTED">
            <summary>
            Enum SANDBOXNOTSUPPORTED for "SANDBOX_NOT_SUPPORTED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEMAILADDRESS">
            <summary>
            Enum INVALIDEMAILADDRESS for "INVALID_EMAIL_ADDRESS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDPHONENUMBER">
            <summary>
            Enum INVALIDPHONENUMBER for "INVALID_PHONE_NUMBER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.CHECKOUTEXPIRED">
            <summary>
            Enum CHECKOUTEXPIRED for "CHECKOUT_EXPIRED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.BADCERTIFICATE">
            <summary>
            Enum BADCERTIFICATE for "BAD_CERTIFICATE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDSQUAREVERSIONFORMAT">
            <summary>
            Enum INVALIDSQUAREVERSIONFORMAT for "INVALID_SQUARE_VERSION_FORMAT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.APIVERSIONINCOMPATIBLE">
            <summary>
            Enum APIVERSIONINCOMPATIBLE for "API_VERSION_INCOMPATIBLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDDECLINED">
            <summary>
            Enum CARDDECLINED for "CARD_DECLINED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.VERIFYCVVFAILURE">
            <summary>
            Enum VERIFYCVVFAILURE for "VERIFY_CVV_FAILURE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.VERIFYAVSFAILURE">
            <summary>
            Enum VERIFYAVSFAILURE for "VERIFY_AVS_FAILURE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDDECLINEDCALLISSUER">
            <summary>
            Enum CARDDECLINEDCALLISSUER for "CARD_DECLINED_CALL_ISSUER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOTFOUND">
            <summary>
            Enum NOTFOUND for "NOT_FOUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.APPLEPAYMENTPROCESSINGCERTIFICATEHASHNOTFOUND">
            <summary>
            Enum APPLEPAYMENTPROCESSINGCERTIFICATEHASHNOTFOUND for "APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.METHODNOTALLOWED">
            <summary>
            Enum METHODNOTALLOWED for "METHOD_NOT_ALLOWED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOTACCEPTABLE">
            <summary>
            Enum NOTACCEPTABLE for "NOT_ACCEPTABLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.REQUESTTIMEOUT">
            <summary>
            Enum REQUESTTIMEOUT for "REQUEST_TIMEOUT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.CONFLICT">
            <summary>
            Enum CONFLICT for "CONFLICT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.REQUESTENTITYTOOLARGE">
            <summary>
            Enum REQUESTENTITYTOOLARGE for "REQUEST_ENTITY_TOO_LARGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDMEDIATYPE">
            <summary>
            Enum UNSUPPORTEDMEDIATYPE for "UNSUPPORTED_MEDIA_TYPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.RATELIMITED">
            <summary>
            Enum RATELIMITED for "RATE_LIMITED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOTIMPLEMENTED">
            <summary>
            Enum NOTIMPLEMENTED for "NOT_IMPLEMENTED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.SERVICEUNAVAILABLE">
            <summary>
            Enum SERVICEUNAVAILABLE for "SERVICE_UNAVAILABLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ErrorCode.GATEWAYTIMEOUT">
            <summary>
            Enum GATEWAYTIMEOUT for "GATEWAY_TIMEOUT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.GetBreakTypeRequest">
            <summary>
            A request to GET a &#x60;BreakType&#x60; by ID
            </summary>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.GetBreakTypeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeRequest.Equals(Square.Connect.Model.GetBreakTypeRequest)">
            <summary>
            Returns true if GetBreakTypeRequest instances are equal
            </summary>
            <param name="other">Instance of GetBreakTypeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.GetBreakTypeResponse">
            <summary>
            The response to a request to get a &#x60;BreakType&#x60;. Contains the requested &#x60;BreakType&#x60; objects. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeResponse.#ctor(Square.Connect.Model.BreakType,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.GetBreakTypeResponse" /> class.
            </summary>
            <param name="BreakType">The response object..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.GetBreakTypeResponse.BreakType">
            <summary>
            The response object.
            </summary>
            <value>The response object.</value>
        </member>
        <member name="P:Square.Connect.Model.GetBreakTypeResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeResponse.Equals(Square.Connect.Model.GetBreakTypeResponse)">
            <summary>
            Returns true if GetBreakTypeResponse instances are equal
            </summary>
            <param name="other">Instance of GetBreakTypeResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetBreakTypeResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.GetEmployeeWageRequest">
            <summary>
            A request to get an &#x60;EmployeeWage&#x60;
            </summary>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.GetEmployeeWageRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageRequest.Equals(Square.Connect.Model.GetEmployeeWageRequest)">
            <summary>
            Returns true if GetEmployeeWageRequest instances are equal
            </summary>
            <param name="other">Instance of GetEmployeeWageRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.GetEmployeeWageResponse">
            <summary>
            A response to a request to get an &#x60;EmployeeWage&#x60;. Contains the requested &#x60;EmployeeWage&#x60; objects. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageResponse.#ctor(Square.Connect.Model.EmployeeWage,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.GetEmployeeWageResponse" /> class.
            </summary>
            <param name="EmployeeWage">The requested &#x60;EmployeeWage&#x60; object..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.GetEmployeeWageResponse.EmployeeWage">
            <summary>
            The requested &#x60;EmployeeWage&#x60; object.
            </summary>
            <value>The requested &#x60;EmployeeWage&#x60; object.</value>
        </member>
        <member name="P:Square.Connect.Model.GetEmployeeWageResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageResponse.Equals(Square.Connect.Model.GetEmployeeWageResponse)">
            <summary>
            Returns true if GetEmployeeWageResponse instances are equal
            </summary>
            <param name="other">Instance of GetEmployeeWageResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetEmployeeWageResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.GetShiftRequest">
            <summary>
            A request to get a &#x60;Shift&#x60; by ID
            </summary>
        </member>
        <member name="M:Square.Connect.Model.GetShiftRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.GetShiftRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.GetShiftRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetShiftRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetShiftRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetShiftRequest.Equals(Square.Connect.Model.GetShiftRequest)">
            <summary>
            Returns true if GetShiftRequest instances are equal
            </summary>
            <param name="other">Instance of GetShiftRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetShiftRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.GetShiftResponse">
            <summary>
            A response to request to get a &#x60;Shift&#x60;. Contains the requested &#x60;Shift&#x60; object. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.GetShiftResponse.#ctor(Square.Connect.Model.Shift,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.GetShiftResponse" /> class.
            </summary>
            <param name="Shift">The requested &#x60;Shift&#x60;..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.GetShiftResponse.Shift">
            <summary>
            The requested &#x60;Shift&#x60;.
            </summary>
            <value>The requested &#x60;Shift&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.GetShiftResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.GetShiftResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetShiftResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.GetShiftResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetShiftResponse.Equals(Square.Connect.Model.GetShiftResponse)">
            <summary>
            Returns true if GetShiftResponse instances are equal
            </summary>
            <param name="other">Instance of GetShiftResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.GetShiftResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.InventoryAdjustment">
            <summary>
            Represents a change in state or quantity of product inventory at a particular time and location.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.InventoryAdjustment.FromStateEnum">
            <summary>
            The [InventoryState](#type-inventorystate) of the related quantity of items before the adjustment. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The [InventoryState](#type-inventorystate) of the related quantity of items before the adjustment. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.CUSTOM">
            <summary>
            Enum CUSTOM for "CUSTOM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.INSTOCK">
            <summary>
            Enum INSTOCK for "IN_STOCK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.SOLD">
            <summary>
            Enum SOLD for "SOLD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.RETURNEDBYCUSTOMER">
            <summary>
            Enum RETURNEDBYCUSTOMER for "RETURNED_BY_CUSTOMER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.RESERVEDFORSALE">
            <summary>
            Enum RESERVEDFORSALE for "RESERVED_FOR_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.SOLDONLINE">
            <summary>
            Enum SOLDONLINE for "SOLD_ONLINE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.ORDEREDFROMVENDOR">
            <summary>
            Enum ORDEREDFROMVENDOR for "ORDERED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.RECEIVEDFROMVENDOR">
            <summary>
            Enum RECEIVEDFROMVENDOR for "RECEIVED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.INTRANSITTO">
            <summary>
            Enum INTRANSITTO for "IN_TRANSIT_TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.WASTE">
            <summary>
            Enum WASTE for "WASTE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.FromStateEnum.UNLINKEDRETURN">
            <summary>
            Enum UNLINKEDRETURN for "UNLINKED_RETURN"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.InventoryAdjustment.ToStateEnum">
            <summary>
            The [InventoryState](#type-inventorystate) of the related quantity of items after the adjustment. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The [InventoryState](#type-inventorystate) of the related quantity of items after the adjustment. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.CUSTOM">
            <summary>
            Enum CUSTOM for "CUSTOM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.INSTOCK">
            <summary>
            Enum INSTOCK for "IN_STOCK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.SOLD">
            <summary>
            Enum SOLD for "SOLD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.RETURNEDBYCUSTOMER">
            <summary>
            Enum RETURNEDBYCUSTOMER for "RETURNED_BY_CUSTOMER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.RESERVEDFORSALE">
            <summary>
            Enum RESERVEDFORSALE for "RESERVED_FOR_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.SOLDONLINE">
            <summary>
            Enum SOLDONLINE for "SOLD_ONLINE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.ORDEREDFROMVENDOR">
            <summary>
            Enum ORDEREDFROMVENDOR for "ORDERED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.RECEIVEDFROMVENDOR">
            <summary>
            Enum RECEIVEDFROMVENDOR for "RECEIVED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.INTRANSITTO">
            <summary>
            Enum INTRANSITTO for "IN_TRANSIT_TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.WASTE">
            <summary>
            Enum WASTE for "WASTE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAdjustment.ToStateEnum.UNLINKEDRETURN">
            <summary>
            Enum UNLINKEDRETURN for "UNLINKED_RETURN"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.FromState">
            <summary>
            The [InventoryState](#type-inventorystate) of the related quantity of items before the adjustment. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The [InventoryState](#type-inventorystate) of the related quantity of items before the adjustment. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.ToState">
            <summary>
            The [InventoryState](#type-inventorystate) of the related quantity of items after the adjustment. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The [InventoryState](#type-inventorystate) of the related quantity of items after the adjustment. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryAdjustment.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.InventoryAdjustment.FromStateEnum},System.Nullable{Square.Connect.Model.InventoryAdjustment.ToStateEnum},System.String,System.String,System.String,System.String,Square.Connect.Model.Money,System.String,System.String,Square.Connect.Model.SourceApplication,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.InventoryAdjustment" /> class.
            </summary>
            <param name="Id">A unique ID generated by Square for the [InventoryAdjustment](#type-inventoryadjustment)..</param>
            <param name="ReferenceId">An optional ID provided by the application to tie the [InventoryAdjustment](#type-inventoryadjustment) to an external system..</param>
            <param name="FromState">The [InventoryState](#type-inventorystate) of the related quantity of items before the adjustment. See [InventoryState](#type-inventorystate) for possible values.</param>
            <param name="ToState">The [InventoryState](#type-inventorystate) of the related quantity of items after the adjustment. See [InventoryState](#type-inventorystate) for possible values.</param>
            <param name="LocationId">The Square ID of the [Location](#type-location) where the related quantity of items are being tracked..</param>
            <param name="CatalogObjectId">The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked..</param>
            <param name="CatalogObjectType">The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type..</param>
            <param name="Quantity">The number of items affected by the adjustment as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information..</param>
            <param name="TotalPriceMoney">The read-only total price paid for goods associated with the adjustment. Present if and only if &#x60;to_state&#x60; is &#x60;SOLD&#x60;. Always non-negative..</param>
            <param name="OccurredAt">A client-generated timestamp in RFC 3339 format that indicates when the adjustment took place. For write actions, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request..</param>
            <param name="CreatedAt">A read-only timestamp in RFC 3339 format that indicates when Square received the adjustment..</param>
            <param name="Source">Read-only information about the application that caused the inventory adjustment..</param>
            <param name="EmployeeId">The Square ID of the [Employee](#type-employee) responsible for the inventory adjustment..</param>
            <param name="TransactionId">The read-only Square ID of the [Transaction][#type-transaction] that caused the adjustment. Only relevant for payment-related state transitions..</param>
            <param name="RefundId">The read-only Square ID of the [Refund][#type-refund] that caused the adjustment. Only relevant for refund-related state transitions..</param>
            <param name="PurchaseOrderId">The read-only Square ID of the purchase order that caused the adjustment. Only relevant for state transitions from the Square for Retail app..</param>
            <param name="GoodsReceiptId">The read-only Square ID of the Square goods receipt that caused the adjustment. Only relevant for state transitions from the Square for Retail app..</param>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.Id">
            <summary>
            A unique ID generated by Square for the [InventoryAdjustment](#type-inventoryadjustment).
            </summary>
            <value>A unique ID generated by Square for the [InventoryAdjustment](#type-inventoryadjustment).</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.ReferenceId">
            <summary>
            An optional ID provided by the application to tie the [InventoryAdjustment](#type-inventoryadjustment) to an external system.
            </summary>
            <value>An optional ID provided by the application to tie the [InventoryAdjustment](#type-inventoryadjustment) to an external system.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.LocationId">
            <summary>
            The Square ID of the [Location](#type-location) where the related quantity of items are being tracked.
            </summary>
            <value>The Square ID of the [Location](#type-location) where the related quantity of items are being tracked.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.CatalogObjectId">
            <summary>
            The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked.
            </summary>
            <value>The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.CatalogObjectType">
            <summary>
            The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.
            </summary>
            <value>The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.Quantity">
            <summary>
            The number of items affected by the adjustment as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information.
            </summary>
            <value>The number of items affected by the adjustment as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.TotalPriceMoney">
            <summary>
            The read-only total price paid for goods associated with the adjustment. Present if and only if &#x60;to_state&#x60; is &#x60;SOLD&#x60;. Always non-negative.
            </summary>
            <value>The read-only total price paid for goods associated with the adjustment. Present if and only if &#x60;to_state&#x60; is &#x60;SOLD&#x60;. Always non-negative.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.OccurredAt">
            <summary>
            A client-generated timestamp in RFC 3339 format that indicates when the adjustment took place. For write actions, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request.
            </summary>
            <value>A client-generated timestamp in RFC 3339 format that indicates when the adjustment took place. For write actions, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.CreatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format that indicates when Square received the adjustment.
            </summary>
            <value>A read-only timestamp in RFC 3339 format that indicates when Square received the adjustment.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.Source">
            <summary>
            Read-only information about the application that caused the inventory adjustment.
            </summary>
            <value>Read-only information about the application that caused the inventory adjustment.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.EmployeeId">
            <summary>
            The Square ID of the [Employee](#type-employee) responsible for the inventory adjustment.
            </summary>
            <value>The Square ID of the [Employee](#type-employee) responsible for the inventory adjustment.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.TransactionId">
            <summary>
            The read-only Square ID of the [Transaction][#type-transaction] that caused the adjustment. Only relevant for payment-related state transitions.
            </summary>
            <value>The read-only Square ID of the [Transaction][#type-transaction] that caused the adjustment. Only relevant for payment-related state transitions.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.RefundId">
            <summary>
            The read-only Square ID of the [Refund][#type-refund] that caused the adjustment. Only relevant for refund-related state transitions.
            </summary>
            <value>The read-only Square ID of the [Refund][#type-refund] that caused the adjustment. Only relevant for refund-related state transitions.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.PurchaseOrderId">
            <summary>
            The read-only Square ID of the purchase order that caused the adjustment. Only relevant for state transitions from the Square for Retail app.
            </summary>
            <value>The read-only Square ID of the purchase order that caused the adjustment. Only relevant for state transitions from the Square for Retail app.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryAdjustment.GoodsReceiptId">
            <summary>
            The read-only Square ID of the Square goods receipt that caused the adjustment. Only relevant for state transitions from the Square for Retail app.
            </summary>
            <value>The read-only Square ID of the Square goods receipt that caused the adjustment. Only relevant for state transitions from the Square for Retail app.</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryAdjustment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryAdjustment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryAdjustment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryAdjustment.Equals(Square.Connect.Model.InventoryAdjustment)">
            <summary>
            Returns true if InventoryAdjustment instances are equal
            </summary>
            <param name="other">Instance of InventoryAdjustment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryAdjustment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.InventoryAlertType">
            <summary>
            Indicates whether Square should alert the merchant when the inventory quantity of a [CatalogItemVariation](#type-catalogitemvariation) is low.
            </summary>
            <value>Indicates whether Square should alert the merchant when the inventory quantity of a [CatalogItemVariation](#type-catalogitemvariation) is low.</value>
        </member>
        <member name="F:Square.Connect.Model.InventoryAlertType.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryAlertType.LOWQUANTITY">
            <summary>
            Enum LOWQUANTITY for "LOW_QUANTITY"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.InventoryChange">
            <summary>
            Represents a single physical count, inventory, adjustment, or transfer that is part of the history of inventory changes for a particular [CatalogObject](#type-catalogobject).
            </summary>
        </member>
        <member name="T:Square.Connect.Model.InventoryChange.TypeEnum">
            <summary>
            Indicates how the inventory change was applied. See [InventoryChangeType](#type-inventorychangetype) for possible values
            </summary>
            <value>Indicates how the inventory change was applied. See [InventoryChangeType](#type-inventorychangetype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.InventoryChange.TypeEnum.PHYSICALCOUNT">
            <summary>
            Enum PHYSICALCOUNT for "PHYSICAL_COUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryChange.TypeEnum.ADJUSTMENT">
            <summary>
            Enum ADJUSTMENT for "ADJUSTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryChange.TypeEnum.TRANSFER">
            <summary>
            Enum TRANSFER for "TRANSFER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.InventoryChange.Type">
            <summary>
            Indicates how the inventory change was applied. See [InventoryChangeType](#type-inventorychangetype) for possible values
            </summary>
            <value>Indicates how the inventory change was applied. See [InventoryChangeType](#type-inventorychangetype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryChange.#ctor(System.Nullable{Square.Connect.Model.InventoryChange.TypeEnum},Square.Connect.Model.InventoryPhysicalCount,Square.Connect.Model.InventoryAdjustment,Square.Connect.Model.InventoryTransfer)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.InventoryChange" /> class.
            </summary>
            <param name="Type">Indicates how the inventory change was applied. See [InventoryChangeType](#type-inventorychangetype) for possible values.</param>
            <param name="PhysicalCount">Contains details about the physical count when &#x60;type&#x60; is &#x60;PHYSICAL_COUNT&#x60; and unset for all other types..</param>
            <param name="Adjustment">Contains details about the inventory adjustment when &#x60;type&#x60; is &#x60;ADJUSTMENT&#x60; and unset for all other types..</param>
            <param name="Transfer">Contains details about the inventory transfer when &#x60;type&#x60; is &#x60;TRANSFER&#x60; and unset for all other types..</param>
        </member>
        <member name="P:Square.Connect.Model.InventoryChange.PhysicalCount">
            <summary>
            Contains details about the physical count when &#x60;type&#x60; is &#x60;PHYSICAL_COUNT&#x60; and unset for all other types.
            </summary>
            <value>Contains details about the physical count when &#x60;type&#x60; is &#x60;PHYSICAL_COUNT&#x60; and unset for all other types.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryChange.Adjustment">
            <summary>
            Contains details about the inventory adjustment when &#x60;type&#x60; is &#x60;ADJUSTMENT&#x60; and unset for all other types.
            </summary>
            <value>Contains details about the inventory adjustment when &#x60;type&#x60; is &#x60;ADJUSTMENT&#x60; and unset for all other types.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryChange.Transfer">
            <summary>
            Contains details about the inventory transfer when &#x60;type&#x60; is &#x60;TRANSFER&#x60; and unset for all other types.
            </summary>
            <value>Contains details about the inventory transfer when &#x60;type&#x60; is &#x60;TRANSFER&#x60; and unset for all other types.</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryChange.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryChange.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryChange.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryChange.Equals(Square.Connect.Model.InventoryChange)">
            <summary>
            Returns true if InventoryChange instances are equal
            </summary>
            <param name="other">Instance of InventoryChange to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryChange.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.InventoryChangeType">
            <summary>
            Indicates how the inventory change was applied to a tracked quantity of items.
            </summary>
            <value>Indicates how the inventory change was applied to a tracked quantity of items.</value>
        </member>
        <member name="F:Square.Connect.Model.InventoryChangeType.PHYSICALCOUNT">
            <summary>
            Enum PHYSICALCOUNT for "PHYSICAL_COUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryChangeType.ADJUSTMENT">
            <summary>
            Enum ADJUSTMENT for "ADJUSTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryChangeType.TRANSFER">
            <summary>
            Enum TRANSFER for "TRANSFER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.InventoryCount">
            <summary>
            Represents Square&#39;s estimated quantity of items in a particular state at a particular location based on the known history of physical counts and inventory adjustments
            </summary>
        </member>
        <member name="T:Square.Connect.Model.InventoryCount.StateEnum">
            <summary>
            The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.CUSTOM">
            <summary>
            Enum CUSTOM for "CUSTOM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.INSTOCK">
            <summary>
            Enum INSTOCK for "IN_STOCK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.SOLD">
            <summary>
            Enum SOLD for "SOLD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.RETURNEDBYCUSTOMER">
            <summary>
            Enum RETURNEDBYCUSTOMER for "RETURNED_BY_CUSTOMER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.RESERVEDFORSALE">
            <summary>
            Enum RESERVEDFORSALE for "RESERVED_FOR_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.SOLDONLINE">
            <summary>
            Enum SOLDONLINE for "SOLD_ONLINE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.ORDEREDFROMVENDOR">
            <summary>
            Enum ORDEREDFROMVENDOR for "ORDERED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.RECEIVEDFROMVENDOR">
            <summary>
            Enum RECEIVEDFROMVENDOR for "RECEIVED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.INTRANSITTO">
            <summary>
            Enum INTRANSITTO for "IN_TRANSIT_TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.WASTE">
            <summary>
            Enum WASTE for "WASTE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryCount.StateEnum.UNLINKEDRETURN">
            <summary>
            Enum UNLINKEDRETURN for "UNLINKED_RETURN"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.InventoryCount.State">
            <summary>
            The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryCount.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.InventoryCount.StateEnum},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.InventoryCount" /> class.
            </summary>
            <param name="CatalogObjectId">The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked..</param>
            <param name="CatalogObjectType">The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type..</param>
            <param name="State">The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values.</param>
            <param name="LocationId">The Square ID of the [Location](#type-location) where the related quantity of items are being tracked..</param>
            <param name="Quantity">The number of items in the count as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information..</param>
            <param name="CalculatedAt">A read-only timestamp in RFC 3339 format that indicates when Square received the most recent physical count or adjustment that had an affect on the estimated count..</param>
        </member>
        <member name="P:Square.Connect.Model.InventoryCount.CatalogObjectId">
            <summary>
            The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked.
            </summary>
            <value>The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryCount.CatalogObjectType">
            <summary>
            The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.
            </summary>
            <value>The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryCount.LocationId">
            <summary>
            The Square ID of the [Location](#type-location) where the related quantity of items are being tracked.
            </summary>
            <value>The Square ID of the [Location](#type-location) where the related quantity of items are being tracked.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryCount.Quantity">
            <summary>
            The number of items in the count as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information.
            </summary>
            <value>The number of items in the count as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryCount.CalculatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format that indicates when Square received the most recent physical count or adjustment that had an affect on the estimated count.
            </summary>
            <value>A read-only timestamp in RFC 3339 format that indicates when Square received the most recent physical count or adjustment that had an affect on the estimated count.</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryCount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryCount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryCount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryCount.Equals(Square.Connect.Model.InventoryCount)">
            <summary>
            Returns true if InventoryCount instances are equal
            </summary>
            <param name="other">Instance of InventoryCount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryCount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.InventoryPhysicalCount">
            <summary>
            Represents the quantity of an item variation that is physically present at a specific location, verified by a seller or a seller&#39;s employee. For example, a physical count might come from an employee counting the item variations on hand or from syncing with an external system.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.InventoryPhysicalCount.StateEnum">
            <summary>
            The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.CUSTOM">
            <summary>
            Enum CUSTOM for "CUSTOM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.INSTOCK">
            <summary>
            Enum INSTOCK for "IN_STOCK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.SOLD">
            <summary>
            Enum SOLD for "SOLD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.RETURNEDBYCUSTOMER">
            <summary>
            Enum RETURNEDBYCUSTOMER for "RETURNED_BY_CUSTOMER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.RESERVEDFORSALE">
            <summary>
            Enum RESERVEDFORSALE for "RESERVED_FOR_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.SOLDONLINE">
            <summary>
            Enum SOLDONLINE for "SOLD_ONLINE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.ORDEREDFROMVENDOR">
            <summary>
            Enum ORDEREDFROMVENDOR for "ORDERED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.RECEIVEDFROMVENDOR">
            <summary>
            Enum RECEIVEDFROMVENDOR for "RECEIVED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.INTRANSITTO">
            <summary>
            Enum INTRANSITTO for "IN_TRANSIT_TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.WASTE">
            <summary>
            Enum WASTE for "WASTE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryPhysicalCount.StateEnum.UNLINKEDRETURN">
            <summary>
            Enum UNLINKEDRETURN for "UNLINKED_RETURN"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.State">
            <summary>
            The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryPhysicalCount.#ctor(System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.InventoryPhysicalCount.StateEnum},System.String,System.String,Square.Connect.Model.SourceApplication,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.InventoryPhysicalCount" /> class.
            </summary>
            <param name="Id">A unique ID generated by Square for the [InventoryPhysicalCount](#type-inventoryphysicalcount)..</param>
            <param name="ReferenceId">An optional ID provided by the application to tie the [InventoryPhysicalCount](#type-inventoryphysicalcount) to an external system..</param>
            <param name="CatalogObjectId">The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked..</param>
            <param name="CatalogObjectType">The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type..</param>
            <param name="State">The current [InventoryState](#type-inventorystate) for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values.</param>
            <param name="LocationId">The Square ID of the [Location](#type-location) where the related quantity of items are being tracked..</param>
            <param name="Quantity">The number of items affected by the physical count as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information..</param>
            <param name="Source">Read-only information about the application that submitted the physical count..</param>
            <param name="EmployeeId">The Square ID of the [Employee](#type-employee) responsible for the physical count..</param>
            <param name="OccurredAt">A client-generated timestamp in RFC 3339 format that indicates when the physical count took place. For write actions, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request..</param>
            <param name="CreatedAt">A read-only timestamp in RFC 3339 format that indicates when Square received the physical count..</param>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.Id">
            <summary>
            A unique ID generated by Square for the [InventoryPhysicalCount](#type-inventoryphysicalcount).
            </summary>
            <value>A unique ID generated by Square for the [InventoryPhysicalCount](#type-inventoryphysicalcount).</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.ReferenceId">
            <summary>
            An optional ID provided by the application to tie the [InventoryPhysicalCount](#type-inventoryphysicalcount) to an external system.
            </summary>
            <value>An optional ID provided by the application to tie the [InventoryPhysicalCount](#type-inventoryphysicalcount) to an external system.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.CatalogObjectId">
            <summary>
            The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked.
            </summary>
            <value>The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.CatalogObjectType">
            <summary>
            The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.
            </summary>
            <value>The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.LocationId">
            <summary>
            The Square ID of the [Location](#type-location) where the related quantity of items are being tracked.
            </summary>
            <value>The Square ID of the [Location](#type-location) where the related quantity of items are being tracked.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.Quantity">
            <summary>
            The number of items affected by the physical count as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information.
            </summary>
            <value>The number of items affected by the physical count as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.Source">
            <summary>
            Read-only information about the application that submitted the physical count.
            </summary>
            <value>Read-only information about the application that submitted the physical count.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.EmployeeId">
            <summary>
            The Square ID of the [Employee](#type-employee) responsible for the physical count.
            </summary>
            <value>The Square ID of the [Employee](#type-employee) responsible for the physical count.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.OccurredAt">
            <summary>
            A client-generated timestamp in RFC 3339 format that indicates when the physical count took place. For write actions, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request.
            </summary>
            <value>A client-generated timestamp in RFC 3339 format that indicates when the physical count took place. For write actions, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryPhysicalCount.CreatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format that indicates when Square received the physical count.
            </summary>
            <value>A read-only timestamp in RFC 3339 format that indicates when Square received the physical count.</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryPhysicalCount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryPhysicalCount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryPhysicalCount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryPhysicalCount.Equals(Square.Connect.Model.InventoryPhysicalCount)">
            <summary>
            Returns true if InventoryPhysicalCount instances are equal
            </summary>
            <param name="other">Instance of InventoryPhysicalCount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryPhysicalCount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.InventoryState">
            <summary>
            Indicates the state of a tracked item quantity in the lifecycle of goods.
            </summary>
            <value>Indicates the state of a tracked item quantity in the lifecycle of goods.</value>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.CUSTOM">
            <summary>
            Enum CUSTOM for "CUSTOM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.INSTOCK">
            <summary>
            Enum INSTOCK for "IN_STOCK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.SOLD">
            <summary>
            Enum SOLD for "SOLD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.RETURNEDBYCUSTOMER">
            <summary>
            Enum RETURNEDBYCUSTOMER for "RETURNED_BY_CUSTOMER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.RESERVEDFORSALE">
            <summary>
            Enum RESERVEDFORSALE for "RESERVED_FOR_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.SOLDONLINE">
            <summary>
            Enum SOLDONLINE for "SOLD_ONLINE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.ORDEREDFROMVENDOR">
            <summary>
            Enum ORDEREDFROMVENDOR for "ORDERED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.RECEIVEDFROMVENDOR">
            <summary>
            Enum RECEIVEDFROMVENDOR for "RECEIVED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.INTRANSITTO">
            <summary>
            Enum INTRANSITTO for "IN_TRANSIT_TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.WASTE">
            <summary>
            Enum WASTE for "WASTE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryState.UNLINKEDRETURN">
            <summary>
            Enum UNLINKEDRETURN for "UNLINKED_RETURN"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.InventoryTransfer">
            <summary>
            Represents the transfer of a quantity of product inventory at a particular time from one location to another.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.InventoryTransfer.StateEnum">
            <summary>
            The [InventoryState](#type-inventorystate) for the quantity of items being transfered. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The [InventoryState](#type-inventorystate) for the quantity of items being transfered. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.CUSTOM">
            <summary>
            Enum CUSTOM for "CUSTOM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.INSTOCK">
            <summary>
            Enum INSTOCK for "IN_STOCK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.SOLD">
            <summary>
            Enum SOLD for "SOLD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.RETURNEDBYCUSTOMER">
            <summary>
            Enum RETURNEDBYCUSTOMER for "RETURNED_BY_CUSTOMER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.RESERVEDFORSALE">
            <summary>
            Enum RESERVEDFORSALE for "RESERVED_FOR_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.SOLDONLINE">
            <summary>
            Enum SOLDONLINE for "SOLD_ONLINE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.ORDEREDFROMVENDOR">
            <summary>
            Enum ORDEREDFROMVENDOR for "ORDERED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.RECEIVEDFROMVENDOR">
            <summary>
            Enum RECEIVEDFROMVENDOR for "RECEIVED_FROM_VENDOR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.INTRANSITTO">
            <summary>
            Enum INTRANSITTO for "IN_TRANSIT_TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.WASTE">
            <summary>
            Enum WASTE for "WASTE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.InventoryTransfer.StateEnum.UNLINKEDRETURN">
            <summary>
            Enum UNLINKEDRETURN for "UNLINKED_RETURN"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.State">
            <summary>
            The [InventoryState](#type-inventorystate) for the quantity of items being transfered. See [InventoryState](#type-inventorystate) for possible values
            </summary>
            <value>The [InventoryState](#type-inventorystate) for the quantity of items being transfered. See [InventoryState](#type-inventorystate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryTransfer.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.InventoryTransfer.StateEnum},System.String,System.String,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.SourceApplication,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.InventoryTransfer" /> class.
            </summary>
            <param name="Id">A unique ID generated by Square for the [InventoryTransfer](#type-inventorytransfer)..</param>
            <param name="ReferenceId">An optional ID provided by the application to tie the [InventoryTransfer](#type-inventorytransfer) to an external system..</param>
            <param name="State">The [InventoryState](#type-inventorystate) for the quantity of items being transfered. See [InventoryState](#type-inventorystate) for possible values.</param>
            <param name="FromLocationId">The Square ID of the [Location](#type-location) where the related quantity of items were tracked before the transfer..</param>
            <param name="ToLocationId">The Square ID of the [Location](#type-location) where the related quantity of items were tracked after the transfer..</param>
            <param name="CatalogObjectId">The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked..</param>
            <param name="CatalogObjectType">The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked.Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type..</param>
            <param name="Quantity">The number of items affected by the transfer as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information..</param>
            <param name="OccurredAt">A client-generated timestamp in RFC 3339 format that indicates when the transfer took place. For write actions, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request..</param>
            <param name="CreatedAt">A read-only timestamp in RFC 3339 format that indicates when Square received the transfer request..</param>
            <param name="Source">Read-only information about the application that initiated the inventory transfer..</param>
            <param name="EmployeeId">The Square ID of the [Employee](#type-employee) responsible for the inventory transfer..</param>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.Id">
            <summary>
            A unique ID generated by Square for the [InventoryTransfer](#type-inventorytransfer).
            </summary>
            <value>A unique ID generated by Square for the [InventoryTransfer](#type-inventorytransfer).</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.ReferenceId">
            <summary>
            An optional ID provided by the application to tie the [InventoryTransfer](#type-inventorytransfer) to an external system.
            </summary>
            <value>An optional ID provided by the application to tie the [InventoryTransfer](#type-inventorytransfer) to an external system.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.FromLocationId">
            <summary>
            The Square ID of the [Location](#type-location) where the related quantity of items were tracked before the transfer.
            </summary>
            <value>The Square ID of the [Location](#type-location) where the related quantity of items were tracked before the transfer.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.ToLocationId">
            <summary>
            The Square ID of the [Location](#type-location) where the related quantity of items were tracked after the transfer.
            </summary>
            <value>The Square ID of the [Location](#type-location) where the related quantity of items were tracked after the transfer.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.CatalogObjectId">
            <summary>
            The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked.
            </summary>
            <value>The Square generated ID of the [CatalogObject](#type-catalogobject) being tracked.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.CatalogObjectType">
            <summary>
            The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked.Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.
            </summary>
            <value>The [CatalogObjectType](#type-catalogobjecttype) of the [CatalogObject](#type-catalogobject) being tracked.Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.Quantity">
            <summary>
            The number of items affected by the transfer as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information.
            </summary>
            <value>The number of items affected by the transfer as a decimal string. Can support up to 5 digits after the decimal point.  _Important_: The Point of Sale app and Dashboard do not currently support decimal quantities. If a Point of Sale app or Dashboard attempts to read a decimal quantity on inventory counts or adjustments, the quantity will be rounded down to the nearest integer. For example, &#x60;2.5&#x60; will become &#x60;2&#x60;, and &#x60;-2.5&#x60; will become &#x60;-3&#x60;. Read [Decimal Quantities (BETA)](/more-apis/inventory/overview#decimal-quantities-beta) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.OccurredAt">
            <summary>
            A client-generated timestamp in RFC 3339 format that indicates when the transfer took place. For write actions, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request.
            </summary>
            <value>A client-generated timestamp in RFC 3339 format that indicates when the transfer took place. For write actions, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.CreatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format that indicates when Square received the transfer request.
            </summary>
            <value>A read-only timestamp in RFC 3339 format that indicates when Square received the transfer request.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.Source">
            <summary>
            Read-only information about the application that initiated the inventory transfer.
            </summary>
            <value>Read-only information about the application that initiated the inventory transfer.</value>
        </member>
        <member name="P:Square.Connect.Model.InventoryTransfer.EmployeeId">
            <summary>
            The Square ID of the [Employee](#type-employee) responsible for the inventory transfer.
            </summary>
            <value>The Square ID of the [Employee](#type-employee) responsible for the inventory transfer.</value>
        </member>
        <member name="M:Square.Connect.Model.InventoryTransfer.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryTransfer.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryTransfer.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryTransfer.Equals(Square.Connect.Model.InventoryTransfer)">
            <summary>
            Returns true if InventoryTransfer instances are equal
            </summary>
            <param name="other">Instance of InventoryTransfer to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.InventoryTransfer.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ItemVariationLocationOverrides">
            <summary>
            Price and inventory alerting overrides for a [CatalogItemVariation](#type-catalogitemvariation) at a specific [location](#type-location).
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ItemVariationLocationOverrides.PricingTypeEnum">
            <summary>
            The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for possible values
            </summary>
            <value>The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ItemVariationLocationOverrides.PricingTypeEnum.FIXEDPRICING">
            <summary>
            Enum FIXEDPRICING for "FIXED_PRICING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ItemVariationLocationOverrides.PricingTypeEnum.VARIABLEPRICING">
            <summary>
            Enum VARIABLEPRICING for "VARIABLE_PRICING"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertTypeEnum">
            <summary>
            Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values
            </summary>
            <value>Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertTypeEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertTypeEnum.LOWQUANTITY">
            <summary>
            Enum LOWQUANTITY for "LOW_QUANTITY"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.PricingType">
            <summary>
            The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for possible values
            </summary>
            <value>The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertType">
            <summary>
            Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values
            </summary>
            <value>Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.#ctor(System.String,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.ItemVariationLocationOverrides.PricingTypeEnum},System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertTypeEnum},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ItemVariationLocationOverrides" /> class.
            </summary>
            <param name="LocationId">The ID of the [location](#type-location)..</param>
            <param name="PriceMoney">The price of the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location), or blank for variable pricing..</param>
            <param name="PricingType">The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for possible values.</param>
            <param name="TrackInventory">If &#x60;true&#x60;, inventory tracking is active for the [CatalogItemVariation](#type-catalogitemvariation) at this [location](#type-location)..</param>
            <param name="InventoryAlertType">Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its &#x60;inventory_alert_threshold&#x60;. See [InventoryAlertType](#type-inventoryalerttype) for possible values.</param>
            <param name="InventoryAlertThreshold">If the inventory quantity for the variation is less than or equal to this value and &#x60;inventory_alert_type&#x60; is &#x60;LOW_QUANTITY&#x60;, the variation displays an alert in the merchant dashboard.  This value is always an integer..</param>
        </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.LocationId">
            <summary>
            The ID of the [location](#type-location).
            </summary>
            <value>The ID of the [location](#type-location).</value>
        </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.PriceMoney">
            <summary>
            The price of the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location), or blank for variable pricing.
            </summary>
            <value>The price of the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location), or blank for variable pricing.</value>
        </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.TrackInventory">
            <summary>
            If &#x60;true&#x60;, inventory tracking is active for the [CatalogItemVariation](#type-catalogitemvariation) at this [location](#type-location).
            </summary>
            <value>If &#x60;true&#x60;, inventory tracking is active for the [CatalogItemVariation](#type-catalogitemvariation) at this [location](#type-location).</value>
        </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertThreshold">
            <summary>
            If the inventory quantity for the variation is less than or equal to this value and &#x60;inventory_alert_type&#x60; is &#x60;LOW_QUANTITY&#x60;, the variation displays an alert in the merchant dashboard.  This value is always an integer.
            </summary>
            <value>If the inventory quantity for the variation is less than or equal to this value and &#x60;inventory_alert_type&#x60; is &#x60;LOW_QUANTITY&#x60;, the variation displays an alert in the merchant dashboard.  This value is always an integer.</value>
        </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.Equals(Square.Connect.Model.ItemVariationLocationOverrides)">
            <summary>
            Returns true if ItemVariationLocationOverrides instances are equal
            </summary>
            <param name="other">Instance of ItemVariationLocationOverrides to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest">
            <summary>
            Defines the query parameters that can be included in a request to the ListAdditionalRecipientReceivableRefunds endpoint.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrderEnum">
            <summary>
            The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrder">
            <summary>
            The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrderEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest" /> class.
            </summary>
            <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
            <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
            <param name="SortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.BeginTime">
            <summary>
            The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
            </summary>
            <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.EndTime">
            <summary>
            The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
            </summary>
            <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.Equals(Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest)">
            <summary>
            Returns true if ListAdditionalRecipientReceivableRefundsRequest instances are equal
            </summary>
            <param name="other">Instance of ListAdditionalRecipientReceivableRefundsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the ListAdditionalRecipientReceivableRefunds endpoint.  One of &#x60;errors&#x60; or &#x60;additional_recipient_receivable_refunds&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipientReceivableRefund},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="ReceivableRefunds">An array of AdditionalRecipientReceivableRefunds that match your query..</param>
            <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.ReceivableRefunds">
            <summary>
            An array of AdditionalRecipientReceivableRefunds that match your query.
            </summary>
            <value>An array of AdditionalRecipientReceivableRefunds that match your query.</value>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.Cursor">
            <summary>
            A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.Equals(Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse)">
            <summary>
            Returns true if ListAdditionalRecipientReceivableRefundsResponse instances are equal
            </summary>
            <param name="other">Instance of ListAdditionalRecipientReceivableRefundsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest">
            <summary>
            Defines the query parameters that can be included in a request to the ListAdditionalRecipientReceivables endpoint.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrderEnum">
            <summary>
            The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrder">
            <summary>
            The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrderEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest" /> class.
            </summary>
            <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
            <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
            <param name="SortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.BeginTime">
            <summary>
            The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
            </summary>
            <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.EndTime">
            <summary>
            The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
            </summary>
            <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.Equals(Square.Connect.Model.ListAdditionalRecipientReceivablesRequest)">
            <summary>
            Returns true if ListAdditionalRecipientReceivablesRequest instances are equal
            </summary>
            <param name="other">Instance of ListAdditionalRecipientReceivablesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the ListAdditionalRecipientReceivables endpoint.  One of &#x60;errors&#x60; or &#x60;additional_recipient_receivables&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipientReceivable},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Receivables">An array of AdditionalRecipientReceivables that match your query..</param>
            <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Receivables">
            <summary>
            An array of AdditionalRecipientReceivables that match your query.
            </summary>
            <value>An array of AdditionalRecipientReceivables that match your query.</value>
        </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Cursor">
            <summary>
            A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Equals(Square.Connect.Model.ListAdditionalRecipientReceivablesResponse)">
            <summary>
            Returns true if ListAdditionalRecipientReceivablesResponse instances are equal
            </summary>
            <param name="other">Instance of ListAdditionalRecipientReceivablesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListBreakTypesRequest">
            <summary>
            A request for a filtered set of &#x60;BreakType&#x60; objects
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesRequest.#ctor(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListBreakTypesRequest" /> class.
            </summary>
            <param name="LocationId">Filter Break Types returned to only those that are associated with the specified location..</param>
            <param name="Limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200..</param>
            <param name="Cursor">Pointer to the next page of Break Type results to fetch..</param>
        </member>
        <member name="P:Square.Connect.Model.ListBreakTypesRequest.LocationId">
            <summary>
            Filter Break Types returned to only those that are associated with the specified location.
            </summary>
            <value>Filter Break Types returned to only those that are associated with the specified location.</value>
        </member>
        <member name="P:Square.Connect.Model.ListBreakTypesRequest.Limit">
            <summary>
            Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
            </summary>
            <value>Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.</value>
        </member>
        <member name="P:Square.Connect.Model.ListBreakTypesRequest.Cursor">
            <summary>
            Pointer to the next page of Break Type results to fetch.
            </summary>
            <value>Pointer to the next page of Break Type results to fetch.</value>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesRequest.Equals(Square.Connect.Model.ListBreakTypesRequest)">
            <summary>
            Returns true if ListBreakTypesRequest instances are equal
            </summary>
            <param name="other">Instance of ListBreakTypesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListBreakTypesResponse">
            <summary>
            The response to a request for a set of &#x60;BreakTypes&#x60;. Contains the requested &#x60;BreakType&#x60; objects. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.BreakType},System.String,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListBreakTypesResponse" /> class.
            </summary>
            <param name="BreakTypes"> A page of &#x60;BreakType&#x60; results..</param>
            <param name="Cursor">Value supplied in the subsequent request to fetch the next next page of Break Type results..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.ListBreakTypesResponse.BreakTypes">
            <summary>
             A page of &#x60;BreakType&#x60; results.
            </summary>
            <value> A page of &#x60;BreakType&#x60; results.</value>
        </member>
        <member name="P:Square.Connect.Model.ListBreakTypesResponse.Cursor">
            <summary>
            Value supplied in the subsequent request to fetch the next next page of Break Type results.
            </summary>
            <value>Value supplied in the subsequent request to fetch the next next page of Break Type results.</value>
        </member>
        <member name="P:Square.Connect.Model.ListBreakTypesResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesResponse.Equals(Square.Connect.Model.ListBreakTypesResponse)">
            <summary>
            Returns true if ListBreakTypesResponse instances are equal
            </summary>
            <param name="other">Instance of ListBreakTypesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListBreakTypesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListCatalogRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCatalogRequest" /> class.
            </summary>
            <param name="Cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information..</param>
            <param name="Types">An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.ListCatalogRequest.Cursor">
            <summary>
            The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.ListCatalogRequest.Types">
            <summary>
            An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.
            </summary>
            <value>An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.Equals(Square.Connect.Model.ListCatalogRequest)">
            <summary>
            Returns true if ListCatalogRequest instances are equal
            </summary>
            <param name="other">Instance of ListCatalogRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListCatalogResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCatalogResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="Cursor">The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information..</param>
            <param name="Objects">The [CatalogObject](#type-catalogobject)s returned..</param>
        </member>
        <member name="P:Square.Connect.Model.ListCatalogResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.ListCatalogResponse.Cursor">
            <summary>
            The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.ListCatalogResponse.Objects">
            <summary>
            The [CatalogObject](#type-catalogobject)s returned.
            </summary>
            <value>The [CatalogObject](#type-catalogobject)s returned.</value>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.Equals(Square.Connect.Model.ListCatalogResponse)">
            <summary>
            Returns true if ListCatalogResponse instances are equal
            </summary>
            <param name="other">Instance of ListCatalogResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListCustomersRequest">
            <summary>
            Defines the query parameters that can be provided in a request to the ListCustomers endpoint.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ListCustomersRequest.SortFieldEnum">
            <summary>
            Indicates how Customers should be sorted. Default: `DEFAULT`. See [CustomerSortField](#type-customersortfield) for possible values
            </summary>
            <value>Indicates how Customers should be sorted. Default: `DEFAULT`. See [CustomerSortField](#type-customersortfield) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ListCustomersRequest.SortFieldEnum.DEFAULT">
            <summary>
            Enum DEFAULT for "DEFAULT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ListCustomersRequest.SortFieldEnum.CREATEDAT">
            <summary>
            Enum CREATEDAT for "CREATED_AT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ListCustomersRequest.SortOrderEnum">
            <summary>
            Indicates whether Customers should be sorted in ascending (`ASC`) or descending (`DESC`) order. Default: `ASC`. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>Indicates whether Customers should be sorted in ascending (`ASC`) or descending (`DESC`) order. Default: `ASC`. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ListCustomersRequest.SortOrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ListCustomersRequest.SortOrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ListCustomersRequest.SortField">
            <summary>
            Indicates how Customers should be sorted. Default: `DEFAULT`. See [CustomerSortField](#type-customersortfield) for possible values
            </summary>
            <value>Indicates how Customers should be sorted. Default: `DEFAULT`. See [CustomerSortField](#type-customersortfield) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.ListCustomersRequest.SortOrder">
            <summary>
            Indicates whether Customers should be sorted in ascending (`ASC`) or descending (`DESC`) order. Default: `ASC`. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>Indicates whether Customers should be sorted in ascending (`ASC`) or descending (`DESC`) order. Default: `ASC`. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.#ctor(System.String,System.Nullable{Square.Connect.Model.ListCustomersRequest.SortFieldEnum},System.Nullable{Square.Connect.Model.ListCustomersRequest.SortOrderEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCustomersRequest" /> class.
            </summary>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
            <param name="SortField">Indicates how Customers should be sorted. Default: &#x60;DEFAULT&#x60;. See [CustomerSortField](#type-customersortfield) for possible values.</param>
            <param name="SortOrder">Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. Default: &#x60;ASC&#x60;. See [SortOrder](#type-sortorder) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.ListCustomersRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.Equals(Square.Connect.Model.ListCustomersRequest)">
            <summary>
            Returns true if ListCustomersRequest instances are equal
            </summary>
            <param name="other">Instance of ListCustomersRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListCustomersResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the ListCustomers endpoint.  One of &#x60;errors&#x60; or &#x60;customers&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Customer},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCustomersResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Customers">An array of &#x60;Customer&#x60; objects that match your query..</param>
            <param name="Cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Customers">
            <summary>
            An array of &#x60;Customer&#x60; objects that match your query.
            </summary>
            <value>An array of &#x60;Customer&#x60; objects that match your query.</value>
        </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Cursor">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.Equals(Square.Connect.Model.ListCustomersResponse)">
            <summary>
            Returns true if ListCustomersResponse instances are equal
            </summary>
            <param name="other">Instance of ListCustomersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListEmployeesRequest">
            <summary>
            Retrieve a paged-list of employees for a Square account
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ListEmployeesRequest.StatusEnum">
            <summary>
            Specifies the EmployeeStatus to filter the employee by. See [EmployeeStatus](#type-employeestatus) for possible values
            </summary>
            <value>Specifies the EmployeeStatus to filter the employee by. See [EmployeeStatus](#type-employeestatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ListEmployeesRequest.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for "ACTIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ListEmployeesRequest.StatusEnum.INACTIVE">
            <summary>
            Enum INACTIVE for "INACTIVE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeesRequest.Status">
            <summary>
            Specifies the EmployeeStatus to filter the employee by. See [EmployeeStatus](#type-employeestatus) for possible values
            </summary>
            <value>Specifies the EmployeeStatus to filter the employee by. See [EmployeeStatus](#type-employeestatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesRequest.#ctor(System.String,System.Nullable{Square.Connect.Model.ListEmployeesRequest.StatusEnum},System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListEmployeesRequest" /> class.
            </summary>
            <param name="LocationId">Filter employees returned to only those that are associated with the specified location..</param>
            <param name="Status">Specifies the EmployeeStatus to filter the employee by. See [EmployeeStatus](#type-employeestatus) for possible values.</param>
            <param name="Limit">The number of employees to be returned on each page..</param>
            <param name="Cursor">The token required to retrieve the specified page of results..</param>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeesRequest.LocationId">
            <summary>
            Filter employees returned to only those that are associated with the specified location.
            </summary>
            <value>Filter employees returned to only those that are associated with the specified location.</value>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeesRequest.Limit">
            <summary>
            The number of employees to be returned on each page.
            </summary>
            <value>The number of employees to be returned on each page.</value>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeesRequest.Cursor">
            <summary>
            The token required to retrieve the specified page of results.
            </summary>
            <value>The token required to retrieve the specified page of results.</value>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesRequest.Equals(Square.Connect.Model.ListEmployeesRequest)">
            <summary>
            Returns true if ListEmployeesRequest instances are equal
            </summary>
            <param name="other">Instance of ListEmployeesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListEmployeesResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the ListEmployees endpoint.  One of &#x60;errors&#x60; or &#x60;employees&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Employee},System.String,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListEmployeesResponse" /> class.
            </summary>
            <param name="Employees">List of employees returned from the request..</param>
            <param name="Cursor">The token to be used to retrieve the next page of results..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeesResponse.Employees">
            <summary>
            List of employees returned from the request.
            </summary>
            <value>List of employees returned from the request.</value>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeesResponse.Cursor">
            <summary>
            The token to be used to retrieve the next page of results.
            </summary>
            <value>The token to be used to retrieve the next page of results.</value>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeesResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesResponse.Equals(Square.Connect.Model.ListEmployeesResponse)">
            <summary>
            Returns true if ListEmployeesResponse instances are equal
            </summary>
            <param name="other">Instance of ListEmployeesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListEmployeeWagesRequest">
            <summary>
            A request for a set of &#x60;EmployeeWage&#x60; objects
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesRequest.#ctor(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListEmployeeWagesRequest" /> class.
            </summary>
            <param name="EmployeeId">Filter wages returned to only those that are associated with the specified employee..</param>
            <param name="Limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200..</param>
            <param name="Cursor">Pointer to the next page of Employee Wage results to fetch..</param>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeeWagesRequest.EmployeeId">
            <summary>
            Filter wages returned to only those that are associated with the specified employee.
            </summary>
            <value>Filter wages returned to only those that are associated with the specified employee.</value>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeeWagesRequest.Limit">
            <summary>
            Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
            </summary>
            <value>Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.</value>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeeWagesRequest.Cursor">
            <summary>
            Pointer to the next page of Employee Wage results to fetch.
            </summary>
            <value>Pointer to the next page of Employee Wage results to fetch.</value>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesRequest.Equals(Square.Connect.Model.ListEmployeeWagesRequest)">
            <summary>
            Returns true if ListEmployeeWagesRequest instances are equal
            </summary>
            <param name="other">Instance of ListEmployeeWagesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListEmployeeWagesResponse">
            <summary>
            The response to a request for a set of &#x60;EmployeeWage&#x60; objects. Contains  a set of &#x60;EmployeeWage&#x60;.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.EmployeeWage},System.String,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListEmployeeWagesResponse" /> class.
            </summary>
            <param name="EmployeeWages">A page of Employee Wage results..</param>
            <param name="Cursor">Value supplied in the subsequent request to fetch the next next page of Employee Wage results..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeeWagesResponse.EmployeeWages">
            <summary>
            A page of Employee Wage results.
            </summary>
            <value>A page of Employee Wage results.</value>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeeWagesResponse.Cursor">
            <summary>
            Value supplied in the subsequent request to fetch the next next page of Employee Wage results.
            </summary>
            <value>Value supplied in the subsequent request to fetch the next next page of Employee Wage results.</value>
        </member>
        <member name="P:Square.Connect.Model.ListEmployeeWagesResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesResponse.Equals(Square.Connect.Model.ListEmployeeWagesResponse)">
            <summary>
            Returns true if ListEmployeeWagesResponse instances are equal
            </summary>
            <param name="other">Instance of ListEmployeeWagesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListEmployeeWagesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListLocationsRequest">
            <summary>
            Defines the fields that are included in requests to the ListLocations endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListLocationsRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.Equals(Square.Connect.Model.ListLocationsRequest)">
            <summary>
            Returns true if ListLocationsRequest instances are equal
            </summary>
            <param name="other">Instance of ListLocationsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListLocationsResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the ListLocations endpoint.  One of &#x60;errors&#x60; or &#x60;locations&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Location})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListLocationsResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Locations">The business&#39;s locations..</param>
        </member>
        <member name="P:Square.Connect.Model.ListLocationsResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.ListLocationsResponse.Locations">
            <summary>
            The business&#39;s locations.
            </summary>
            <value>The business&#39;s locations.</value>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.Equals(Square.Connect.Model.ListLocationsResponse)">
            <summary>
            Returns true if ListLocationsResponse instances are equal
            </summary>
            <param name="other">Instance of ListLocationsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListRefundsRequest">
            <summary>
            Defines the query parameters that can be included in a request to the ListRefunds endpoint.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ListRefundsRequest.SortOrderEnum">
            <summary>
            The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ListRefundsRequest.SortOrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ListRefundsRequest.SortOrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.SortOrder">
            <summary>
            The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListRefundsRequest.SortOrderEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListRefundsRequest" /> class.
            </summary>
            <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
            <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
            <param name="SortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.BeginTime">
            <summary>
            The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
            </summary>
            <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
        </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.EndTime">
            <summary>
            The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
            </summary>
            <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
        </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.Equals(Square.Connect.Model.ListRefundsRequest)">
            <summary>
            Returns true if ListRefundsRequest instances are equal
            </summary>
            <param name="other">Instance of ListRefundsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListRefundsResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the ListRefunds endpoint.  One of &#x60;errors&#x60; or &#x60;refunds&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Refund},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListRefundsResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Refunds">An array of refunds that match your query..</param>
            <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Refunds">
            <summary>
            An array of refunds that match your query.
            </summary>
            <value>An array of refunds that match your query.</value>
        </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Cursor">
            <summary>
            A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.Equals(Square.Connect.Model.ListRefundsResponse)">
            <summary>
            Returns true if ListRefundsResponse instances are equal
            </summary>
            <param name="other">Instance of ListRefundsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListTransactionsRequest">
            <summary>
            Defines the query parameters that can be included in a request to the ListTransactions endpoint.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum">
            <summary>
            The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.SortOrder">
            <summary>
            The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListTransactionsRequest.SortOrderEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListTransactionsRequest" /> class.
            </summary>
            <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
            <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
            <param name="SortOrder">The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60; See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.BeginTime">
            <summary>
            The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
            </summary>
            <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
        </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.EndTime">
            <summary>
            The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
            </summary>
            <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
        </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.Equals(Square.Connect.Model.ListTransactionsRequest)">
            <summary>
            Returns true if ListTransactionsRequest instances are equal
            </summary>
            <param name="other">Instance of ListTransactionsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListTransactionsResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the ListTransactions endpoint.  One of &#x60;errors&#x60; or &#x60;transactions&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Transaction},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListTransactionsResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Transactions">An array of transactions that match your query..</param>
            <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Transactions">
            <summary>
            An array of transactions that match your query.
            </summary>
            <value>An array of transactions that match your query.</value>
        </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Cursor">
            <summary>
            A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the &#x60;cursor&#x60; parameter in a subsequent request to this endpoint.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.Equals(Square.Connect.Model.ListTransactionsResponse)">
            <summary>
            Returns true if ListTransactionsResponse instances are equal
            </summary>
            <param name="other">Instance of ListTransactionsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListWorkweekConfigsRequest">
            <summary>
            A request for a set of &#x60;WorkweekConfig&#x60; objects
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsRequest.#ctor(System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListWorkweekConfigsRequest" /> class.
            </summary>
            <param name="Limit">Maximum number of Workweek Configs to return per page..</param>
            <param name="Cursor">Pointer to the next page of Workweek Config results to fetch..</param>
        </member>
        <member name="P:Square.Connect.Model.ListWorkweekConfigsRequest.Limit">
            <summary>
            Maximum number of Workweek Configs to return per page.
            </summary>
            <value>Maximum number of Workweek Configs to return per page.</value>
        </member>
        <member name="P:Square.Connect.Model.ListWorkweekConfigsRequest.Cursor">
            <summary>
            Pointer to the next page of Workweek Config results to fetch.
            </summary>
            <value>Pointer to the next page of Workweek Config results to fetch.</value>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsRequest.Equals(Square.Connect.Model.ListWorkweekConfigsRequest)">
            <summary>
            Returns true if ListWorkweekConfigsRequest instances are equal
            </summary>
            <param name="other">Instance of ListWorkweekConfigsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ListWorkweekConfigsResponse">
            <summary>
            The response to a request for a set of &#x60;WorkweekConfig&#x60; objects. Contains the requested &#x60;WorkweekConfig&#x60; objects. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.WorkweekConfig},System.String,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ListWorkweekConfigsResponse" /> class.
            </summary>
            <param name="WorkweekConfigs">A page of Employee Wage results..</param>
            <param name="Cursor">Value supplied in the subsequent request to fetch the next page of Employee Wage results..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.ListWorkweekConfigsResponse.WorkweekConfigs">
            <summary>
            A page of Employee Wage results.
            </summary>
            <value>A page of Employee Wage results.</value>
        </member>
        <member name="P:Square.Connect.Model.ListWorkweekConfigsResponse.Cursor">
            <summary>
            Value supplied in the subsequent request to fetch the next page of Employee Wage results.
            </summary>
            <value>Value supplied in the subsequent request to fetch the next page of Employee Wage results.</value>
        </member>
        <member name="P:Square.Connect.Model.ListWorkweekConfigsResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsResponse.Equals(Square.Connect.Model.ListWorkweekConfigsResponse)">
            <summary>
            Returns true if ListWorkweekConfigsResponse instances are equal
            </summary>
            <param name="other">Instance of ListWorkweekConfigsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ListWorkweekConfigsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Location">
            <summary>
            Represents one of a business&#39;s locations.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Location.CapabilitiesEnum">
            <summary>
            Gets or Sets Capabilities
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CapabilitiesEnum.PROCESSING">
            <summary>
            Enum PROCESSING for "CREDIT_CARD_PROCESSING"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Location.StatusEnum">
            <summary>
            The location's status See [LocationStatus](#type-locationstatus) for possible values
            </summary>
            <value>The location's status See [LocationStatus](#type-locationstatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Location.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for "ACTIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.StatusEnum.INACTIVE">
            <summary>
            Enum INACTIVE for "INACTIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Location.CountryEnum">
            <summary>
            The location's country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values
            </summary>
            <value>The location's country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ZZ">
            <summary>
            Enum ZZ for "ZZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AD">
            <summary>
            Enum AD for "AD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AE">
            <summary>
            Enum AE for "AE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AF">
            <summary>
            Enum AF for "AF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AG">
            <summary>
            Enum AG for "AG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AI">
            <summary>
            Enum AI for "AI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AL">
            <summary>
            Enum AL for "AL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AM">
            <summary>
            Enum AM for "AM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AO">
            <summary>
            Enum AO for "AO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AQ">
            <summary>
            Enum AQ for "AQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AR">
            <summary>
            Enum AR for "AR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AS">
            <summary>
            Enum AS for "AS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AT">
            <summary>
            Enum AT for "AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AU">
            <summary>
            Enum AU for "AU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AW">
            <summary>
            Enum AW for "AW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AX">
            <summary>
            Enum AX for "AX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AZ">
            <summary>
            Enum AZ for "AZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BA">
            <summary>
            Enum BA for "BA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BB">
            <summary>
            Enum BB for "BB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BD">
            <summary>
            Enum BD for "BD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BE">
            <summary>
            Enum BE for "BE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BF">
            <summary>
            Enum BF for "BF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BG">
            <summary>
            Enum BG for "BG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BH">
            <summary>
            Enum BH for "BH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BI">
            <summary>
            Enum BI for "BI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BJ">
            <summary>
            Enum BJ for "BJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BL">
            <summary>
            Enum BL for "BL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BM">
            <summary>
            Enum BM for "BM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BN">
            <summary>
            Enum BN for "BN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BO">
            <summary>
            Enum BO for "BO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BQ">
            <summary>
            Enum BQ for "BQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BR">
            <summary>
            Enum BR for "BR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BS">
            <summary>
            Enum BS for "BS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BT">
            <summary>
            Enum BT for "BT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BV">
            <summary>
            Enum BV for "BV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BW">
            <summary>
            Enum BW for "BW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BY">
            <summary>
            Enum BY for "BY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BZ">
            <summary>
            Enum BZ for "BZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CA">
            <summary>
            Enum CA for "CA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CC">
            <summary>
            Enum CC for "CC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CD">
            <summary>
            Enum CD for "CD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CF">
            <summary>
            Enum CF for "CF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CG">
            <summary>
            Enum CG for "CG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CH">
            <summary>
            Enum CH for "CH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CI">
            <summary>
            Enum CI for "CI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CK">
            <summary>
            Enum CK for "CK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CL">
            <summary>
            Enum CL for "CL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CM">
            <summary>
            Enum CM for "CM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CN">
            <summary>
            Enum CN for "CN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CO">
            <summary>
            Enum CO for "CO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CR">
            <summary>
            Enum CR for "CR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CU">
            <summary>
            Enum CU for "CU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CV">
            <summary>
            Enum CV for "CV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CW">
            <summary>
            Enum CW for "CW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CX">
            <summary>
            Enum CX for "CX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CY">
            <summary>
            Enum CY for "CY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CZ">
            <summary>
            Enum CZ for "CZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DE">
            <summary>
            Enum DE for "DE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DJ">
            <summary>
            Enum DJ for "DJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DK">
            <summary>
            Enum DK for "DK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DM">
            <summary>
            Enum DM for "DM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DO">
            <summary>
            Enum DO for "DO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DZ">
            <summary>
            Enum DZ for "DZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.EC">
            <summary>
            Enum EC for "EC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.EE">
            <summary>
            Enum EE for "EE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.EG">
            <summary>
            Enum EG for "EG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.EH">
            <summary>
            Enum EH for "EH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ER">
            <summary>
            Enum ER for "ER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ES">
            <summary>
            Enum ES for "ES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ET">
            <summary>
            Enum ET for "ET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FI">
            <summary>
            Enum FI for "FI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FJ">
            <summary>
            Enum FJ for "FJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FK">
            <summary>
            Enum FK for "FK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FM">
            <summary>
            Enum FM for "FM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FO">
            <summary>
            Enum FO for "FO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FR">
            <summary>
            Enum FR for "FR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GA">
            <summary>
            Enum GA for "GA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GB">
            <summary>
            Enum GB for "GB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GD">
            <summary>
            Enum GD for "GD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GE">
            <summary>
            Enum GE for "GE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GF">
            <summary>
            Enum GF for "GF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GG">
            <summary>
            Enum GG for "GG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GH">
            <summary>
            Enum GH for "GH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GI">
            <summary>
            Enum GI for "GI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GL">
            <summary>
            Enum GL for "GL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GM">
            <summary>
            Enum GM for "GM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GN">
            <summary>
            Enum GN for "GN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GP">
            <summary>
            Enum GP for "GP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GQ">
            <summary>
            Enum GQ for "GQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GR">
            <summary>
            Enum GR for "GR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GS">
            <summary>
            Enum GS for "GS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GT">
            <summary>
            Enum GT for "GT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GU">
            <summary>
            Enum GU for "GU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GW">
            <summary>
            Enum GW for "GW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GY">
            <summary>
            Enum GY for "GY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HK">
            <summary>
            Enum HK for "HK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HM">
            <summary>
            Enum HM for "HM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HN">
            <summary>
            Enum HN for "HN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HR">
            <summary>
            Enum HR for "HR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HT">
            <summary>
            Enum HT for "HT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HU">
            <summary>
            Enum HU for "HU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ID">
            <summary>
            Enum ID for "ID"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IE">
            <summary>
            Enum IE for "IE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IL">
            <summary>
            Enum IL for "IL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IM">
            <summary>
            Enum IM for "IM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IN">
            <summary>
            Enum IN for "IN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IO">
            <summary>
            Enum IO for "IO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IQ">
            <summary>
            Enum IQ for "IQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IR">
            <summary>
            Enum IR for "IR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IS">
            <summary>
            Enum IS for "IS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IT">
            <summary>
            Enum IT for "IT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.JE">
            <summary>
            Enum JE for "JE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.JM">
            <summary>
            Enum JM for "JM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.JO">
            <summary>
            Enum JO for "JO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.JP">
            <summary>
            Enum JP for "JP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KE">
            <summary>
            Enum KE for "KE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KG">
            <summary>
            Enum KG for "KG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KH">
            <summary>
            Enum KH for "KH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KI">
            <summary>
            Enum KI for "KI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KM">
            <summary>
            Enum KM for "KM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KN">
            <summary>
            Enum KN for "KN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KP">
            <summary>
            Enum KP for "KP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KR">
            <summary>
            Enum KR for "KR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KW">
            <summary>
            Enum KW for "KW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KY">
            <summary>
            Enum KY for "KY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KZ">
            <summary>
            Enum KZ for "KZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LA">
            <summary>
            Enum LA for "LA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LB">
            <summary>
            Enum LB for "LB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LC">
            <summary>
            Enum LC for "LC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LI">
            <summary>
            Enum LI for "LI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LK">
            <summary>
            Enum LK for "LK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LR">
            <summary>
            Enum LR for "LR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LS">
            <summary>
            Enum LS for "LS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LT">
            <summary>
            Enum LT for "LT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LU">
            <summary>
            Enum LU for "LU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LV">
            <summary>
            Enum LV for "LV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LY">
            <summary>
            Enum LY for "LY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MA">
            <summary>
            Enum MA for "MA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MC">
            <summary>
            Enum MC for "MC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MD">
            <summary>
            Enum MD for "MD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ME">
            <summary>
            Enum ME for "ME"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MF">
            <summary>
            Enum MF for "MF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MG">
            <summary>
            Enum MG for "MG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MH">
            <summary>
            Enum MH for "MH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MK">
            <summary>
            Enum MK for "MK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ML">
            <summary>
            Enum ML for "ML"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MM">
            <summary>
            Enum MM for "MM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MN">
            <summary>
            Enum MN for "MN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MO">
            <summary>
            Enum MO for "MO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MP">
            <summary>
            Enum MP for "MP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MQ">
            <summary>
            Enum MQ for "MQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MR">
            <summary>
            Enum MR for "MR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MS">
            <summary>
            Enum MS for "MS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MT">
            <summary>
            Enum MT for "MT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MU">
            <summary>
            Enum MU for "MU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MV">
            <summary>
            Enum MV for "MV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MW">
            <summary>
            Enum MW for "MW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MX">
            <summary>
            Enum MX for "MX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MY">
            <summary>
            Enum MY for "MY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MZ">
            <summary>
            Enum MZ for "MZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NA">
            <summary>
            Enum NA for "NA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NC">
            <summary>
            Enum NC for "NC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NE">
            <summary>
            Enum NE for "NE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NF">
            <summary>
            Enum NF for "NF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NG">
            <summary>
            Enum NG for "NG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NI">
            <summary>
            Enum NI for "NI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NL">
            <summary>
            Enum NL for "NL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NO">
            <summary>
            Enum NO for "NO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NP">
            <summary>
            Enum NP for "NP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NR">
            <summary>
            Enum NR for "NR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NU">
            <summary>
            Enum NU for "NU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NZ">
            <summary>
            Enum NZ for "NZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.OM">
            <summary>
            Enum OM for "OM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PA">
            <summary>
            Enum PA for "PA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PE">
            <summary>
            Enum PE for "PE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PF">
            <summary>
            Enum PF for "PF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PG">
            <summary>
            Enum PG for "PG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PH">
            <summary>
            Enum PH for "PH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PK">
            <summary>
            Enum PK for "PK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PL">
            <summary>
            Enum PL for "PL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PM">
            <summary>
            Enum PM for "PM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PN">
            <summary>
            Enum PN for "PN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PR">
            <summary>
            Enum PR for "PR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PS">
            <summary>
            Enum PS for "PS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PT">
            <summary>
            Enum PT for "PT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PW">
            <summary>
            Enum PW for "PW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PY">
            <summary>
            Enum PY for "PY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.QA">
            <summary>
            Enum QA for "QA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RE">
            <summary>
            Enum RE for "RE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RO">
            <summary>
            Enum RO for "RO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RS">
            <summary>
            Enum RS for "RS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RU">
            <summary>
            Enum RU for "RU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RW">
            <summary>
            Enum RW for "RW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SA">
            <summary>
            Enum SA for "SA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SB">
            <summary>
            Enum SB for "SB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SC">
            <summary>
            Enum SC for "SC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SD">
            <summary>
            Enum SD for "SD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SE">
            <summary>
            Enum SE for "SE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SG">
            <summary>
            Enum SG for "SG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SH">
            <summary>
            Enum SH for "SH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SI">
            <summary>
            Enum SI for "SI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SJ">
            <summary>
            Enum SJ for "SJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SK">
            <summary>
            Enum SK for "SK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SL">
            <summary>
            Enum SL for "SL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SM">
            <summary>
            Enum SM for "SM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SN">
            <summary>
            Enum SN for "SN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SO">
            <summary>
            Enum SO for "SO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SR">
            <summary>
            Enum SR for "SR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SS">
            <summary>
            Enum SS for "SS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ST">
            <summary>
            Enum ST for "ST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SV">
            <summary>
            Enum SV for "SV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SX">
            <summary>
            Enum SX for "SX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SY">
            <summary>
            Enum SY for "SY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SZ">
            <summary>
            Enum SZ for "SZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TC">
            <summary>
            Enum TC for "TC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TD">
            <summary>
            Enum TD for "TD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TF">
            <summary>
            Enum TF for "TF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TG">
            <summary>
            Enum TG for "TG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TH">
            <summary>
            Enum TH for "TH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TJ">
            <summary>
            Enum TJ for "TJ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TK">
            <summary>
            Enum TK for "TK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TL">
            <summary>
            Enum TL for "TL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TM">
            <summary>
            Enum TM for "TM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TN">
            <summary>
            Enum TN for "TN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TO">
            <summary>
            Enum TO for "TO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TR">
            <summary>
            Enum TR for "TR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TT">
            <summary>
            Enum TT for "TT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TV">
            <summary>
            Enum TV for "TV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TW">
            <summary>
            Enum TW for "TW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TZ">
            <summary>
            Enum TZ for "TZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UA">
            <summary>
            Enum UA for "UA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UG">
            <summary>
            Enum UG for "UG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UM">
            <summary>
            Enum UM for "UM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.US">
            <summary>
            Enum US for "US"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UY">
            <summary>
            Enum UY for "UY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UZ">
            <summary>
            Enum UZ for "UZ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VA">
            <summary>
            Enum VA for "VA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VC">
            <summary>
            Enum VC for "VC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VE">
            <summary>
            Enum VE for "VE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VG">
            <summary>
            Enum VG for "VG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VI">
            <summary>
            Enum VI for "VI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VN">
            <summary>
            Enum VN for "VN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VU">
            <summary>
            Enum VU for "VU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.WF">
            <summary>
            Enum WF for "WF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.WS">
            <summary>
            Enum WS for "WS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.YE">
            <summary>
            Enum YE for "YE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.YT">
            <summary>
            Enum YT for "YT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ZA">
            <summary>
            Enum ZA for "ZA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ZM">
            <summary>
            Enum ZM for "ZM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ZW">
            <summary>
            Enum ZW for "ZW"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Location.CurrencyEnum">
            <summary>
            The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'. See [Currency](#type-currency) for possible values
            </summary>
            <value>The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'. See [Currency](#type-currency) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UNKNOWNCURRENCY">
            <summary>
            Enum UNKNOWNCURRENCY for "UNKNOWN_CURRENCY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AED">
            <summary>
            Enum AED for "AED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AFN">
            <summary>
            Enum AFN for "AFN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ALL">
            <summary>
            Enum ALL for "ALL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AMD">
            <summary>
            Enum AMD for "AMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ANG">
            <summary>
            Enum ANG for "ANG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AOA">
            <summary>
            Enum AOA for "AOA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ARS">
            <summary>
            Enum ARS for "ARS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AUD">
            <summary>
            Enum AUD for "AUD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AWG">
            <summary>
            Enum AWG for "AWG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AZN">
            <summary>
            Enum AZN for "AZN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BAM">
            <summary>
            Enum BAM for "BAM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BBD">
            <summary>
            Enum BBD for "BBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BDT">
            <summary>
            Enum BDT for "BDT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BGN">
            <summary>
            Enum BGN for "BGN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BHD">
            <summary>
            Enum BHD for "BHD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BIF">
            <summary>
            Enum BIF for "BIF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BMD">
            <summary>
            Enum BMD for "BMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BND">
            <summary>
            Enum BND for "BND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BOB">
            <summary>
            Enum BOB for "BOB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BOV">
            <summary>
            Enum BOV for "BOV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BRL">
            <summary>
            Enum BRL for "BRL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BSD">
            <summary>
            Enum BSD for "BSD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BTN">
            <summary>
            Enum BTN for "BTN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BWP">
            <summary>
            Enum BWP for "BWP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BYR">
            <summary>
            Enum BYR for "BYR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BZD">
            <summary>
            Enum BZD for "BZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CAD">
            <summary>
            Enum CAD for "CAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CDF">
            <summary>
            Enum CDF for "CDF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CHE">
            <summary>
            Enum CHE for "CHE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CHF">
            <summary>
            Enum CHF for "CHF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CHW">
            <summary>
            Enum CHW for "CHW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CLF">
            <summary>
            Enum CLF for "CLF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CLP">
            <summary>
            Enum CLP for "CLP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CNY">
            <summary>
            Enum CNY for "CNY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.COP">
            <summary>
            Enum COP for "COP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.COU">
            <summary>
            Enum COU for "COU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CRC">
            <summary>
            Enum CRC for "CRC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CUC">
            <summary>
            Enum CUC for "CUC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CUP">
            <summary>
            Enum CUP for "CUP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CVE">
            <summary>
            Enum CVE for "CVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CZK">
            <summary>
            Enum CZK for "CZK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.DJF">
            <summary>
            Enum DJF for "DJF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.DKK">
            <summary>
            Enum DKK for "DKK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.DOP">
            <summary>
            Enum DOP for "DOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.DZD">
            <summary>
            Enum DZD for "DZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.EGP">
            <summary>
            Enum EGP for "EGP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ERN">
            <summary>
            Enum ERN for "ERN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ETB">
            <summary>
            Enum ETB for "ETB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.EUR">
            <summary>
            Enum EUR for "EUR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.FJD">
            <summary>
            Enum FJD for "FJD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.FKP">
            <summary>
            Enum FKP for "FKP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GBP">
            <summary>
            Enum GBP for "GBP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GEL">
            <summary>
            Enum GEL for "GEL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GHS">
            <summary>
            Enum GHS for "GHS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GIP">
            <summary>
            Enum GIP for "GIP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GMD">
            <summary>
            Enum GMD for "GMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GNF">
            <summary>
            Enum GNF for "GNF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GTQ">
            <summary>
            Enum GTQ for "GTQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GYD">
            <summary>
            Enum GYD for "GYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HKD">
            <summary>
            Enum HKD for "HKD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HNL">
            <summary>
            Enum HNL for "HNL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HRK">
            <summary>
            Enum HRK for "HRK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HTG">
            <summary>
            Enum HTG for "HTG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HUF">
            <summary>
            Enum HUF for "HUF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.IDR">
            <summary>
            Enum IDR for "IDR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ILS">
            <summary>
            Enum ILS for "ILS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.INR">
            <summary>
            Enum INR for "INR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.IQD">
            <summary>
            Enum IQD for "IQD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.IRR">
            <summary>
            Enum IRR for "IRR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ISK">
            <summary>
            Enum ISK for "ISK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.JMD">
            <summary>
            Enum JMD for "JMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.JOD">
            <summary>
            Enum JOD for "JOD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.JPY">
            <summary>
            Enum JPY for "JPY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KES">
            <summary>
            Enum KES for "KES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KGS">
            <summary>
            Enum KGS for "KGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KHR">
            <summary>
            Enum KHR for "KHR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KMF">
            <summary>
            Enum KMF for "KMF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KPW">
            <summary>
            Enum KPW for "KPW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KRW">
            <summary>
            Enum KRW for "KRW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KWD">
            <summary>
            Enum KWD for "KWD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KYD">
            <summary>
            Enum KYD for "KYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KZT">
            <summary>
            Enum KZT for "KZT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LAK">
            <summary>
            Enum LAK for "LAK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LBP">
            <summary>
            Enum LBP for "LBP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LKR">
            <summary>
            Enum LKR for "LKR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LRD">
            <summary>
            Enum LRD for "LRD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LSL">
            <summary>
            Enum LSL for "LSL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LTL">
            <summary>
            Enum LTL for "LTL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LVL">
            <summary>
            Enum LVL for "LVL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LYD">
            <summary>
            Enum LYD for "LYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MAD">
            <summary>
            Enum MAD for "MAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MDL">
            <summary>
            Enum MDL for "MDL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MGA">
            <summary>
            Enum MGA for "MGA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MKD">
            <summary>
            Enum MKD for "MKD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MMK">
            <summary>
            Enum MMK for "MMK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MNT">
            <summary>
            Enum MNT for "MNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MOP">
            <summary>
            Enum MOP for "MOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MRO">
            <summary>
            Enum MRO for "MRO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MUR">
            <summary>
            Enum MUR for "MUR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MVR">
            <summary>
            Enum MVR for "MVR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MWK">
            <summary>
            Enum MWK for "MWK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MXN">
            <summary>
            Enum MXN for "MXN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MXV">
            <summary>
            Enum MXV for "MXV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MYR">
            <summary>
            Enum MYR for "MYR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MZN">
            <summary>
            Enum MZN for "MZN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NAD">
            <summary>
            Enum NAD for "NAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NGN">
            <summary>
            Enum NGN for "NGN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NIO">
            <summary>
            Enum NIO for "NIO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NOK">
            <summary>
            Enum NOK for "NOK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NPR">
            <summary>
            Enum NPR for "NPR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NZD">
            <summary>
            Enum NZD for "NZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.OMR">
            <summary>
            Enum OMR for "OMR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PAB">
            <summary>
            Enum PAB for "PAB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PEN">
            <summary>
            Enum PEN for "PEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PGK">
            <summary>
            Enum PGK for "PGK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PHP">
            <summary>
            Enum PHP for "PHP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PKR">
            <summary>
            Enum PKR for "PKR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PLN">
            <summary>
            Enum PLN for "PLN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PYG">
            <summary>
            Enum PYG for "PYG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.QAR">
            <summary>
            Enum QAR for "QAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.RON">
            <summary>
            Enum RON for "RON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.RSD">
            <summary>
            Enum RSD for "RSD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.RUB">
            <summary>
            Enum RUB for "RUB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.RWF">
            <summary>
            Enum RWF for "RWF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SAR">
            <summary>
            Enum SAR for "SAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SBD">
            <summary>
            Enum SBD for "SBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SCR">
            <summary>
            Enum SCR for "SCR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SDG">
            <summary>
            Enum SDG for "SDG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SEK">
            <summary>
            Enum SEK for "SEK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SGD">
            <summary>
            Enum SGD for "SGD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SHP">
            <summary>
            Enum SHP for "SHP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SLL">
            <summary>
            Enum SLL for "SLL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SOS">
            <summary>
            Enum SOS for "SOS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SRD">
            <summary>
            Enum SRD for "SRD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SSP">
            <summary>
            Enum SSP for "SSP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.STD">
            <summary>
            Enum STD for "STD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SVC">
            <summary>
            Enum SVC for "SVC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SYP">
            <summary>
            Enum SYP for "SYP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SZL">
            <summary>
            Enum SZL for "SZL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.THB">
            <summary>
            Enum THB for "THB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TJS">
            <summary>
            Enum TJS for "TJS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TMT">
            <summary>
            Enum TMT for "TMT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TND">
            <summary>
            Enum TND for "TND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TOP">
            <summary>
            Enum TOP for "TOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TRY">
            <summary>
            Enum TRY for "TRY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TTD">
            <summary>
            Enum TTD for "TTD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TWD">
            <summary>
            Enum TWD for "TWD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TZS">
            <summary>
            Enum TZS for "TZS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UAH">
            <summary>
            Enum UAH for "UAH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UGX">
            <summary>
            Enum UGX for "UGX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.USD">
            <summary>
            Enum USD for "USD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.USN">
            <summary>
            Enum USN for "USN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.USS">
            <summary>
            Enum USS for "USS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UYI">
            <summary>
            Enum UYI for "UYI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UYU">
            <summary>
            Enum UYU for "UYU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UZS">
            <summary>
            Enum UZS for "UZS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.VEF">
            <summary>
            Enum VEF for "VEF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.VND">
            <summary>
            Enum VND for "VND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.VUV">
            <summary>
            Enum VUV for "VUV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.WST">
            <summary>
            Enum WST for "WST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XAF">
            <summary>
            Enum XAF for "XAF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XAG">
            <summary>
            Enum XAG for "XAG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XAU">
            <summary>
            Enum XAU for "XAU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XBA">
            <summary>
            Enum XBA for "XBA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XBB">
            <summary>
            Enum XBB for "XBB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XBC">
            <summary>
            Enum XBC for "XBC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XBD">
            <summary>
            Enum XBD for "XBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XCD">
            <summary>
            Enum XCD for "XCD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XDR">
            <summary>
            Enum XDR for "XDR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XOF">
            <summary>
            Enum XOF for "XOF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XPD">
            <summary>
            Enum XPD for "XPD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XPF">
            <summary>
            Enum XPF for "XPF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XPT">
            <summary>
            Enum XPT for "XPT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XTS">
            <summary>
            Enum XTS for "XTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XXX">
            <summary>
            Enum XXX for "XXX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.YER">
            <summary>
            Enum YER for "YER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ZAR">
            <summary>
            Enum ZAR for "ZAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ZMK">
            <summary>
            Enum ZMK for "ZMK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ZMW">
            <summary>
            Enum ZMW for "ZMW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BTC">
            <summary>
            Enum BTC for "BTC"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Location.TypeEnum">
            <summary>
            The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space. See [LocationType](#type-locationtype) for possible values
            </summary>
            <value>The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space. See [LocationType](#type-locationtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Location.TypeEnum.PHYSICAL">
            <summary>
            Enum PHYSICAL for "PHYSICAL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Location.TypeEnum.MOBILE">
            <summary>
            Enum MOBILE for "MOBILE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Location.Capabilities">
            <summary>
            Indicates which Square features are enabled for the location. See [LocationCapability](#type-locationcapability) for possible values
            </summary>
            <value>Indicates which Square features are enabled for the location. See [LocationCapability](#type-locationcapability) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.Location.Status">
            <summary>
            The location's status See [LocationStatus](#type-locationstatus) for possible values
            </summary>
            <value>The location's status See [LocationStatus](#type-locationstatus) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.Location.Country">
            <summary>
            The location's country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values
            </summary>
            <value>The location's country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.Location.Currency">
            <summary>
            The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'. See [Currency](#type-currency) for possible values
            </summary>
            <value>The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'. See [Currency](#type-currency) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.Location.Type">
            <summary>
            The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space. See [LocationType](#type-locationtype) for possible values
            </summary>
            <value>The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space. See [LocationType](#type-locationtype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Location.#ctor(System.String,System.String,Square.Connect.Model.Address,System.String,System.Collections.Generic.List{Square.Connect.Model.Location.CapabilitiesEnum},System.Nullable{Square.Connect.Model.Location.StatusEnum},System.String,System.String,System.Nullable{Square.Connect.Model.Location.CountryEnum},System.String,System.Nullable{Square.Connect.Model.Location.CurrencyEnum},System.String,System.String,System.Nullable{Square.Connect.Model.Location.TypeEnum},System.String,Square.Connect.Model.BusinessHours,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Coordinates)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Location" /> class.
            </summary>
            <param name="Id">The location&#39;s unique ID..</param>
            <param name="Name">The location&#39;s name. Location names are set by the account owner and displayed in the dashboard as the location&#39;s nickname.</param>
            <param name="Address">The location&#39;s physical address..</param>
            <param name="Timezone">The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location&#39;s timezone..</param>
            <param name="Capabilities">Indicates which Square features are enabled for the location. See [LocationCapability](#type-locationcapability) for possible values.</param>
            <param name="Status">The location&#39;s status See [LocationStatus](#type-locationstatus) for possible values.</param>
            <param name="CreatedAt">The time when the location was created, in RFC 3339 format..</param>
            <param name="MerchantId">The identifier of the merchant that owns the location..</param>
            <param name="Country">The location&#39;s country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values.</param>
            <param name="LanguageCode">The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A)..</param>
            <param name="Currency">The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is &#39;USD&#39;. See [Currency](#type-currency) for possible values.</param>
            <param name="PhoneNumber">The location&#39;s phone_number..</param>
            <param name="BusinessName">The location&#39;s business_name which is shown to its customers. For example, this is the name printed on its customer&#39;s receipts..</param>
            <param name="Type">The location&#39;s type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space. See [LocationType](#type-locationtype) for possible values.</param>
            <param name="WebsiteUrl">The location&#39;s website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set..</param>
            <param name="BusinessHours">  The hours of operation for a business location.  Default: none; only exists if explicitly set..</param>
            <param name="BusinessEmail">The email of the location..</param>
            <param name="Description">The business description of the location..</param>
            <param name="TwitterUsername">The Twitter username of the location without the &#39;.</param>
            <param name="InstagramUsername">The Instagram username of the location without the &#39;.</param>
            <param name="FacebookUrl">The Facebook profile URL of the location. The URL should begin with &#39;facebook.com/&#39;..</param>
            <param name="Coordinates">The physical coordinates (latitude and longitude) of the location..</param>
        </member>
        <member name="P:Square.Connect.Model.Location.Id">
            <summary>
            The location&#39;s unique ID.
            </summary>
            <value>The location&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.Name">
            <summary>
            The location&#39;s name. Location names are set by the account owner and displayed in the dashboard as the location&#39;s nickname
            </summary>
            <value>The location&#39;s name. Location names are set by the account owner and displayed in the dashboard as the location&#39;s nickname</value>
        </member>
        <member name="P:Square.Connect.Model.Location.Address">
            <summary>
            The location&#39;s physical address.
            </summary>
            <value>The location&#39;s physical address.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.Timezone">
            <summary>
            The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location&#39;s timezone.
            </summary>
            <value>The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location&#39;s timezone.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.CreatedAt">
            <summary>
            The time when the location was created, in RFC 3339 format.
            </summary>
            <value>The time when the location was created, in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.MerchantId">
            <summary>
            The identifier of the merchant that owns the location.
            </summary>
            <value>The identifier of the merchant that owns the location.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.LanguageCode">
            <summary>
            The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
            </summary>
            <value>The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).</value>
        </member>
        <member name="P:Square.Connect.Model.Location.PhoneNumber">
            <summary>
            The location&#39;s phone_number.
            </summary>
            <value>The location&#39;s phone_number.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.BusinessName">
            <summary>
            The location&#39;s business_name which is shown to its customers. For example, this is the name printed on its customer&#39;s receipts.
            </summary>
            <value>The location&#39;s business_name which is shown to its customers. For example, this is the name printed on its customer&#39;s receipts.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.WebsiteUrl">
            <summary>
            The location&#39;s website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set.
            </summary>
            <value>The location&#39;s website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.BusinessHours">
            <summary>
              The hours of operation for a business location.  Default: none; only exists if explicitly set.
            </summary>
            <value>  The hours of operation for a business location.  Default: none; only exists if explicitly set.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.BusinessEmail">
            <summary>
            The email of the location.
            </summary>
            <value>The email of the location.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.Description">
            <summary>
            The business description of the location.
            </summary>
            <value>The business description of the location.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.TwitterUsername">
            <summary>
            The Twitter username of the location without the &#39;
            </summary>
            <value>The Twitter username of the location without the &#39;</value>
        </member>
        <member name="P:Square.Connect.Model.Location.InstagramUsername">
            <summary>
            The Instagram username of the location without the &#39;
            </summary>
            <value>The Instagram username of the location without the &#39;</value>
        </member>
        <member name="P:Square.Connect.Model.Location.FacebookUrl">
            <summary>
            The Facebook profile URL of the location. The URL should begin with &#39;facebook.com/&#39;.
            </summary>
            <value>The Facebook profile URL of the location. The URL should begin with &#39;facebook.com/&#39;.</value>
        </member>
        <member name="P:Square.Connect.Model.Location.Coordinates">
            <summary>
            The physical coordinates (latitude and longitude) of the location.
            </summary>
            <value>The physical coordinates (latitude and longitude) of the location.</value>
        </member>
        <member name="M:Square.Connect.Model.Location.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Location.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Location.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Location.Equals(Square.Connect.Model.Location)">
            <summary>
            Returns true if Location instances are equal
            </summary>
            <param name="other">Instance of Location to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Location.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.LocationCapability">
            <summary>
            Indicates payment capabilities that a business's location might or might not have enabled.
            </summary>
            <value>Indicates payment capabilities that a business's location might or might not have enabled.</value>
        </member>
        <member name="F:Square.Connect.Model.LocationCapability.PROCESSING">
            <summary>
            Enum PROCESSING for "CREDIT_CARD_PROCESSING"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.LocationStatus">
            <summary>
            Indicates the location's status.
            </summary>
            <value>Indicates the location's status.</value>
        </member>
        <member name="F:Square.Connect.Model.LocationStatus.ACTIVE">
            <summary>
            Enum ACTIVE for "ACTIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.LocationStatus.INACTIVE">
            <summary>
            Enum INACTIVE for "INACTIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.LocationType">
            <summary>
            Indicates the location's type.
            </summary>
            <value>Indicates the location's type.</value>
        </member>
        <member name="F:Square.Connect.Model.LocationType.PHYSICAL">
            <summary>
            Enum PHYSICAL for "PHYSICAL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.LocationType.MOBILE">
            <summary>
            Enum MOBILE for "MOBILE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnit">
            <summary>
            Represents a unit of measurement to use with a quantity, such as ounces or inches. Exactly one of the following fields are required: &#x60;custom_unit&#x60;, &#x60;area_unit&#x60;, &#x60;length_unit&#x60;, &#x60;volume_unit&#x60;, and &#x60;weight_unit&#x60;.  The &#x60;family&#x60; field describes the type of measurement. For example, ounces are in the weight family.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnit.AreaUnitEnum">
            <summary>
            Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values
            </summary>
            <value>Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.AreaUnitEnum.IMPERIALACRE">
            <summary>
            Enum IMPERIALACRE for "IMPERIAL_ACRE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.AreaUnitEnum.IMPERIALSQUAREINCH">
            <summary>
            Enum IMPERIALSQUAREINCH for "IMPERIAL_SQUARE_INCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.AreaUnitEnum.IMPERIALSQUAREFOOT">
            <summary>
            Enum IMPERIALSQUAREFOOT for "IMPERIAL_SQUARE_FOOT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.AreaUnitEnum.IMPERIALSQUAREYARD">
            <summary>
            Enum IMPERIALSQUAREYARD for "IMPERIAL_SQUARE_YARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.AreaUnitEnum.IMPERIALSQUAREMILE">
            <summary>
            Enum IMPERIALSQUAREMILE for "IMPERIAL_SQUARE_MILE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.AreaUnitEnum.METRICSQUARECENTIMETER">
            <summary>
            Enum METRICSQUARECENTIMETER for "METRIC_SQUARE_CENTIMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.AreaUnitEnum.METRICSQUAREMETER">
            <summary>
            Enum METRICSQUAREMETER for "METRIC_SQUARE_METER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.AreaUnitEnum.METRICSQUAREKILOMETER">
            <summary>
            Enum METRICSQUAREKILOMETER for "METRIC_SQUARE_KILOMETER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnit.LengthUnitEnum">
            <summary>
            Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values
            </summary>
            <value>Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.LengthUnitEnum.IMPERIALINCH">
            <summary>
            Enum IMPERIALINCH for "IMPERIAL_INCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.LengthUnitEnum.IMPERIALFOOT">
            <summary>
            Enum IMPERIALFOOT for "IMPERIAL_FOOT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.LengthUnitEnum.IMPERIALYARD">
            <summary>
            Enum IMPERIALYARD for "IMPERIAL_YARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.LengthUnitEnum.IMPERIALMILE">
            <summary>
            Enum IMPERIALMILE for "IMPERIAL_MILE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.LengthUnitEnum.METRICMILLIMETER">
            <summary>
            Enum METRICMILLIMETER for "METRIC_MILLIMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.LengthUnitEnum.METRICCENTIMETER">
            <summary>
            Enum METRICCENTIMETER for "METRIC_CENTIMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.LengthUnitEnum.METRICMETER">
            <summary>
            Enum METRICMETER for "METRIC_METER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.LengthUnitEnum.METRICKILOMETER">
            <summary>
            Enum METRICKILOMETER for "METRIC_KILOMETER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum">
            <summary>
            Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values
            </summary>
            <value>Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.GENERICFLUIDOUNCE">
            <summary>
            Enum GENERICFLUIDOUNCE for "GENERIC_FLUID_OUNCE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.GENERICSHOT">
            <summary>
            Enum GENERICSHOT for "GENERIC_SHOT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.GENERICCUP">
            <summary>
            Enum GENERICCUP for "GENERIC_CUP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.GENERICPINT">
            <summary>
            Enum GENERICPINT for "GENERIC_PINT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.GENERICQUART">
            <summary>
            Enum GENERICQUART for "GENERIC_QUART"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.GENERICGALLON">
            <summary>
            Enum GENERICGALLON for "GENERIC_GALLON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.IMPERIALCUBICINCH">
            <summary>
            Enum IMPERIALCUBICINCH for "IMPERIAL_CUBIC_INCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.IMPERIALCUBICFOOT">
            <summary>
            Enum IMPERIALCUBICFOOT for "IMPERIAL_CUBIC_FOOT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.IMPERIALCUBICYARD">
            <summary>
            Enum IMPERIALCUBICYARD for "IMPERIAL_CUBIC_YARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.METRICMILLILITER">
            <summary>
            Enum METRICMILLILITER for "METRIC_MILLILITER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.VolumeUnitEnum.METRICLITER">
            <summary>
            Enum METRICLITER for "METRIC_LITER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnit.WeightUnitEnum">
            <summary>
            Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values
            </summary>
            <value>Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.WeightUnitEnum.IMPERIALWEIGHTOUNCE">
            <summary>
            Enum IMPERIALWEIGHTOUNCE for "IMPERIAL_WEIGHT_OUNCE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.WeightUnitEnum.IMPERIALPOUND">
            <summary>
            Enum IMPERIALPOUND for "IMPERIAL_POUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.WeightUnitEnum.IMPERIALSTONE">
            <summary>
            Enum IMPERIALSTONE for "IMPERIAL_STONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.WeightUnitEnum.METRICMILLIGRAM">
            <summary>
            Enum METRICMILLIGRAM for "METRIC_MILLIGRAM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.WeightUnitEnum.METRICGRAM">
            <summary>
            Enum METRICGRAM for "METRIC_GRAM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.WeightUnitEnum.METRICKILOGRAM">
            <summary>
            Enum METRICKILOGRAM for "METRIC_KILOGRAM"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnit.GenericUnitEnum">
            <summary>
            Reserved for API integrations that lack the ability to specify a real measurement unit See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values
            </summary>
            <value>Reserved for API integrations that lack the ability to specify a real measurement unit See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.GenericUnitEnum.INVALIDGENERICUNIT">
            <summary>
            Enum INVALIDGENERICUNIT for "INVALID_GENERIC_UNIT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnit.GenericUnitEnum.UNIT">
            <summary>
            Enum UNIT for "UNIT"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.MeasurementUnit.AreaUnit">
            <summary>
            Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values
            </summary>
            <value>Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.MeasurementUnit.LengthUnit">
            <summary>
            Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values
            </summary>
            <value>Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.MeasurementUnit.VolumeUnit">
            <summary>
            Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values
            </summary>
            <value>Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.MeasurementUnit.WeightUnit">
            <summary>
            Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values
            </summary>
            <value>Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.MeasurementUnit.GenericUnit">
            <summary>
            Reserved for API integrations that lack the ability to specify a real measurement unit See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values
            </summary>
            <value>Reserved for API integrations that lack the ability to specify a real measurement unit See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnit.#ctor(Square.Connect.Model.MeasurementUnitCustom,System.Nullable{Square.Connect.Model.MeasurementUnit.AreaUnitEnum},System.Nullable{Square.Connect.Model.MeasurementUnit.LengthUnitEnum},System.Nullable{Square.Connect.Model.MeasurementUnit.VolumeUnitEnum},System.Nullable{Square.Connect.Model.MeasurementUnit.WeightUnitEnum},System.Nullable{Square.Connect.Model.MeasurementUnit.GenericUnitEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.MeasurementUnit" /> class.
            </summary>
            <param name="CustomUnit">A custom unit of measurement defined by the seller using the Point of Sale app or ad-hoc as an order line item..</param>
            <param name="AreaUnit">Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values.</param>
            <param name="LengthUnit">Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values.</param>
            <param name="VolumeUnit">Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values.</param>
            <param name="WeightUnit">Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values.</param>
            <param name="GenericUnit">Reserved for API integrations that lack the ability to specify a real measurement unit See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.MeasurementUnit.CustomUnit">
            <summary>
            A custom unit of measurement defined by the seller using the Point of Sale app or ad-hoc as an order line item.
            </summary>
            <value>A custom unit of measurement defined by the seller using the Point of Sale app or ad-hoc as an order line item.</value>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnit.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnit.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnit.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnit.Equals(Square.Connect.Model.MeasurementUnit)">
            <summary>
            Returns true if MeasurementUnit instances are equal
            </summary>
            <param name="other">Instance of MeasurementUnit to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnit.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnitArea">
            <summary>
            Unit of area used to measure a quantity.
            </summary>
            <value>Unit of area used to measure a quantity.</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitArea.IMPERIALACRE">
            <summary>
            Enum IMPERIALACRE for "IMPERIAL_ACRE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitArea.IMPERIALSQUAREINCH">
            <summary>
            Enum IMPERIALSQUAREINCH for "IMPERIAL_SQUARE_INCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitArea.IMPERIALSQUAREFOOT">
            <summary>
            Enum IMPERIALSQUAREFOOT for "IMPERIAL_SQUARE_FOOT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitArea.IMPERIALSQUAREYARD">
            <summary>
            Enum IMPERIALSQUAREYARD for "IMPERIAL_SQUARE_YARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitArea.IMPERIALSQUAREMILE">
            <summary>
            Enum IMPERIALSQUAREMILE for "IMPERIAL_SQUARE_MILE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitArea.METRICSQUARECENTIMETER">
            <summary>
            Enum METRICSQUARECENTIMETER for "METRIC_SQUARE_CENTIMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitArea.METRICSQUAREMETER">
            <summary>
            Enum METRICSQUAREMETER for "METRIC_SQUARE_METER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitArea.METRICSQUAREKILOMETER">
            <summary>
            Enum METRICSQUAREKILOMETER for "METRIC_SQUARE_KILOMETER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnitCustom">
            <summary>
            The information needed to define a custom unit, provided by the seller.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnitCustom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.MeasurementUnitCustom" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnitCustom.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.MeasurementUnitCustom" /> class.
            </summary>
            <param name="Name">The name of the custom unit, for example \&quot;bushel\&quot;. (required).</param>
            <param name="Abbreviation">The abbreviation of the custom unit, such as \&quot;bsh\&quot; (bushel). This appears in the cart for the Point of Sale app, and in reports. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.MeasurementUnitCustom.Name">
            <summary>
            The name of the custom unit, for example \&quot;bushel\&quot;.
            </summary>
            <value>The name of the custom unit, for example \&quot;bushel\&quot;.</value>
        </member>
        <member name="P:Square.Connect.Model.MeasurementUnitCustom.Abbreviation">
            <summary>
            The abbreviation of the custom unit, such as \&quot;bsh\&quot; (bushel). This appears in the cart for the Point of Sale app, and in reports.
            </summary>
            <value>The abbreviation of the custom unit, such as \&quot;bsh\&quot; (bushel). This appears in the cart for the Point of Sale app, and in reports.</value>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnitCustom.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnitCustom.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnitCustom.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnitCustom.Equals(Square.Connect.Model.MeasurementUnitCustom)">
            <summary>
            Returns true if MeasurementUnitCustom instances are equal
            </summary>
            <param name="other">Instance of MeasurementUnitCustom to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.MeasurementUnitCustom.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnitGeneric">
            <summary>
            A custom unit of measurement defined by the user.
            </summary>
            <value>A custom unit of measurement defined by the user.</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitGeneric.INVALIDGENERICUNIT">
            <summary>
            Enum INVALIDGENERICUNIT for "INVALID_GENERIC_UNIT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitGeneric.UNIT">
            <summary>
            Enum UNIT for "UNIT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnitLength">
            <summary>
            The unit of length used to measure a quantity.
            </summary>
            <value>The unit of length used to measure a quantity.</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitLength.IMPERIALINCH">
            <summary>
            Enum IMPERIALINCH for "IMPERIAL_INCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitLength.IMPERIALFOOT">
            <summary>
            Enum IMPERIALFOOT for "IMPERIAL_FOOT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitLength.IMPERIALYARD">
            <summary>
            Enum IMPERIALYARD for "IMPERIAL_YARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitLength.IMPERIALMILE">
            <summary>
            Enum IMPERIALMILE for "IMPERIAL_MILE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitLength.METRICMILLIMETER">
            <summary>
            Enum METRICMILLIMETER for "METRIC_MILLIMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitLength.METRICCENTIMETER">
            <summary>
            Enum METRICCENTIMETER for "METRIC_CENTIMETER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitLength.METRICMETER">
            <summary>
            Enum METRICMETER for "METRIC_METER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitLength.METRICKILOMETER">
            <summary>
            Enum METRICKILOMETER for "METRIC_KILOMETER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnitVolume">
            <summary>
            The unit of volume used to measure a quantity.
            </summary>
            <value>The unit of volume used to measure a quantity.</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.GENERICFLUIDOUNCE">
            <summary>
            Enum GENERICFLUIDOUNCE for "GENERIC_FLUID_OUNCE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.GENERICSHOT">
            <summary>
            Enum GENERICSHOT for "GENERIC_SHOT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.GENERICCUP">
            <summary>
            Enum GENERICCUP for "GENERIC_CUP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.GENERICPINT">
            <summary>
            Enum GENERICPINT for "GENERIC_PINT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.GENERICQUART">
            <summary>
            Enum GENERICQUART for "GENERIC_QUART"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.GENERICGALLON">
            <summary>
            Enum GENERICGALLON for "GENERIC_GALLON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.IMPERIALCUBICINCH">
            <summary>
            Enum IMPERIALCUBICINCH for "IMPERIAL_CUBIC_INCH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.IMPERIALCUBICFOOT">
            <summary>
            Enum IMPERIALCUBICFOOT for "IMPERIAL_CUBIC_FOOT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.IMPERIALCUBICYARD">
            <summary>
            Enum IMPERIALCUBICYARD for "IMPERIAL_CUBIC_YARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.METRICMILLILITER">
            <summary>
            Enum METRICMILLILITER for "METRIC_MILLILITER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitVolume.METRICLITER">
            <summary>
            Enum METRICLITER for "METRIC_LITER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.MeasurementUnitWeight">
            <summary>
            Unit of weight used to measure a quantity.
            </summary>
            <value>Unit of weight used to measure a quantity.</value>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitWeight.IMPERIALWEIGHTOUNCE">
            <summary>
            Enum IMPERIALWEIGHTOUNCE for "IMPERIAL_WEIGHT_OUNCE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitWeight.IMPERIALPOUND">
            <summary>
            Enum IMPERIALPOUND for "IMPERIAL_POUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitWeight.IMPERIALSTONE">
            <summary>
            Enum IMPERIALSTONE for "IMPERIAL_STONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitWeight.METRICMILLIGRAM">
            <summary>
            Enum METRICMILLIGRAM for "METRIC_MILLIGRAM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitWeight.METRICGRAM">
            <summary>
            Enum METRICGRAM for "METRIC_GRAM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.MeasurementUnitWeight.METRICKILOGRAM">
            <summary>
            Enum METRICKILOGRAM for "METRIC_KILOGRAM"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ModelBreak">
            <summary>
            A record of an employee&#39;s break during a shift.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ModelBreak.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ModelBreak" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ModelBreak.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ModelBreak" /> class.
            </summary>
            <param name="Id">UUID for this object.</param>
            <param name="StartAt">RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated. (required).</param>
            <param name="EndAt">RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the break length is calculated. For example, a break from &#x60;00:00&#x60; to &#x60;00:11&#x60;  is considered a 10 minute break (midnight to 10 minutes after midnight)..</param>
            <param name="BreakTypeId">The &#x60;BreakType&#x60; this &#x60;Break&#x60; was templated on. (required).</param>
            <param name="Name">A human-readable name. (required).</param>
            <param name="ExpectedDuration">Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break. (required).</param>
            <param name="IsPaid">Whether this break counts towards time worked for compensation purposes. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.ModelBreak.Id">
            <summary>
            UUID for this object
            </summary>
            <value>UUID for this object</value>
        </member>
        <member name="P:Square.Connect.Model.ModelBreak.StartAt">
            <summary>
            RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated.
            </summary>
            <value>RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated.</value>
        </member>
        <member name="P:Square.Connect.Model.ModelBreak.EndAt">
            <summary>
            RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the break length is calculated. For example, a break from &#x60;00:00&#x60; to &#x60;00:11&#x60;  is considered a 10 minute break (midnight to 10 minutes after midnight).
            </summary>
            <value>RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the break length is calculated. For example, a break from &#x60;00:00&#x60; to &#x60;00:11&#x60;  is considered a 10 minute break (midnight to 10 minutes after midnight).</value>
        </member>
        <member name="P:Square.Connect.Model.ModelBreak.BreakTypeId">
            <summary>
            The &#x60;BreakType&#x60; this &#x60;Break&#x60; was templated on.
            </summary>
            <value>The &#x60;BreakType&#x60; this &#x60;Break&#x60; was templated on.</value>
        </member>
        <member name="P:Square.Connect.Model.ModelBreak.Name">
            <summary>
            A human-readable name.
            </summary>
            <value>A human-readable name.</value>
        </member>
        <member name="P:Square.Connect.Model.ModelBreak.ExpectedDuration">
            <summary>
            Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.
            </summary>
            <value>Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.</value>
        </member>
        <member name="P:Square.Connect.Model.ModelBreak.IsPaid">
            <summary>
            Whether this break counts towards time worked for compensation purposes.
            </summary>
            <value>Whether this break counts towards time worked for compensation purposes.</value>
        </member>
        <member name="M:Square.Connect.Model.ModelBreak.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ModelBreak.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ModelBreak.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ModelBreak.Equals(Square.Connect.Model.ModelBreak)">
            <summary>
            Returns true if ModelBreak instances are equal
            </summary>
            <param name="other">Instance of ModelBreak to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ModelBreak.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Money">
            <summary>
            Represents an amount of money.  __Important:__ Unlike version 1 of the Connect API, __all monetary amounts returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative if they represent money being paid _by_ a merchant, instead of money being paid _to_ a merchant.)
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Money.CurrencyEnum">
            <summary>
            The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`. See [Currency](#type-currency) for possible values
            </summary>
            <value>The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`. See [Currency](#type-currency) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UNKNOWNCURRENCY">
            <summary>
            Enum UNKNOWNCURRENCY for "UNKNOWN_CURRENCY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AED">
            <summary>
            Enum AED for "AED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AFN">
            <summary>
            Enum AFN for "AFN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ALL">
            <summary>
            Enum ALL for "ALL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AMD">
            <summary>
            Enum AMD for "AMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ANG">
            <summary>
            Enum ANG for "ANG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AOA">
            <summary>
            Enum AOA for "AOA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ARS">
            <summary>
            Enum ARS for "ARS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AUD">
            <summary>
            Enum AUD for "AUD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AWG">
            <summary>
            Enum AWG for "AWG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AZN">
            <summary>
            Enum AZN for "AZN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BAM">
            <summary>
            Enum BAM for "BAM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BBD">
            <summary>
            Enum BBD for "BBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BDT">
            <summary>
            Enum BDT for "BDT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BGN">
            <summary>
            Enum BGN for "BGN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BHD">
            <summary>
            Enum BHD for "BHD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BIF">
            <summary>
            Enum BIF for "BIF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BMD">
            <summary>
            Enum BMD for "BMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BND">
            <summary>
            Enum BND for "BND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BOB">
            <summary>
            Enum BOB for "BOB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BOV">
            <summary>
            Enum BOV for "BOV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BRL">
            <summary>
            Enum BRL for "BRL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BSD">
            <summary>
            Enum BSD for "BSD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BTN">
            <summary>
            Enum BTN for "BTN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BWP">
            <summary>
            Enum BWP for "BWP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BYR">
            <summary>
            Enum BYR for "BYR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BZD">
            <summary>
            Enum BZD for "BZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CAD">
            <summary>
            Enum CAD for "CAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CDF">
            <summary>
            Enum CDF for "CDF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CHE">
            <summary>
            Enum CHE for "CHE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CHF">
            <summary>
            Enum CHF for "CHF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CHW">
            <summary>
            Enum CHW for "CHW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CLF">
            <summary>
            Enum CLF for "CLF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CLP">
            <summary>
            Enum CLP for "CLP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CNY">
            <summary>
            Enum CNY for "CNY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.COP">
            <summary>
            Enum COP for "COP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.COU">
            <summary>
            Enum COU for "COU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CRC">
            <summary>
            Enum CRC for "CRC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CUC">
            <summary>
            Enum CUC for "CUC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CUP">
            <summary>
            Enum CUP for "CUP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CVE">
            <summary>
            Enum CVE for "CVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CZK">
            <summary>
            Enum CZK for "CZK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DJF">
            <summary>
            Enum DJF for "DJF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DKK">
            <summary>
            Enum DKK for "DKK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DOP">
            <summary>
            Enum DOP for "DOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DZD">
            <summary>
            Enum DZD for "DZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.EGP">
            <summary>
            Enum EGP for "EGP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ERN">
            <summary>
            Enum ERN for "ERN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ETB">
            <summary>
            Enum ETB for "ETB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.EUR">
            <summary>
            Enum EUR for "EUR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.FJD">
            <summary>
            Enum FJD for "FJD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.FKP">
            <summary>
            Enum FKP for "FKP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GBP">
            <summary>
            Enum GBP for "GBP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GEL">
            <summary>
            Enum GEL for "GEL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GHS">
            <summary>
            Enum GHS for "GHS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GIP">
            <summary>
            Enum GIP for "GIP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GMD">
            <summary>
            Enum GMD for "GMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GNF">
            <summary>
            Enum GNF for "GNF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GTQ">
            <summary>
            Enum GTQ for "GTQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GYD">
            <summary>
            Enum GYD for "GYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HKD">
            <summary>
            Enum HKD for "HKD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HNL">
            <summary>
            Enum HNL for "HNL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HRK">
            <summary>
            Enum HRK for "HRK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HTG">
            <summary>
            Enum HTG for "HTG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HUF">
            <summary>
            Enum HUF for "HUF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.IDR">
            <summary>
            Enum IDR for "IDR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ILS">
            <summary>
            Enum ILS for "ILS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.INR">
            <summary>
            Enum INR for "INR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.IQD">
            <summary>
            Enum IQD for "IQD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.IRR">
            <summary>
            Enum IRR for "IRR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ISK">
            <summary>
            Enum ISK for "ISK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.JMD">
            <summary>
            Enum JMD for "JMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.JOD">
            <summary>
            Enum JOD for "JOD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.JPY">
            <summary>
            Enum JPY for "JPY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KES">
            <summary>
            Enum KES for "KES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KGS">
            <summary>
            Enum KGS for "KGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KHR">
            <summary>
            Enum KHR for "KHR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KMF">
            <summary>
            Enum KMF for "KMF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KPW">
            <summary>
            Enum KPW for "KPW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KRW">
            <summary>
            Enum KRW for "KRW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KWD">
            <summary>
            Enum KWD for "KWD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KYD">
            <summary>
            Enum KYD for "KYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KZT">
            <summary>
            Enum KZT for "KZT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LAK">
            <summary>
            Enum LAK for "LAK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LBP">
            <summary>
            Enum LBP for "LBP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LKR">
            <summary>
            Enum LKR for "LKR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LRD">
            <summary>
            Enum LRD for "LRD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LSL">
            <summary>
            Enum LSL for "LSL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LTL">
            <summary>
            Enum LTL for "LTL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LVL">
            <summary>
            Enum LVL for "LVL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LYD">
            <summary>
            Enum LYD for "LYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MAD">
            <summary>
            Enum MAD for "MAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MDL">
            <summary>
            Enum MDL for "MDL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MGA">
            <summary>
            Enum MGA for "MGA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MKD">
            <summary>
            Enum MKD for "MKD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MMK">
            <summary>
            Enum MMK for "MMK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MNT">
            <summary>
            Enum MNT for "MNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MOP">
            <summary>
            Enum MOP for "MOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MRO">
            <summary>
            Enum MRO for "MRO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MUR">
            <summary>
            Enum MUR for "MUR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MVR">
            <summary>
            Enum MVR for "MVR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MWK">
            <summary>
            Enum MWK for "MWK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MXN">
            <summary>
            Enum MXN for "MXN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MXV">
            <summary>
            Enum MXV for "MXV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MYR">
            <summary>
            Enum MYR for "MYR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MZN">
            <summary>
            Enum MZN for "MZN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NAD">
            <summary>
            Enum NAD for "NAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NGN">
            <summary>
            Enum NGN for "NGN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NIO">
            <summary>
            Enum NIO for "NIO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NOK">
            <summary>
            Enum NOK for "NOK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NPR">
            <summary>
            Enum NPR for "NPR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NZD">
            <summary>
            Enum NZD for "NZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.OMR">
            <summary>
            Enum OMR for "OMR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PAB">
            <summary>
            Enum PAB for "PAB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PEN">
            <summary>
            Enum PEN for "PEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PGK">
            <summary>
            Enum PGK for "PGK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PHP">
            <summary>
            Enum PHP for "PHP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PKR">
            <summary>
            Enum PKR for "PKR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PLN">
            <summary>
            Enum PLN for "PLN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PYG">
            <summary>
            Enum PYG for "PYG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.QAR">
            <summary>
            Enum QAR for "QAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RON">
            <summary>
            Enum RON for "RON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RSD">
            <summary>
            Enum RSD for "RSD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RUB">
            <summary>
            Enum RUB for "RUB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RWF">
            <summary>
            Enum RWF for "RWF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SAR">
            <summary>
            Enum SAR for "SAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SBD">
            <summary>
            Enum SBD for "SBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SCR">
            <summary>
            Enum SCR for "SCR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SDG">
            <summary>
            Enum SDG for "SDG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SEK">
            <summary>
            Enum SEK for "SEK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SGD">
            <summary>
            Enum SGD for "SGD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SHP">
            <summary>
            Enum SHP for "SHP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SLL">
            <summary>
            Enum SLL for "SLL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SOS">
            <summary>
            Enum SOS for "SOS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SRD">
            <summary>
            Enum SRD for "SRD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SSP">
            <summary>
            Enum SSP for "SSP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.STD">
            <summary>
            Enum STD for "STD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SVC">
            <summary>
            Enum SVC for "SVC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SYP">
            <summary>
            Enum SYP for "SYP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SZL">
            <summary>
            Enum SZL for "SZL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.THB">
            <summary>
            Enum THB for "THB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TJS">
            <summary>
            Enum TJS for "TJS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TMT">
            <summary>
            Enum TMT for "TMT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TND">
            <summary>
            Enum TND for "TND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TOP">
            <summary>
            Enum TOP for "TOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TRY">
            <summary>
            Enum TRY for "TRY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TTD">
            <summary>
            Enum TTD for "TTD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TWD">
            <summary>
            Enum TWD for "TWD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TZS">
            <summary>
            Enum TZS for "TZS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UAH">
            <summary>
            Enum UAH for "UAH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UGX">
            <summary>
            Enum UGX for "UGX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.USD">
            <summary>
            Enum USD for "USD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.USN">
            <summary>
            Enum USN for "USN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.USS">
            <summary>
            Enum USS for "USS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UYI">
            <summary>
            Enum UYI for "UYI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UYU">
            <summary>
            Enum UYU for "UYU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UZS">
            <summary>
            Enum UZS for "UZS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.VEF">
            <summary>
            Enum VEF for "VEF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.VND">
            <summary>
            Enum VND for "VND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.VUV">
            <summary>
            Enum VUV for "VUV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.WST">
            <summary>
            Enum WST for "WST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XAF">
            <summary>
            Enum XAF for "XAF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XAG">
            <summary>
            Enum XAG for "XAG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XAU">
            <summary>
            Enum XAU for "XAU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBA">
            <summary>
            Enum XBA for "XBA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBB">
            <summary>
            Enum XBB for "XBB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBC">
            <summary>
            Enum XBC for "XBC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBD">
            <summary>
            Enum XBD for "XBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XCD">
            <summary>
            Enum XCD for "XCD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XDR">
            <summary>
            Enum XDR for "XDR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XOF">
            <summary>
            Enum XOF for "XOF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XPD">
            <summary>
            Enum XPD for "XPD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XPF">
            <summary>
            Enum XPF for "XPF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XPT">
            <summary>
            Enum XPT for "XPT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XTS">
            <summary>
            Enum XTS for "XTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XXX">
            <summary>
            Enum XXX for "XXX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.YER">
            <summary>
            Enum YER for "YER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ZAR">
            <summary>
            Enum ZAR for "ZAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ZMK">
            <summary>
            Enum ZMK for "ZMK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ZMW">
            <summary>
            Enum ZMW for "ZMW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BTC">
            <summary>
            Enum BTC for "BTC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Money.Currency">
            <summary>
            The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`. See [Currency](#type-currency) for possible values
            </summary>
            <value>The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`. See [Currency](#type-currency) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Money.#ctor(System.Nullable{System.Int64},System.Nullable{Square.Connect.Model.Money.CurrencyEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Money" /> class.
            </summary>
            <param name="Amount">The amount of money, in the smallest denomination of the currency indicated by &#x60;currency&#x60;. For example, when &#x60;currency&#x60; is &#x60;USD&#x60;, &#x60;amount&#x60; is in cents..</param>
            <param name="Currency">The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is &#x60;USD&#x60;. See [Currency](#type-currency) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.Money.Amount">
            <summary>
            The amount of money, in the smallest denomination of the currency indicated by &#x60;currency&#x60;. For example, when &#x60;currency&#x60; is &#x60;USD&#x60;, &#x60;amount&#x60; is in cents.
            </summary>
            <value>The amount of money, in the smallest denomination of the currency indicated by &#x60;currency&#x60;. For example, when &#x60;currency&#x60; is &#x60;USD&#x60;, &#x60;amount&#x60; is in cents.</value>
        </member>
        <member name="M:Square.Connect.Model.Money.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Money.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Money.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Money.Equals(Square.Connect.Model.Money)">
            <summary>
            Returns true if Money instances are equal
            </summary>
            <param name="other">Instance of Money to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Money.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ObtainTokenRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ObtainTokenRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenRequest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ObtainTokenRequest" /> class.
            </summary>
            <param name="ClientId">The Square-issued ID of your application, available from the [application dashboard](https://connect.squareup.com/apps). (required).</param>
            <param name="ClientSecret">The Square-issued application secret for your application, available from the [application dashboard](https://connect.squareup.com/apps). (required).</param>
            <param name="Code">The authorization code to exchange. This is required if &#x60;grant_type&#x60; is set to &#x60;authorization_code&#x60;, to indicate that the application wants to exchange an authorization code for an OAuth access token..</param>
            <param name="RedirectUri">The redirect URL assigned in the [application dashboard](https://connect.squareup.com/apps)..</param>
            <param name="GrantType">Specifies the method to request an OAuth access token. Valid values are: &#x60;authorization_code&#x60;, &#x60;refresh_token&#x60;, and &#x60;migration_token&#x60; (required).</param>
            <param name="RefreshToken">A valid refresh token for generating a new OAuth access token. A valid refresh token is required if &#x60;grant_type&#x60; is set to &#x60;refresh_token&#x60; , to indicate the application wants a replacement for an expired OAuth access token..</param>
            <param name="MigrationToken">Legacy OAuth access token obtained using a Connect API version prior to 2019-03-13. This parameter is required if &#x60;grant_type&#x60; is set to &#x60;migration_token&#x60; to indicate that the application wants to get a replacement OAuth access token. The response also returns a refresh token. For more information, see [Migrate to Using Refresh Tokens](/authz/oauth/migration)..</param>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenRequest.ClientId">
            <summary>
            The Square-issued ID of your application, available from the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <value>The Square-issued ID of your application, available from the [application dashboard](https://connect.squareup.com/apps).</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenRequest.ClientSecret">
            <summary>
            The Square-issued application secret for your application, available from the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <value>The Square-issued application secret for your application, available from the [application dashboard](https://connect.squareup.com/apps).</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenRequest.Code">
            <summary>
            The authorization code to exchange. This is required if &#x60;grant_type&#x60; is set to &#x60;authorization_code&#x60;, to indicate that the application wants to exchange an authorization code for an OAuth access token.
            </summary>
            <value>The authorization code to exchange. This is required if &#x60;grant_type&#x60; is set to &#x60;authorization_code&#x60;, to indicate that the application wants to exchange an authorization code for an OAuth access token.</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenRequest.RedirectUri">
            <summary>
            The redirect URL assigned in the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <value>The redirect URL assigned in the [application dashboard](https://connect.squareup.com/apps).</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenRequest.GrantType">
            <summary>
            Specifies the method to request an OAuth access token. Valid values are: &#x60;authorization_code&#x60;, &#x60;refresh_token&#x60;, and &#x60;migration_token&#x60;
            </summary>
            <value>Specifies the method to request an OAuth access token. Valid values are: &#x60;authorization_code&#x60;, &#x60;refresh_token&#x60;, and &#x60;migration_token&#x60;</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenRequest.RefreshToken">
            <summary>
            A valid refresh token for generating a new OAuth access token. A valid refresh token is required if &#x60;grant_type&#x60; is set to &#x60;refresh_token&#x60; , to indicate the application wants a replacement for an expired OAuth access token.
            </summary>
            <value>A valid refresh token for generating a new OAuth access token. A valid refresh token is required if &#x60;grant_type&#x60; is set to &#x60;refresh_token&#x60; , to indicate the application wants a replacement for an expired OAuth access token.</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenRequest.MigrationToken">
            <summary>
            Legacy OAuth access token obtained using a Connect API version prior to 2019-03-13. This parameter is required if &#x60;grant_type&#x60; is set to &#x60;migration_token&#x60; to indicate that the application wants to get a replacement OAuth access token. The response also returns a refresh token. For more information, see [Migrate to Using Refresh Tokens](/authz/oauth/migration).
            </summary>
            <value>Legacy OAuth access token obtained using a Connect API version prior to 2019-03-13. This parameter is required if &#x60;grant_type&#x60; is set to &#x60;migration_token&#x60; to indicate that the application wants to get a replacement OAuth access token. The response also returns a refresh token. For more information, see [Migrate to Using Refresh Tokens](/authz/oauth/migration).</value>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenRequest.Equals(Square.Connect.Model.ObtainTokenRequest)">
            <summary>
            Returns true if ObtainTokenRequest instances are equal
            </summary>
            <param name="other">Instance of ObtainTokenRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ObtainTokenResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenResponse.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ObtainTokenResponse" /> class.
            </summary>
            <param name="AccessToken">A valid OAuth access token. OAuth access tokens are 64 bytes long. Provide the access token in a header with every request to Connect API endpoints. See the [Build with OAuth](/authz/oauth/build-with-the-api) guide for more information..</param>
            <param name="TokenType">This value is always _bearer_..</param>
            <param name="ExpiresAt">The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format..</param>
            <param name="MerchantId">The ID of the authorizing merchant&#39;s business..</param>
            <param name="SubscriptionId">__LEGACY FIELD__. The ID of a subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization..</param>
            <param name="PlanId">__LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization..</param>
            <param name="IdToken">Then OpenID token belonging to this this person. Only present if the OPENID scope is included in the authorize request..</param>
            <param name="RefreshToken">A refresh token. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management)..</param>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenResponse.AccessToken">
            <summary>
            A valid OAuth access token. OAuth access tokens are 64 bytes long. Provide the access token in a header with every request to Connect API endpoints. See the [Build with OAuth](/authz/oauth/build-with-the-api) guide for more information.
            </summary>
            <value>A valid OAuth access token. OAuth access tokens are 64 bytes long. Provide the access token in a header with every request to Connect API endpoints. See the [Build with OAuth](/authz/oauth/build-with-the-api) guide for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenResponse.TokenType">
            <summary>
            This value is always _bearer_.
            </summary>
            <value>This value is always _bearer_.</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenResponse.ExpiresAt">
            <summary>
            The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
            </summary>
            <value>The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenResponse.MerchantId">
            <summary>
            The ID of the authorizing merchant&#39;s business.
            </summary>
            <value>The ID of the authorizing merchant&#39;s business.</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenResponse.SubscriptionId">
            <summary>
            __LEGACY FIELD__. The ID of a subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.
            </summary>
            <value>__LEGACY FIELD__. The ID of a subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenResponse.PlanId">
            <summary>
            __LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.
            </summary>
            <value>__LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenResponse.IdToken">
            <summary>
            Then OpenID token belonging to this this person. Only present if the OPENID scope is included in the authorize request.
            </summary>
            <value>Then OpenID token belonging to this this person. Only present if the OPENID scope is included in the authorize request.</value>
        </member>
        <member name="P:Square.Connect.Model.ObtainTokenResponse.RefreshToken">
            <summary>
            A refresh token. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).
            </summary>
            <value>A refresh token. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).</value>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenResponse.Equals(Square.Connect.Model.ObtainTokenResponse)">
            <summary>
            Returns true if ObtainTokenResponse instances are equal
            </summary>
            <param name="other">Instance of ObtainTokenResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ObtainTokenResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Order">
            <summary>
            Contains all information related to a single order to process with Square, including line items that specify the products to purchase. Order objects also include information on any associated tenders, refunds, and returns.  All Connect V2 Transactions have all been converted to Orders including all associated itemization data.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Order.StateEnum">
            <summary>
            The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values
            </summary>
            <value>The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Order.StateEnum.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Order.StateEnum.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Order.StateEnum.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Order.State">
            <summary>
            The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values
            </summary>
            <value>The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Order.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Order" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.Order.#ctor(System.String,System.String,System.String,Square.Connect.Model.OrderSource,System.String,System.Collections.Generic.List{Square.Connect.Model.OrderLineItem},System.Collections.Generic.List{Square.Connect.Model.OrderLineItemTax},System.Collections.Generic.List{Square.Connect.Model.OrderLineItemDiscount},System.Collections.Generic.List{Square.Connect.Model.OrderServiceCharge},System.Collections.Generic.List{Square.Connect.Model.OrderFulfillment},System.Collections.Generic.List{Square.Connect.Model.OrderReturn},Square.Connect.Model.OrderMoneyAmounts,Square.Connect.Model.OrderMoneyAmounts,Square.Connect.Model.OrderRoundingAdjustment,System.Collections.Generic.List{Square.Connect.Model.Tender},System.Collections.Generic.List{Square.Connect.Model.Refund},System.String,System.String,System.String,System.Nullable{Square.Connect.Model.Order.StateEnum},Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Order" /> class.
            </summary>
            <param name="Id">The order&#39;s unique ID.  This field is read-only..</param>
            <param name="LocationId">The ID of the merchant location this order is associated with. (required).</param>
            <param name="ReferenceId">A client specified identifier to associate an entity in another system with this order..</param>
            <param name="Source">The origination details of the order..</param>
            <param name="CustomerId">The [Customer](#type-customer) ID of the customer associated with the order..</param>
            <param name="LineItems">The line items included in the order..</param>
            <param name="Taxes">A list of taxes applied to this order. On read or retrieve, this list includes both order-level and item-level taxes. When creating an Order, set your order-level taxes in this list..</param>
            <param name="Discounts">A list of discounts applied to this order. On read or retrieve, this list includes both order-level and item-level discounts. When creating an Order, set your order-level discounts in this list..</param>
            <param name="ServiceCharges">A list of service charges applied to the order..</param>
            <param name="Fulfillments">Details on order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API may contain multiple fulfillments..</param>
            <param name="Returns">Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange.  There will be exactly one &#x60;Return&#x60; object per sale Order being referenced.  This field is read-only..</param>
            <param name="ReturnAmounts">Rollup of returned money amounts.  This field is read-only..</param>
            <param name="NetAmounts">Net money amounts (sale money - return money).  This field is read-only..</param>
            <param name="RoundingAdjustment">A positive or negative rounding adjustment to the total of the order, commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.  This field is read-only..</param>
            <param name="Tenders">The Tenders which were used to pay for the Order. This field is read-only..</param>
            <param name="Refunds">The Refunds that are part of this Order. This field is read-only..</param>
            <param name="CreatedAt">Timestamp for when the order was created. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only..</param>
            <param name="UpdatedAt">Timestamp for when the order was last updated. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only..</param>
            <param name="ClosedAt">Timestamp for when the order was closed. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only..</param>
            <param name="State">The current state of the order. &#x60;OPEN&#x60;,&#x60;COMPLETED&#x60;,&#x60;CANCELED&#x60; See [OrderState](#type-orderstate) for possible values.</param>
            <param name="TotalMoney">The total amount of money to collect for the order.  This field is read-only..</param>
            <param name="TotalTaxMoney">The total tax amount of money to collect for the order.  This field is read-only..</param>
            <param name="TotalDiscountMoney">The total discount amount of money to collect for the order.  This field is read-only..</param>
            <param name="TotalServiceChargeMoney">The total amount of money collected in service charges for the order.  Note: &#x60;total_service_charge_money&#x60; is the sum of &#x60;applied_money&#x60; fields for each individual service charge. Therefore, &#x60;total_service_charge_money&#x60; will only include inclusive tax amounts, not additive tax amounts.  This field is read-only..</param>
        </member>
        <member name="P:Square.Connect.Model.Order.Id">
            <summary>
            The order&#39;s unique ID.  This field is read-only.
            </summary>
            <value>The order&#39;s unique ID.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.LocationId">
            <summary>
            The ID of the merchant location this order is associated with.
            </summary>
            <value>The ID of the merchant location this order is associated with.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.ReferenceId">
            <summary>
            A client specified identifier to associate an entity in another system with this order.
            </summary>
            <value>A client specified identifier to associate an entity in another system with this order.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.Source">
            <summary>
            The origination details of the order.
            </summary>
            <value>The origination details of the order.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.CustomerId">
            <summary>
            The [Customer](#type-customer) ID of the customer associated with the order.
            </summary>
            <value>The [Customer](#type-customer) ID of the customer associated with the order.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.LineItems">
            <summary>
            The line items included in the order.
            </summary>
            <value>The line items included in the order.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.Taxes">
            <summary>
            A list of taxes applied to this order. On read or retrieve, this list includes both order-level and item-level taxes. When creating an Order, set your order-level taxes in this list.
            </summary>
            <value>A list of taxes applied to this order. On read or retrieve, this list includes both order-level and item-level taxes. When creating an Order, set your order-level taxes in this list.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.Discounts">
            <summary>
            A list of discounts applied to this order. On read or retrieve, this list includes both order-level and item-level discounts. When creating an Order, set your order-level discounts in this list.
            </summary>
            <value>A list of discounts applied to this order. On read or retrieve, this list includes both order-level and item-level discounts. When creating an Order, set your order-level discounts in this list.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.ServiceCharges">
            <summary>
            A list of service charges applied to the order.
            </summary>
            <value>A list of service charges applied to the order.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.Fulfillments">
            <summary>
            Details on order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API may contain multiple fulfillments.
            </summary>
            <value>Details on order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API may contain multiple fulfillments.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.Returns">
            <summary>
            Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange.  There will be exactly one &#x60;Return&#x60; object per sale Order being referenced.  This field is read-only.
            </summary>
            <value>Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange.  There will be exactly one &#x60;Return&#x60; object per sale Order being referenced.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.ReturnAmounts">
            <summary>
            Rollup of returned money amounts.  This field is read-only.
            </summary>
            <value>Rollup of returned money amounts.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.NetAmounts">
            <summary>
            Net money amounts (sale money - return money).  This field is read-only.
            </summary>
            <value>Net money amounts (sale money - return money).  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.RoundingAdjustment">
            <summary>
            A positive or negative rounding adjustment to the total of the order, commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.  This field is read-only.
            </summary>
            <value>A positive or negative rounding adjustment to the total of the order, commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.Tenders">
            <summary>
            The Tenders which were used to pay for the Order. This field is read-only.
            </summary>
            <value>The Tenders which were used to pay for the Order. This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.Refunds">
            <summary>
            The Refunds that are part of this Order. This field is read-only.
            </summary>
            <value>The Refunds that are part of this Order. This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.CreatedAt">
            <summary>
            Timestamp for when the order was created. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.
            </summary>
            <value>Timestamp for when the order was created. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.UpdatedAt">
            <summary>
            Timestamp for when the order was last updated. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.
            </summary>
            <value>Timestamp for when the order was last updated. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.ClosedAt">
            <summary>
            Timestamp for when the order was closed. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.
            </summary>
            <value>Timestamp for when the order was closed. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.TotalMoney">
            <summary>
            The total amount of money to collect for the order.  This field is read-only.
            </summary>
            <value>The total amount of money to collect for the order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.TotalTaxMoney">
            <summary>
            The total tax amount of money to collect for the order.  This field is read-only.
            </summary>
            <value>The total tax amount of money to collect for the order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.TotalDiscountMoney">
            <summary>
            The total discount amount of money to collect for the order.  This field is read-only.
            </summary>
            <value>The total discount amount of money to collect for the order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.Order.TotalServiceChargeMoney">
            <summary>
            The total amount of money collected in service charges for the order.  Note: &#x60;total_service_charge_money&#x60; is the sum of &#x60;applied_money&#x60; fields for each individual service charge. Therefore, &#x60;total_service_charge_money&#x60; will only include inclusive tax amounts, not additive tax amounts.  This field is read-only.
            </summary>
            <value>The total amount of money collected in service charges for the order.  Note: &#x60;total_service_charge_money&#x60; is the sum of &#x60;applied_money&#x60; fields for each individual service charge. Therefore, &#x60;total_service_charge_money&#x60; will only include inclusive tax amounts, not additive tax amounts.  This field is read-only.</value>
        </member>
        <member name="M:Square.Connect.Model.Order.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Order.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Order.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Order.Equals(Square.Connect.Model.Order)">
            <summary>
            Returns true if Order instances are equal
            </summary>
            <param name="other">Instance of Order to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Order.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderEntry">
            <summary>
            A lightweight description of an [Order](#type-order) that is returned when &#x60;returned_entries&#x60; is true on a [SearchOrderRequest](#type-searchorderrequest)
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderEntry" /> class.
            </summary>
            <param name="OrderId">The id of the Order.</param>
            <param name="LocationId">The location id the Order belongs to..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderEntry.OrderId">
            <summary>
            The id of the Order
            </summary>
            <value>The id of the Order</value>
        </member>
        <member name="P:Square.Connect.Model.OrderEntry.LocationId">
            <summary>
            The location id the Order belongs to.
            </summary>
            <value>The location id the Order belongs to.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderEntry.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderEntry.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderEntry.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderEntry.Equals(Square.Connect.Model.OrderEntry)">
            <summary>
            Returns true if OrderEntry instances are equal
            </summary>
            <param name="other">Instance of OrderEntry to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderEntry.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderFulfillment">
            <summary>
            Contains details on how to fulfill this order.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderFulfillment.TypeEnum">
            <summary>
            The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values
            </summary>
            <value>The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillment.TypeEnum.PICKUP">
            <summary>
            Enum PICKUP for "PICKUP"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderFulfillment.StateEnum">
            <summary>
            The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values
            </summary>
            <value>The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillment.StateEnum.PROPOSED">
            <summary>
            Enum PROPOSED for "PROPOSED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillment.StateEnum.RESERVED">
            <summary>
            Enum RESERVED for "RESERVED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillment.StateEnum.PREPARED">
            <summary>
            Enum PREPARED for "PREPARED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillment.StateEnum.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillment.StateEnum.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillment.StateEnum.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillment.Type">
            <summary>
            The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values
            </summary>
            <value>The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillment.State">
            <summary>
            The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values
            </summary>
            <value>The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillment.#ctor(System.Nullable{Square.Connect.Model.OrderFulfillment.TypeEnum},System.Nullable{Square.Connect.Model.OrderFulfillment.StateEnum},Square.Connect.Model.OrderFulfillmentPickupDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderFulfillment" /> class.
            </summary>
            <param name="Type">The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values.</param>
            <param name="State">The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values.</param>
            <param name="PickupDetails">Contains pickup-specific details. Required when fulfillment type is &#x60;PICKUP&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillment.PickupDetails">
            <summary>
            Contains pickup-specific details. Required when fulfillment type is &#x60;PICKUP&#x60;.
            </summary>
            <value>Contains pickup-specific details. Required when fulfillment type is &#x60;PICKUP&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillment.Equals(Square.Connect.Model.OrderFulfillment)">
            <summary>
            Returns true if OrderFulfillment instances are equal
            </summary>
            <param name="other">Instance of OrderFulfillment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderFulfillmentPickupDetails">
            <summary>
            Contains details necessary to fulfill a pickup order.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderFulfillmentPickupDetails.ScheduleTypeEnum">
            <summary>
            The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`. See [OrderFulfillmentPickupDetailsScheduleType](#type-orderfulfillmentpickupdetailsscheduletype) for possible values
            </summary>
            <value>The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`. See [OrderFulfillmentPickupDetailsScheduleType](#type-orderfulfillmentpickupdetailsscheduletype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentPickupDetails.ScheduleTypeEnum.SCHEDULED">
            <summary>
            Enum SCHEDULED for "SCHEDULED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentPickupDetails.ScheduleTypeEnum.ASAP">
            <summary>
            Enum ASAP for "ASAP"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.ScheduleType">
            <summary>
            The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`. See [OrderFulfillmentPickupDetailsScheduleType](#type-orderfulfillmentpickupdetailsscheduletype) for possible values
            </summary>
            <value>The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`. See [OrderFulfillmentPickupDetailsScheduleType](#type-orderfulfillmentpickupdetailsscheduletype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentPickupDetails.#ctor(Square.Connect.Model.OrderFulfillmentRecipient,System.String,System.String,System.Nullable{Square.Connect.Model.OrderFulfillmentPickupDetails.ScheduleTypeEnum},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderFulfillmentPickupDetails" /> class.
            </summary>
            <param name="Recipient">The recipient of this pickup fulfillment..</param>
            <param name="ExpiresAt">The expiry [timestamp](#workingwithdates) in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. This timestamp indicates when the pickup fulfillment will expire if it is not accepted by the merchant. Expiration time can only be set up to 7 days in the future. If not set, this pickup fulfillment will be automatically accepted when placed..</param>
            <param name="AutoCompleteDuration">The auto completion duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. If set, an open and accepted pickup fulfillment will automatically move to the &#x60;COMPLETED&#x60; state after this period of time. If not set, this pickup fulfillment will remain accepted until it is canceled or completed..</param>
            <param name="ScheduleType">The schedule type of the pickup fulfillment. Defaults to &#x60;SCHEDULED&#x60;. See [OrderFulfillmentPickupDetailsScheduleType](#type-orderfulfillmentpickupdetailsscheduletype) for possible values.</param>
            <param name="PickupAt">The pickup [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. For fulfillments with the schedule type &#x60;ASAP&#x60;, this is automatically set to the current time plus the expected duration to prepare the fulfillment. This represents the start of the pickup window..</param>
            <param name="PickupWindowDuration">The pickup window duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration represents the window of time for which the order should be picked up after the &#x60;pickup_at&#x60; time. Can be used as an informational guideline for merchants..</param>
            <param name="PrepTimeDuration">The preparation time duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration indicates how long it takes the merchant to prepare this fulfillment..</param>
            <param name="Note">A general note about the pickup fulfillment.  Notes are useful for providing additional instructions and are displayed in Square apps..</param>
            <param name="PlacedAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was placed..</param>
            <param name="AcceptedAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was accepted by the merchant..</param>
            <param name="RejectedAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was rejected..</param>
            <param name="ReadyAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the merchant set the fulfillment as ready for pickup..</param>
            <param name="ExpiredAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment expired..</param>
            <param name="PickedUpAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was picked up by the recipient..</param>
            <param name="CanceledAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was canceled by the merchant or buyer..</param>
            <param name="CancelReason">A description of why the pickup was canceled. Max length is 100 characters..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.Recipient">
            <summary>
            The recipient of this pickup fulfillment.
            </summary>
            <value>The recipient of this pickup fulfillment.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.ExpiresAt">
            <summary>
            The expiry [timestamp](#workingwithdates) in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. This timestamp indicates when the pickup fulfillment will expire if it is not accepted by the merchant. Expiration time can only be set up to 7 days in the future. If not set, this pickup fulfillment will be automatically accepted when placed.
            </summary>
            <value>The expiry [timestamp](#workingwithdates) in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. This timestamp indicates when the pickup fulfillment will expire if it is not accepted by the merchant. Expiration time can only be set up to 7 days in the future. If not set, this pickup fulfillment will be automatically accepted when placed.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.AutoCompleteDuration">
            <summary>
            The auto completion duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. If set, an open and accepted pickup fulfillment will automatically move to the &#x60;COMPLETED&#x60; state after this period of time. If not set, this pickup fulfillment will remain accepted until it is canceled or completed.
            </summary>
            <value>The auto completion duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. If set, an open and accepted pickup fulfillment will automatically move to the &#x60;COMPLETED&#x60; state after this period of time. If not set, this pickup fulfillment will remain accepted until it is canceled or completed.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.PickupAt">
            <summary>
            The pickup [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. For fulfillments with the schedule type &#x60;ASAP&#x60;, this is automatically set to the current time plus the expected duration to prepare the fulfillment. This represents the start of the pickup window.
            </summary>
            <value>The pickup [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. For fulfillments with the schedule type &#x60;ASAP&#x60;, this is automatically set to the current time plus the expected duration to prepare the fulfillment. This represents the start of the pickup window.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.PickupWindowDuration">
            <summary>
            The pickup window duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration represents the window of time for which the order should be picked up after the &#x60;pickup_at&#x60; time. Can be used as an informational guideline for merchants.
            </summary>
            <value>The pickup window duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration represents the window of time for which the order should be picked up after the &#x60;pickup_at&#x60; time. Can be used as an informational guideline for merchants.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.PrepTimeDuration">
            <summary>
            The preparation time duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration indicates how long it takes the merchant to prepare this fulfillment.
            </summary>
            <value>The preparation time duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration indicates how long it takes the merchant to prepare this fulfillment.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.Note">
            <summary>
            A general note about the pickup fulfillment.  Notes are useful for providing additional instructions and are displayed in Square apps.
            </summary>
            <value>A general note about the pickup fulfillment.  Notes are useful for providing additional instructions and are displayed in Square apps.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.PlacedAt">
            <summary>
            The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was placed.
            </summary>
            <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was placed.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.AcceptedAt">
            <summary>
            The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was accepted by the merchant.
            </summary>
            <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was accepted by the merchant.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.RejectedAt">
            <summary>
            The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was rejected.
            </summary>
            <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was rejected.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.ReadyAt">
            <summary>
            The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the merchant set the fulfillment as ready for pickup.
            </summary>
            <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the merchant set the fulfillment as ready for pickup.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.ExpiredAt">
            <summary>
            The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment expired.
            </summary>
            <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment expired.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.PickedUpAt">
            <summary>
            The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was picked up by the recipient.
            </summary>
            <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was picked up by the recipient.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.CanceledAt">
            <summary>
            The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was canceled by the merchant or buyer.
            </summary>
            <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was canceled by the merchant or buyer.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentPickupDetails.CancelReason">
            <summary>
            A description of why the pickup was canceled. Max length is 100 characters.
            </summary>
            <value>A description of why the pickup was canceled. Max length is 100 characters.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentPickupDetails.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentPickupDetails.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentPickupDetails.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentPickupDetails.Equals(Square.Connect.Model.OrderFulfillmentPickupDetails)">
            <summary>
            Returns true if OrderFulfillmentPickupDetails instances are equal
            </summary>
            <param name="other">Instance of OrderFulfillmentPickupDetails to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentPickupDetails.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderFulfillmentPickupDetailsScheduleType">
            <summary>
            The schedule type of the pickup fulfillment.
            </summary>
            <value>The schedule type of the pickup fulfillment.</value>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentPickupDetailsScheduleType.SCHEDULED">
            <summary>
            Enum SCHEDULED for "SCHEDULED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentPickupDetailsScheduleType.ASAP">
            <summary>
            Enum ASAP for "ASAP"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderFulfillmentRecipient">
            <summary>
            The recipient of a fulfillment.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentRecipient.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderFulfillmentRecipient" /> class.
            </summary>
            <param name="CustomerId">The Customer ID of the customer associated with the fulfillment.  If customer_id is provided, the corresponding recipient information fields (&#x60;display_name&#x60;, &#x60;email_address&#x60;, and &#x60;phone_number&#x60;) are automatically populated from the relevant customer profile. If the targeted profile information does not contain the necessary required information, the request will result in an error..</param>
            <param name="DisplayName">The display name of the fulfillment recipient.  If provided, overrides the value from customer profile indicated by customer_id..</param>
            <param name="EmailAddress">The email address of the fulfillment recipient.  If provided, overrides the value from customer profile indicated by customer_id..</param>
            <param name="PhoneNumber">The phone number of the fulfillment recipient.  If provided, overrides the value from customer profile indicated by customer_id..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentRecipient.CustomerId">
            <summary>
            The Customer ID of the customer associated with the fulfillment.  If customer_id is provided, the corresponding recipient information fields (&#x60;display_name&#x60;, &#x60;email_address&#x60;, and &#x60;phone_number&#x60;) are automatically populated from the relevant customer profile. If the targeted profile information does not contain the necessary required information, the request will result in an error.
            </summary>
            <value>The Customer ID of the customer associated with the fulfillment.  If customer_id is provided, the corresponding recipient information fields (&#x60;display_name&#x60;, &#x60;email_address&#x60;, and &#x60;phone_number&#x60;) are automatically populated from the relevant customer profile. If the targeted profile information does not contain the necessary required information, the request will result in an error.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentRecipient.DisplayName">
            <summary>
            The display name of the fulfillment recipient.  If provided, overrides the value from customer profile indicated by customer_id.
            </summary>
            <value>The display name of the fulfillment recipient.  If provided, overrides the value from customer profile indicated by customer_id.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentRecipient.EmailAddress">
            <summary>
            The email address of the fulfillment recipient.  If provided, overrides the value from customer profile indicated by customer_id.
            </summary>
            <value>The email address of the fulfillment recipient.  If provided, overrides the value from customer profile indicated by customer_id.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderFulfillmentRecipient.PhoneNumber">
            <summary>
            The phone number of the fulfillment recipient.  If provided, overrides the value from customer profile indicated by customer_id.
            </summary>
            <value>The phone number of the fulfillment recipient.  If provided, overrides the value from customer profile indicated by customer_id.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentRecipient.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentRecipient.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentRecipient.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentRecipient.Equals(Square.Connect.Model.OrderFulfillmentRecipient)">
            <summary>
            Returns true if OrderFulfillmentRecipient instances are equal
            </summary>
            <param name="other">Instance of OrderFulfillmentRecipient to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderFulfillmentRecipient.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderFulfillmentState">
            <summary>
            The state of the fulfillment.
            </summary>
            <value>The state of the fulfillment.</value>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentState.PROPOSED">
            <summary>
            Enum PROPOSED for "PROPOSED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentState.RESERVED">
            <summary>
            Enum RESERVED for "RESERVED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentState.PREPARED">
            <summary>
            Enum PREPARED for "PREPARED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentState.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentState.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentState.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderFulfillmentType">
            <summary>
            The type of fulfillment.
            </summary>
            <value>The type of fulfillment.</value>
        </member>
        <member name="F:Square.Connect.Model.OrderFulfillmentType.PICKUP">
            <summary>
            Enum PICKUP for "PICKUP"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItem">
            <summary>
            Represents a line item in an order. Each line item describes a different product to purchase, with its own quantity and price details.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItem" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItem.#ctor(System.String,System.String,System.String,Square.Connect.Model.OrderQuantityUnit,System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.OrderLineItemModifier},System.Collections.Generic.List{Square.Connect.Model.OrderLineItemTax},System.Collections.Generic.List{Square.Connect.Model.OrderLineItemDiscount},Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItem" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the line item only within this order.  This field is read-only..</param>
            <param name="Name">The name of the line item..</param>
            <param name="Quantity">The quantity purchased, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;. (required).</param>
            <param name="QuantityUnit">The unit and precision that this line item&#39;s quantity is measured in..</param>
            <param name="Note">The note of the line item..</param>
            <param name="CatalogObjectId">The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item..</param>
            <param name="VariationName">The name of the variation applied to this line item..</param>
            <param name="Modifiers">The [CatalogModifier](#type-catalogmodifier)s applied to this line item..</param>
            <param name="Taxes">A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any order-level taxes apportioned to this item. When creating an Order, set your item-level taxes in this list..</param>
            <param name="Discounts">A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any order-level discounts apportioned to this item. When creating an Order, set your item-level discounts in this list..</param>
            <param name="BasePriceMoney">The base price for a single unit of the line item..</param>
            <param name="VariationTotalPriceMoney">The total price of all item variations sold in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers..</param>
            <param name="GrossSalesMoney">The amount of money made in gross sales for this line item. Calculated as the sum of the variation&#39;s total price and each modifier&#39;s total price.  This field is read-only..</param>
            <param name="TotalTaxMoney">The total tax amount of money to collect for the line item.  This field is read-only..</param>
            <param name="TotalDiscountMoney">The total discount amount of money to collect for the line item.  This field is read-only..</param>
            <param name="TotalMoney">The total amount of money to collect for this line item.  This field is read-only..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Uid">
            <summary>
            Unique ID that identifies the line item only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the line item only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Name">
            <summary>
            The name of the line item.
            </summary>
            <value>The name of the line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Quantity">
            <summary>
            The quantity purchased, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;.
            </summary>
            <value>The quantity purchased, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.QuantityUnit">
            <summary>
            The unit and precision that this line item&#39;s quantity is measured in.
            </summary>
            <value>The unit and precision that this line item&#39;s quantity is measured in.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Note">
            <summary>
            The note of the line item.
            </summary>
            <value>The note of the line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.CatalogObjectId">
            <summary>
            The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item.
            </summary>
            <value>The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.VariationName">
            <summary>
            The name of the variation applied to this line item.
            </summary>
            <value>The name of the variation applied to this line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Modifiers">
            <summary>
            The [CatalogModifier](#type-catalogmodifier)s applied to this line item.
            </summary>
            <value>The [CatalogModifier](#type-catalogmodifier)s applied to this line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Taxes">
            <summary>
            A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any order-level taxes apportioned to this item. When creating an Order, set your item-level taxes in this list.
            </summary>
            <value>A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any order-level taxes apportioned to this item. When creating an Order, set your item-level taxes in this list.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Discounts">
            <summary>
            A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any order-level discounts apportioned to this item. When creating an Order, set your item-level discounts in this list.
            </summary>
            <value>A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any order-level discounts apportioned to this item. When creating an Order, set your item-level discounts in this list.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.BasePriceMoney">
            <summary>
            The base price for a single unit of the line item.
            </summary>
            <value>The base price for a single unit of the line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.VariationTotalPriceMoney">
            <summary>
            The total price of all item variations sold in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers.
            </summary>
            <value>The total price of all item variations sold in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.GrossSalesMoney">
            <summary>
            The amount of money made in gross sales for this line item. Calculated as the sum of the variation&#39;s total price and each modifier&#39;s total price.  This field is read-only.
            </summary>
            <value>The amount of money made in gross sales for this line item. Calculated as the sum of the variation&#39;s total price and each modifier&#39;s total price.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.TotalTaxMoney">
            <summary>
            The total tax amount of money to collect for the line item.  This field is read-only.
            </summary>
            <value>The total tax amount of money to collect for the line item.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.TotalDiscountMoney">
            <summary>
            The total discount amount of money to collect for the line item.  This field is read-only.
            </summary>
            <value>The total discount amount of money to collect for the line item.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItem.TotalMoney">
            <summary>
            The total amount of money to collect for this line item.  This field is read-only.
            </summary>
            <value>The total amount of money to collect for this line item.  This field is read-only.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItem.Equals(Square.Connect.Model.OrderLineItem)">
            <summary>
            Returns true if OrderLineItem instances are equal
            </summary>
            <param name="other">Instance of OrderLineItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscount">
            <summary>
            Represents a discount that applies to one or more line items in an order.  Fixed-amount, order-level discounts are distributed across all non-zero line item totals. The amount distributed to each line item is relative to that item’s contribution to the order subtotal.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscount.TypeEnum">
            <summary>
            The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values
            </summary>
            <value>The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.UNKNOWNDISCOUNT">
            <summary>
            Enum UNKNOWNDISCOUNT for "UNKNOWN_DISCOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.FIXEDPERCENTAGE">
            <summary>
            Enum FIXEDPERCENTAGE for "FIXED_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.FIXEDAMOUNT">
            <summary>
            Enum FIXEDAMOUNT for "FIXED_AMOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.VARIABLEPERCENTAGE">
            <summary>
            Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.VARIABLEAMOUNT">
            <summary>
            Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscount.ScopeEnum">
            <summary>
            Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values
            </summary>
            <value>Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.ScopeEnum.OTHERDISCOUNTSCOPE">
            <summary>
            Enum OTHERDISCOUNTSCOPE for "OTHER_DISCOUNT_SCOPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.ScopeEnum.LINEITEM">
            <summary>
            Enum LINEITEM for "LINE_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.ScopeEnum.ORDER">
            <summary>
            Enum ORDER for "ORDER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.Type">
            <summary>
            The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values
            </summary>
            <value>The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.Scope">
            <summary>
            Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values
            </summary>
            <value>Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.#ctor(System.String,System.String,System.String,System.Nullable{Square.Connect.Model.OrderLineItemDiscount.TypeEnum},System.String,Square.Connect.Model.Money,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.OrderLineItemDiscount.ScopeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItemDiscount" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the discount only within this order.  This field is read-only..</param>
            <param name="CatalogObjectId">The catalog object id referencing [CatalogDiscount](#type-catalogdiscount)..</param>
            <param name="Name">The discount&#39;s name..</param>
            <param name="Type">The type of the discount. If it is created by API, it would be either &#x60;FIXED_PERCENTAGE&#x60; or &#x60;FIXED_AMOUNT&#x60;.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values.</param>
            <param name="Percentage">The percentage of the discount, as a string representation of a decimal number. A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  The percentage won&#39;t be set for an amount-based discount..</param>
            <param name="AmountMoney">The total monetary amount of the applicable discount. If it is at order level, it is the value of the order level discount. If it is at line item level, it is the value of the line item level discount.  The amount_money won&#39;t be set for a percentage-based discount..</param>
            <param name="AppliedMoney">The amount of discount actually applied to this line item.  Represents the amount of money applied to a line item as a discount When an amount-based discount is at order-level, this value is different from &#x60;amount_money&#x60; because the discount is distributed across the line items..</param>
            <param name="Scope">Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.Uid">
            <summary>
            Unique ID that identifies the discount only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the discount only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.CatalogObjectId">
            <summary>
            The catalog object id referencing [CatalogDiscount](#type-catalogdiscount).
            </summary>
            <value>The catalog object id referencing [CatalogDiscount](#type-catalogdiscount).</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.Name">
            <summary>
            The discount&#39;s name.
            </summary>
            <value>The discount&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.Percentage">
            <summary>
            The percentage of the discount, as a string representation of a decimal number. A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  The percentage won&#39;t be set for an amount-based discount.
            </summary>
            <value>The percentage of the discount, as a string representation of a decimal number. A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  The percentage won&#39;t be set for an amount-based discount.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.AmountMoney">
            <summary>
            The total monetary amount of the applicable discount. If it is at order level, it is the value of the order level discount. If it is at line item level, it is the value of the line item level discount.  The amount_money won&#39;t be set for a percentage-based discount.
            </summary>
            <value>The total monetary amount of the applicable discount. If it is at order level, it is the value of the order level discount. If it is at line item level, it is the value of the line item level discount.  The amount_money won&#39;t be set for a percentage-based discount.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.AppliedMoney">
            <summary>
            The amount of discount actually applied to this line item.  Represents the amount of money applied to a line item as a discount When an amount-based discount is at order-level, this value is different from &#x60;amount_money&#x60; because the discount is distributed across the line items.
            </summary>
            <value>The amount of discount actually applied to this line item.  Represents the amount of money applied to a line item as a discount When an amount-based discount is at order-level, this value is different from &#x60;amount_money&#x60; because the discount is distributed across the line items.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.Equals(Square.Connect.Model.OrderLineItemDiscount)">
            <summary>
            Returns true if OrderLineItemDiscount instances are equal
            </summary>
            <param name="other">Instance of OrderLineItemDiscount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscountScope">
            <summary>
            Indicates whether this is a line item or order level discount.
            </summary>
            <value>Indicates whether this is a line item or order level discount.</value>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountScope.OTHERDISCOUNTSCOPE">
            <summary>
            Enum OTHERDISCOUNTSCOPE for "OTHER_DISCOUNT_SCOPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountScope.LINEITEM">
            <summary>
            Enum LINEITEM for "LINE_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountScope.ORDER">
            <summary>
            Enum ORDER for "ORDER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscountType">
            <summary>
            Indicates how the discount is applied to the associated line item or order.
            </summary>
            <value>Indicates how the discount is applied to the associated line item or order.</value>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.UNKNOWNDISCOUNT">
            <summary>
            Enum UNKNOWNDISCOUNT for "UNKNOWN_DISCOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.FIXEDPERCENTAGE">
            <summary>
            Enum FIXEDPERCENTAGE for "FIXED_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.FIXEDAMOUNT">
            <summary>
            Enum FIXEDAMOUNT for "FIXED_AMOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.VARIABLEPERCENTAGE">
            <summary>
            Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.VARIABLEAMOUNT">
            <summary>
            Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemModifier">
            <summary>
            A [CatalogModifier](#type-catalogmodifier).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItemModifier" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the modifier only within this order.  This field is read-only..</param>
            <param name="CatalogObjectId">The catalog object id referencing [CatalogModifier](#type-catalogmodifier)..</param>
            <param name="Name">The name of the item modifier..</param>
            <param name="BasePriceMoney">The base price for the modifier.  &#x60;base_price_money&#x60; is required for ad hoc modifiers. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the predefined [CatalogModifier](#type-catalogmodifier) price..</param>
            <param name="TotalPriceMoney">The total price of the item modifier for its line item. This is the modifier&#39;s &#x60;base_price_money&#x60; multiplied by the line item&#39;s quantity..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemModifier.Uid">
            <summary>
            Unique ID that identifies the modifier only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the modifier only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemModifier.CatalogObjectId">
            <summary>
            The catalog object id referencing [CatalogModifier](#type-catalogmodifier).
            </summary>
            <value>The catalog object id referencing [CatalogModifier](#type-catalogmodifier).</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemModifier.Name">
            <summary>
            The name of the item modifier.
            </summary>
            <value>The name of the item modifier.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemModifier.BasePriceMoney">
            <summary>
            The base price for the modifier.  &#x60;base_price_money&#x60; is required for ad hoc modifiers. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the predefined [CatalogModifier](#type-catalogmodifier) price.
            </summary>
            <value>The base price for the modifier.  &#x60;base_price_money&#x60; is required for ad hoc modifiers. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the predefined [CatalogModifier](#type-catalogmodifier) price.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemModifier.TotalPriceMoney">
            <summary>
            The total price of the item modifier for its line item. This is the modifier&#39;s &#x60;base_price_money&#x60; multiplied by the line item&#39;s quantity.
            </summary>
            <value>The total price of the item modifier for its line item. This is the modifier&#39;s &#x60;base_price_money&#x60; multiplied by the line item&#39;s quantity.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.Equals(Square.Connect.Model.OrderLineItemModifier)">
            <summary>
            Returns true if OrderLineItemModifier instances are equal
            </summary>
            <param name="other">Instance of OrderLineItemModifier to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemTax">
            <summary>
            Represents a tax that applies to one or more line items in an order.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemTax.TypeEnum">
            <summary>
            Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
            </summary>
            <value>Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTax.TypeEnum.UNKNOWNTAX">
            <summary>
            Enum UNKNOWNTAX for "UNKNOWN_TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTax.TypeEnum.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTax.TypeEnum.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemTax.ScopeEnum">
            <summary>
            Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values
            </summary>
            <value>Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTax.ScopeEnum.OTHERTAXSCOPE">
            <summary>
            Enum OTHERTAXSCOPE for "OTHER_TAX_SCOPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTax.ScopeEnum.LINEITEM">
            <summary>
            Enum LINEITEM for "LINE_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTax.ScopeEnum.ORDER">
            <summary>
            Enum ORDER for "ORDER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.Type">
            <summary>
            Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
            </summary>
            <value>Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.Scope">
            <summary>
            Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values
            </summary>
            <value>Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.#ctor(System.String,System.String,System.String,System.Nullable{Square.Connect.Model.OrderLineItemTax.TypeEnum},System.String,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.OrderLineItemTax.ScopeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItemTax" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the tax only within this order.  This field is read-only..</param>
            <param name="CatalogObjectId">The catalog object id referencing [CatalogTax](#type-catalogtax)..</param>
            <param name="Name">The tax&#39;s name..</param>
            <param name="Type">Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.</param>
            <param name="Percentage">The percentage of the tax, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%..</param>
            <param name="AppliedMoney">The amount of the money applied by the tax in an order..</param>
            <param name="Scope">Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.Uid">
            <summary>
            Unique ID that identifies the tax only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the tax only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.CatalogObjectId">
            <summary>
            The catalog object id referencing [CatalogTax](#type-catalogtax).
            </summary>
            <value>The catalog object id referencing [CatalogTax](#type-catalogtax).</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.Name">
            <summary>
            The tax&#39;s name.
            </summary>
            <value>The tax&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.Percentage">
            <summary>
            The percentage of the tax, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.
            </summary>
            <value>The percentage of the tax, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.AppliedMoney">
            <summary>
            The amount of the money applied by the tax in an order.
            </summary>
            <value>The amount of the money applied by the tax in an order.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.Equals(Square.Connect.Model.OrderLineItemTax)">
            <summary>
            Returns true if OrderLineItemTax instances are equal
            </summary>
            <param name="other">Instance of OrderLineItemTax to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemTaxScope">
            <summary>
            Indicates whether this is a line item or order level tax.
            </summary>
            <value>Indicates whether this is a line item or order level tax.</value>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTaxScope.OTHERTAXSCOPE">
            <summary>
            Enum OTHERTAXSCOPE for "OTHER_TAX_SCOPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTaxScope.LINEITEM">
            <summary>
            Enum LINEITEM for "LINE_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTaxScope.ORDER">
            <summary>
            Enum ORDER for "ORDER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderLineItemTaxType">
            <summary>
            Indicates how the tax is applied to the associated line item or order.
            </summary>
            <value>Indicates how the tax is applied to the associated line item or order.</value>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTaxType.UNKNOWNTAX">
            <summary>
            Enum UNKNOWNTAX for "UNKNOWN_TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTaxType.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderLineItemTaxType.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderMoneyAmounts">
            <summary>
            A collection of various money amounts.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderMoneyAmounts.#ctor(Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderMoneyAmounts" /> class.
            </summary>
            <param name="TotalMoney">Total money..</param>
            <param name="TaxMoney">Money associated with taxes..</param>
            <param name="DiscountMoney">Money associated with discounts..</param>
            <param name="TipMoney">Money associated with tips..</param>
            <param name="ServiceChargeMoney">Money associated with service charges..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderMoneyAmounts.TotalMoney">
            <summary>
            Total money.
            </summary>
            <value>Total money.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderMoneyAmounts.TaxMoney">
            <summary>
            Money associated with taxes.
            </summary>
            <value>Money associated with taxes.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderMoneyAmounts.DiscountMoney">
            <summary>
            Money associated with discounts.
            </summary>
            <value>Money associated with discounts.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderMoneyAmounts.TipMoney">
            <summary>
            Money associated with tips.
            </summary>
            <value>Money associated with tips.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderMoneyAmounts.ServiceChargeMoney">
            <summary>
            Money associated with service charges.
            </summary>
            <value>Money associated with service charges.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderMoneyAmounts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderMoneyAmounts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderMoneyAmounts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderMoneyAmounts.Equals(Square.Connect.Model.OrderMoneyAmounts)">
            <summary>
            Returns true if OrderMoneyAmounts instances are equal
            </summary>
            <param name="other">Instance of OrderMoneyAmounts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderMoneyAmounts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderQuantityUnit">
            <summary>
            Contains the measurement unit for a quantity and a precision which specifies the number of digits after the decimal point for decimal quantities.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderQuantityUnit.#ctor(Square.Connect.Model.MeasurementUnit,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderQuantityUnit" /> class.
            </summary>
            <param name="MeasurementUnit">A [MeasurementUnit](#type-measurementunit) that represents the unit of measure for the quantity..</param>
            <param name="Precision">For non-integer quantities, represents the number of digits after the decimal point that are recorded for this quantity.  For example, a precision of 1 allows quantities like &#x60;\&quot;1.0\&quot;&#x60; and &#x60;\&quot;1.1\&quot;&#x60;, but not &#x60;\&quot;1.01\&quot;&#x60;.  Min: 0. Max: 5..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderQuantityUnit.MeasurementUnit">
            <summary>
            A [MeasurementUnit](#type-measurementunit) that represents the unit of measure for the quantity.
            </summary>
            <value>A [MeasurementUnit](#type-measurementunit) that represents the unit of measure for the quantity.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderQuantityUnit.Precision">
            <summary>
            For non-integer quantities, represents the number of digits after the decimal point that are recorded for this quantity.  For example, a precision of 1 allows quantities like &#x60;\&quot;1.0\&quot;&#x60; and &#x60;\&quot;1.1\&quot;&#x60;, but not &#x60;\&quot;1.01\&quot;&#x60;.  Min: 0. Max: 5.
            </summary>
            <value>For non-integer quantities, represents the number of digits after the decimal point that are recorded for this quantity.  For example, a precision of 1 allows quantities like &#x60;\&quot;1.0\&quot;&#x60; and &#x60;\&quot;1.1\&quot;&#x60;, but not &#x60;\&quot;1.01\&quot;&#x60;.  Min: 0. Max: 5.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderQuantityUnit.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderQuantityUnit.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderQuantityUnit.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderQuantityUnit.Equals(Square.Connect.Model.OrderQuantityUnit)">
            <summary>
            Returns true if OrderQuantityUnit instances are equal
            </summary>
            <param name="other">Instance of OrderQuantityUnit to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderQuantityUnit.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderReturn">
            <summary>
            The set of line items, service charges, taxes, discounts, tips, etc. being returned in an Order.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderReturn.#ctor(System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.OrderReturnLineItem},System.Collections.Generic.List{Square.Connect.Model.OrderReturnServiceCharge},System.Collections.Generic.List{Square.Connect.Model.OrderReturnTax},System.Collections.Generic.List{Square.Connect.Model.OrderReturnDiscount},Square.Connect.Model.OrderRoundingAdjustment,Square.Connect.Model.OrderMoneyAmounts)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderReturn" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the return only within this order.  This field is read-only..</param>
            <param name="SourceOrderId">Order which contains the original sale of these returned line items. This will be unset for unlinked returns..</param>
            <param name="ReturnLineItems">Collection of line items which are being returned..</param>
            <param name="ReturnServiceCharges">Collection of service charges which are being returned.  This field is read-only..</param>
            <param name="ReturnTaxes">Collection of taxes which are being returned..</param>
            <param name="ReturnDiscounts">Collection of discounts which are being returned..</param>
            <param name="RoundingAdjustment">A positive or negative rounding adjustment to the total value being returned. Commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency..</param>
            <param name="ReturnAmounts">Aggregate monetary value being returned by this Return entry..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderReturn.Uid">
            <summary>
            Unique ID that identifies the return only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the return only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturn.SourceOrderId">
            <summary>
            Order which contains the original sale of these returned line items. This will be unset for unlinked returns.
            </summary>
            <value>Order which contains the original sale of these returned line items. This will be unset for unlinked returns.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturn.ReturnLineItems">
            <summary>
            Collection of line items which are being returned.
            </summary>
            <value>Collection of line items which are being returned.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturn.ReturnServiceCharges">
            <summary>
            Collection of service charges which are being returned.  This field is read-only.
            </summary>
            <value>Collection of service charges which are being returned.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturn.ReturnTaxes">
            <summary>
            Collection of taxes which are being returned.
            </summary>
            <value>Collection of taxes which are being returned.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturn.ReturnDiscounts">
            <summary>
            Collection of discounts which are being returned.
            </summary>
            <value>Collection of discounts which are being returned.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturn.RoundingAdjustment">
            <summary>
            A positive or negative rounding adjustment to the total value being returned. Commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.
            </summary>
            <value>A positive or negative rounding adjustment to the total value being returned. Commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturn.ReturnAmounts">
            <summary>
            Aggregate monetary value being returned by this Return entry.
            </summary>
            <value>Aggregate monetary value being returned by this Return entry.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderReturn.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturn.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturn.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturn.Equals(Square.Connect.Model.OrderReturn)">
            <summary>
            Returns true if OrderReturn instances are equal
            </summary>
            <param name="other">Instance of OrderReturn to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturn.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnDiscount">
            <summary>
            The line item discount being returned.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnDiscount.TypeEnum">
            <summary>
            The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values
            </summary>
            <value>The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnDiscount.TypeEnum.UNKNOWNDISCOUNT">
            <summary>
            Enum UNKNOWNDISCOUNT for "UNKNOWN_DISCOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnDiscount.TypeEnum.FIXEDPERCENTAGE">
            <summary>
            Enum FIXEDPERCENTAGE for "FIXED_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnDiscount.TypeEnum.FIXEDAMOUNT">
            <summary>
            Enum FIXEDAMOUNT for "FIXED_AMOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnDiscount.TypeEnum.VARIABLEPERCENTAGE">
            <summary>
            Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnDiscount.TypeEnum.VARIABLEAMOUNT">
            <summary>
            Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnDiscount.ScopeEnum">
            <summary>
            Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values
            </summary>
            <value>Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnDiscount.ScopeEnum.OTHERDISCOUNTSCOPE">
            <summary>
            Enum OTHERDISCOUNTSCOPE for "OTHER_DISCOUNT_SCOPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnDiscount.ScopeEnum.LINEITEM">
            <summary>
            Enum LINEITEM for "LINE_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnDiscount.ScopeEnum.ORDER">
            <summary>
            Enum ORDER for "ORDER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnDiscount.Type">
            <summary>
            The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values
            </summary>
            <value>The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnDiscount.Scope">
            <summary>
            Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values
            </summary>
            <value>Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnDiscount.#ctor(System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.OrderReturnDiscount.TypeEnum},System.String,Square.Connect.Model.Money,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.OrderReturnDiscount.ScopeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderReturnDiscount" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the return discount only within this order.  This field is read-only..</param>
            <param name="SourceDiscountUid">&#x60;uid&#x60; of the Discount from the Order which contains the original application of this discount..</param>
            <param name="CatalogObjectId">The catalog object id referencing [CatalogDiscount](#type-catalogdiscount)..</param>
            <param name="Name">The discount&#39;s name..</param>
            <param name="Type">The type of the discount. If it is created by API, it would be either &#x60;FIXED_PERCENTAGE&#x60; or &#x60;FIXED_AMOUNT&#x60;.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values.</param>
            <param name="Percentage">The percentage of the tax, as a string representation of a decimal number. A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  The percentage won&#39;t be set for an amount-based discount..</param>
            <param name="AmountMoney">The total monetary amount of the applicable discount. If it is at order level, it is the value of the order level discount. If it is at line item level, it is the value of the line item level discount.  The amount_money won&#39;t be set for a percentage-based discount..</param>
            <param name="AppliedMoney">The amount of discount actually applied to this line item. When an amount-based discount is at order-level, this value is different from &#x60;amount_money&#x60; because the discount is distributed across the line items..</param>
            <param name="Scope">Indicates the level at which the discount applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnDiscount.Uid">
            <summary>
            Unique ID that identifies the return discount only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the return discount only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnDiscount.SourceDiscountUid">
            <summary>
            &#x60;uid&#x60; of the Discount from the Order which contains the original application of this discount.
            </summary>
            <value>&#x60;uid&#x60; of the Discount from the Order which contains the original application of this discount.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnDiscount.CatalogObjectId">
            <summary>
            The catalog object id referencing [CatalogDiscount](#type-catalogdiscount).
            </summary>
            <value>The catalog object id referencing [CatalogDiscount](#type-catalogdiscount).</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnDiscount.Name">
            <summary>
            The discount&#39;s name.
            </summary>
            <value>The discount&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnDiscount.Percentage">
            <summary>
            The percentage of the tax, as a string representation of a decimal number. A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  The percentage won&#39;t be set for an amount-based discount.
            </summary>
            <value>The percentage of the tax, as a string representation of a decimal number. A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  The percentage won&#39;t be set for an amount-based discount.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnDiscount.AmountMoney">
            <summary>
            The total monetary amount of the applicable discount. If it is at order level, it is the value of the order level discount. If it is at line item level, it is the value of the line item level discount.  The amount_money won&#39;t be set for a percentage-based discount.
            </summary>
            <value>The total monetary amount of the applicable discount. If it is at order level, it is the value of the order level discount. If it is at line item level, it is the value of the line item level discount.  The amount_money won&#39;t be set for a percentage-based discount.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnDiscount.AppliedMoney">
            <summary>
            The amount of discount actually applied to this line item. When an amount-based discount is at order-level, this value is different from &#x60;amount_money&#x60; because the discount is distributed across the line items.
            </summary>
            <value>The amount of discount actually applied to this line item. When an amount-based discount is at order-level, this value is different from &#x60;amount_money&#x60; because the discount is distributed across the line items.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnDiscount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnDiscount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnDiscount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnDiscount.Equals(Square.Connect.Model.OrderReturnDiscount)">
            <summary>
            Returns true if OrderReturnDiscount instances are equal
            </summary>
            <param name="other">Instance of OrderReturnDiscount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnDiscount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnLineItem">
            <summary>
            The line item being returned in an Order.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderReturnLineItem" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItem.#ctor(System.String,System.String,System.String,System.String,Square.Connect.Model.OrderQuantityUnit,System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.OrderReturnLineItemModifier},System.Collections.Generic.List{Square.Connect.Model.OrderReturnTax},System.Collections.Generic.List{Square.Connect.Model.OrderReturnDiscount},Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderReturnLineItem" /> class.
            </summary>
            <param name="Uid">Unique identifier for this return line item entry. This is a read-only field..</param>
            <param name="SourceLineItemUid">&#x60;uid&#x60; of the LineItem in the original sale Order..</param>
            <param name="Name">The name of the line item..</param>
            <param name="Quantity">The quantity returned, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;. (required).</param>
            <param name="QuantityUnit">The unit and precision that this return line item&#39;s quantity is measured in..</param>
            <param name="Note">The note of the returned line item..</param>
            <param name="CatalogObjectId">The [CatalogItemVariation](#type-catalogitemvariation) id applied to this returned line item..</param>
            <param name="VariationName">The name of the variation applied to this returned line item..</param>
            <param name="ReturnModifiers">The [CatalogModifier](#type-catalogmodifier)s applied to this line item..</param>
            <param name="ReturnTaxes">A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any return-level taxes apportioned to this item..</param>
            <param name="ReturnDiscounts">A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any return-level discounts apportioned to this item..</param>
            <param name="BasePriceMoney">The base price for a single unit of the line item..</param>
            <param name="VariationTotalPriceMoney">The total price of all item variations returned in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers..</param>
            <param name="GrossReturnMoney">The gross return amount of money calculated as (item base price + modifiers price) * quantity.  This field is read-only..</param>
            <param name="TotalTaxMoney">The total tax amount of money to return for the line item.  This field is read-only..</param>
            <param name="TotalDiscountMoney">The total discount amount of money to return for the line item.  This field is read-only..</param>
            <param name="TotalMoney">The total amount of money to return for this line item.  This field is read-only..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.Uid">
            <summary>
            Unique identifier for this return line item entry. This is a read-only field.
            </summary>
            <value>Unique identifier for this return line item entry. This is a read-only field.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.SourceLineItemUid">
            <summary>
            &#x60;uid&#x60; of the LineItem in the original sale Order.
            </summary>
            <value>&#x60;uid&#x60; of the LineItem in the original sale Order.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.Name">
            <summary>
            The name of the line item.
            </summary>
            <value>The name of the line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.Quantity">
            <summary>
            The quantity returned, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;.
            </summary>
            <value>The quantity returned, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.QuantityUnit">
            <summary>
            The unit and precision that this return line item&#39;s quantity is measured in.
            </summary>
            <value>The unit and precision that this return line item&#39;s quantity is measured in.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.Note">
            <summary>
            The note of the returned line item.
            </summary>
            <value>The note of the returned line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.CatalogObjectId">
            <summary>
            The [CatalogItemVariation](#type-catalogitemvariation) id applied to this returned line item.
            </summary>
            <value>The [CatalogItemVariation](#type-catalogitemvariation) id applied to this returned line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.VariationName">
            <summary>
            The name of the variation applied to this returned line item.
            </summary>
            <value>The name of the variation applied to this returned line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.ReturnModifiers">
            <summary>
            The [CatalogModifier](#type-catalogmodifier)s applied to this line item.
            </summary>
            <value>The [CatalogModifier](#type-catalogmodifier)s applied to this line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.ReturnTaxes">
            <summary>
            A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any return-level taxes apportioned to this item.
            </summary>
            <value>A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any return-level taxes apportioned to this item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.ReturnDiscounts">
            <summary>
            A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any return-level discounts apportioned to this item.
            </summary>
            <value>A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any return-level discounts apportioned to this item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.BasePriceMoney">
            <summary>
            The base price for a single unit of the line item.
            </summary>
            <value>The base price for a single unit of the line item.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.VariationTotalPriceMoney">
            <summary>
            The total price of all item variations returned in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers.
            </summary>
            <value>The total price of all item variations returned in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.GrossReturnMoney">
            <summary>
            The gross return amount of money calculated as (item base price + modifiers price) * quantity.  This field is read-only.
            </summary>
            <value>The gross return amount of money calculated as (item base price + modifiers price) * quantity.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.TotalTaxMoney">
            <summary>
            The total tax amount of money to return for the line item.  This field is read-only.
            </summary>
            <value>The total tax amount of money to return for the line item.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.TotalDiscountMoney">
            <summary>
            The total discount amount of money to return for the line item.  This field is read-only.
            </summary>
            <value>The total discount amount of money to return for the line item.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItem.TotalMoney">
            <summary>
            The total amount of money to return for this line item.  This field is read-only.
            </summary>
            <value>The total amount of money to return for this line item.  This field is read-only.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItem.Equals(Square.Connect.Model.OrderReturnLineItem)">
            <summary>
            Returns true if OrderReturnLineItem instances are equal
            </summary>
            <param name="other">Instance of OrderReturnLineItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnLineItemModifier">
            <summary>
            A line item modifier being returned.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItemModifier.#ctor(System.String,System.String,System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderReturnLineItemModifier" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the return modifier only within this order.  This field is read-only..</param>
            <param name="SourceModifierUid">&#x60;uid&#x60; of the Modifier from the LineItem from the Order which contains the original sale of this line item modifier..</param>
            <param name="CatalogObjectId">The catalog object id referencing [CatalogModifier](#type-catalogmodifier)..</param>
            <param name="Name">The name of the item modifier..</param>
            <param name="BasePriceMoney">The base price for the modifier.  &#x60;base_price_money&#x60; is required for ad hoc modifiers. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the predefined [CatalogModifier](#type-catalogmodifier) price..</param>
            <param name="TotalPriceMoney">The total price of the item modifier for its line item. This is the modifier&#39;s &#x60;base_price_money&#x60; multiplied by the line item&#39;s quantity..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItemModifier.Uid">
            <summary>
            Unique ID that identifies the return modifier only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the return modifier only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItemModifier.SourceModifierUid">
            <summary>
            &#x60;uid&#x60; of the Modifier from the LineItem from the Order which contains the original sale of this line item modifier.
            </summary>
            <value>&#x60;uid&#x60; of the Modifier from the LineItem from the Order which contains the original sale of this line item modifier.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItemModifier.CatalogObjectId">
            <summary>
            The catalog object id referencing [CatalogModifier](#type-catalogmodifier).
            </summary>
            <value>The catalog object id referencing [CatalogModifier](#type-catalogmodifier).</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItemModifier.Name">
            <summary>
            The name of the item modifier.
            </summary>
            <value>The name of the item modifier.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItemModifier.BasePriceMoney">
            <summary>
            The base price for the modifier.  &#x60;base_price_money&#x60; is required for ad hoc modifiers. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the predefined [CatalogModifier](#type-catalogmodifier) price.
            </summary>
            <value>The base price for the modifier.  &#x60;base_price_money&#x60; is required for ad hoc modifiers. If both &#x60;catalog_object_id&#x60; and &#x60;base_price_money&#x60; are set, &#x60;base_price_money&#x60; will override the predefined [CatalogModifier](#type-catalogmodifier) price.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnLineItemModifier.TotalPriceMoney">
            <summary>
            The total price of the item modifier for its line item. This is the modifier&#39;s &#x60;base_price_money&#x60; multiplied by the line item&#39;s quantity.
            </summary>
            <value>The total price of the item modifier for its line item. This is the modifier&#39;s &#x60;base_price_money&#x60; multiplied by the line item&#39;s quantity.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItemModifier.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItemModifier.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItemModifier.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItemModifier.Equals(Square.Connect.Model.OrderReturnLineItemModifier)">
            <summary>
            Returns true if OrderReturnLineItemModifier instances are equal
            </summary>
            <param name="other">Instance of OrderReturnLineItemModifier to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnLineItemModifier.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnServiceCharge">
            <summary>
            The service charge applied to the original order.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnServiceCharge.CalculationPhaseEnum">
            <summary>
            The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
            </summary>
            <value>The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnServiceCharge.CalculationPhaseEnum.SUBTOTALPHASE">
            <summary>
            Enum SUBTOTALPHASE for "SUBTOTAL_PHASE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnServiceCharge.CalculationPhaseEnum.TOTALPHASE">
            <summary>
            Enum TOTALPHASE for "TOTAL_PHASE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.CalculationPhase">
            <summary>
            The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
            </summary>
            <value>The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnServiceCharge.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.OrderReturnServiceCharge.CalculationPhaseEnum},System.Nullable{System.Boolean},System.Collections.Generic.List{Square.Connect.Model.OrderReturnTax})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderReturnServiceCharge" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the return service charge only within this order.  This field is read-only..</param>
            <param name="SourceServiceChargeUid">&#x60;uid&#x60; of the Service Charge from the Order which contains the original charge of this service charge, null for unlinked returns..</param>
            <param name="Name">The name of the service charge..</param>
            <param name="CatalogObjectId">The ID referencing the service charge [CatalogObject](#type-catalogobject).</param>
            <param name="Percentage">The percentage of the service charge, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  Exactly one of percentage or amount_money should be set..</param>
            <param name="AmountMoney">The amount of a non-percentage based service charge.  Exactly one of percentage or amount_money should be set..</param>
            <param name="AppliedMoney">The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;.  For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. The &#x60;applied_money&#x60; field will include any inclusive tax amounts as well.  This field is read-only..</param>
            <param name="TotalMoney">The total amount of money to collect for the service charge.  Note that &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;.  This field is read-only..</param>
            <param name="TotalTaxMoney">The total amount of tax money to collect for the service charge.  This field is read-only..</param>
            <param name="CalculationPhase">The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values.</param>
            <param name="Taxable">Indicates whether the surcharge can be taxed. Service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable..</param>
            <param name="ReturnTaxes">The taxes which apply to the service charge. Return-level taxes apply by default to service charge calculated in the &#x60;SUBTOTAL_PHASE&#x60; if the service charge is marked as taxable..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.Uid">
            <summary>
            Unique ID that identifies the return service charge only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the return service charge only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.SourceServiceChargeUid">
            <summary>
            &#x60;uid&#x60; of the Service Charge from the Order which contains the original charge of this service charge, null for unlinked returns.
            </summary>
            <value>&#x60;uid&#x60; of the Service Charge from the Order which contains the original charge of this service charge, null for unlinked returns.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.Name">
            <summary>
            The name of the service charge.
            </summary>
            <value>The name of the service charge.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.CatalogObjectId">
            <summary>
            The ID referencing the service charge [CatalogObject](#type-catalogobject)
            </summary>
            <value>The ID referencing the service charge [CatalogObject](#type-catalogobject)</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.Percentage">
            <summary>
            The percentage of the service charge, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  Exactly one of percentage or amount_money should be set.
            </summary>
            <value>The percentage of the service charge, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  Exactly one of percentage or amount_money should be set.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.AmountMoney">
            <summary>
            The amount of a non-percentage based service charge.  Exactly one of percentage or amount_money should be set.
            </summary>
            <value>The amount of a non-percentage based service charge.  Exactly one of percentage or amount_money should be set.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.AppliedMoney">
            <summary>
            The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;.  For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. The &#x60;applied_money&#x60; field will include any inclusive tax amounts as well.  This field is read-only.
            </summary>
            <value>The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;.  For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. The &#x60;applied_money&#x60; field will include any inclusive tax amounts as well.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.TotalMoney">
            <summary>
            The total amount of money to collect for the service charge.  Note that &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;.  This field is read-only.
            </summary>
            <value>The total amount of money to collect for the service charge.  Note that &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.TotalTaxMoney">
            <summary>
            The total amount of tax money to collect for the service charge.  This field is read-only.
            </summary>
            <value>The total amount of tax money to collect for the service charge.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.Taxable">
            <summary>
            Indicates whether the surcharge can be taxed. Service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable.
            </summary>
            <value>Indicates whether the surcharge can be taxed. Service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnServiceCharge.ReturnTaxes">
            <summary>
            The taxes which apply to the service charge. Return-level taxes apply by default to service charge calculated in the &#x60;SUBTOTAL_PHASE&#x60; if the service charge is marked as taxable.
            </summary>
            <value>The taxes which apply to the service charge. Return-level taxes apply by default to service charge calculated in the &#x60;SUBTOTAL_PHASE&#x60; if the service charge is marked as taxable.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnServiceCharge.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnServiceCharge.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnServiceCharge.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnServiceCharge.Equals(Square.Connect.Model.OrderReturnServiceCharge)">
            <summary>
            Returns true if OrderReturnServiceCharge instances are equal
            </summary>
            <param name="other">Instance of OrderReturnServiceCharge to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnServiceCharge.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnTax">
            <summary>
            The line item tax being returned.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnTax.TypeEnum">
            <summary>
            Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
            </summary>
            <value>Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnTax.TypeEnum.UNKNOWNTAX">
            <summary>
            Enum UNKNOWNTAX for "UNKNOWN_TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnTax.TypeEnum.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnTax.TypeEnum.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderReturnTax.ScopeEnum">
            <summary>
            Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values
            </summary>
            <value>Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnTax.ScopeEnum.OTHERTAXSCOPE">
            <summary>
            Enum OTHERTAXSCOPE for "OTHER_TAX_SCOPE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnTax.ScopeEnum.LINEITEM">
            <summary>
            Enum LINEITEM for "LINE_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderReturnTax.ScopeEnum.ORDER">
            <summary>
            Enum ORDER for "ORDER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnTax.Type">
            <summary>
            Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
            </summary>
            <value>Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnTax.Scope">
            <summary>
            Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values
            </summary>
            <value>Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnTax.#ctor(System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.OrderReturnTax.TypeEnum},System.String,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.OrderReturnTax.ScopeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderReturnTax" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the return tax only within this order.  This field is read-only..</param>
            <param name="SourceTaxUid">&#x60;uid&#x60; of the Tax from the Order which contains the original charge of this tax..</param>
            <param name="CatalogObjectId">The catalog object id referencing [CatalogTax](#type-catalogtax)..</param>
            <param name="Name">The tax&#39;s name..</param>
            <param name="Type">Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.</param>
            <param name="Percentage">The percentage of the tax, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%..</param>
            <param name="AppliedMoney">The amount of the money applied by the tax in an order..</param>
            <param name="Scope">Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnTax.Uid">
            <summary>
            Unique ID that identifies the return tax only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the return tax only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnTax.SourceTaxUid">
            <summary>
            &#x60;uid&#x60; of the Tax from the Order which contains the original charge of this tax.
            </summary>
            <value>&#x60;uid&#x60; of the Tax from the Order which contains the original charge of this tax.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnTax.CatalogObjectId">
            <summary>
            The catalog object id referencing [CatalogTax](#type-catalogtax).
            </summary>
            <value>The catalog object id referencing [CatalogTax](#type-catalogtax).</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnTax.Name">
            <summary>
            The tax&#39;s name.
            </summary>
            <value>The tax&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnTax.Percentage">
            <summary>
            The percentage of the tax, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.
            </summary>
            <value>The percentage of the tax, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderReturnTax.AppliedMoney">
            <summary>
            The amount of the money applied by the tax in an order.
            </summary>
            <value>The amount of the money applied by the tax in an order.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnTax.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnTax.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnTax.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnTax.Equals(Square.Connect.Model.OrderReturnTax)">
            <summary>
            Returns true if OrderReturnTax instances are equal
            </summary>
            <param name="other">Instance of OrderReturnTax to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderReturnTax.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderRoundingAdjustment">
            <summary>
            A rounding adjustment of the money being returned. Commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderRoundingAdjustment.#ctor(System.String,System.String,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderRoundingAdjustment" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the rounding adjustment only within this order.  This field is read-only..</param>
            <param name="Name">The name of the rounding adjustment from the original sale Order..</param>
            <param name="AmountMoney">Actual rounding adjustment amount..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderRoundingAdjustment.Uid">
            <summary>
            Unique ID that identifies the rounding adjustment only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the rounding adjustment only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderRoundingAdjustment.Name">
            <summary>
            The name of the rounding adjustment from the original sale Order.
            </summary>
            <value>The name of the rounding adjustment from the original sale Order.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderRoundingAdjustment.AmountMoney">
            <summary>
            Actual rounding adjustment amount.
            </summary>
            <value>Actual rounding adjustment amount.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderRoundingAdjustment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderRoundingAdjustment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderRoundingAdjustment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderRoundingAdjustment.Equals(Square.Connect.Model.OrderRoundingAdjustment)">
            <summary>
            Returns true if OrderRoundingAdjustment instances are equal
            </summary>
            <param name="other">Instance of OrderRoundingAdjustment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderRoundingAdjustment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderServiceCharge">
            <summary>
            Represents a service charge applied to an order.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderServiceCharge.CalculationPhaseEnum">
            <summary>
            The calculation phase at which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
            </summary>
            <value>The calculation phase at which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.OrderServiceCharge.CalculationPhaseEnum.SUBTOTALPHASE">
            <summary>
            Enum SUBTOTALPHASE for "SUBTOTAL_PHASE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderServiceCharge.CalculationPhaseEnum.TOTALPHASE">
            <summary>
            Enum TOTALPHASE for "TOTAL_PHASE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.CalculationPhase">
            <summary>
            The calculation phase at which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
            </summary>
            <value>The calculation phase at which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.OrderServiceCharge.#ctor(System.String,System.String,System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.OrderServiceCharge.CalculationPhaseEnum},System.Nullable{System.Boolean},System.Collections.Generic.List{Square.Connect.Model.OrderLineItemTax})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderServiceCharge" /> class.
            </summary>
            <param name="Uid">Unique ID that identifies the service charge only within this order.  This field is read-only..</param>
            <param name="Name">The name of the service charge..</param>
            <param name="CatalogObjectId">The catalog object ID referencing the service charge [CatalogObject](#type-catalogobject)..</param>
            <param name="Percentage">The service charge percentage, as a string representation of a decimal number.  For example, &#x60;7.25&#x60; indicates 7.25%  Exactly one of &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set..</param>
            <param name="AmountMoney">The amount of a non-percentage based service charge.  Exactly one of &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set..</param>
            <param name="AppliedMoney">The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;.  For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. The &#x60;applied_money&#x60; field will include any inclusive tax amounts as well.  This field is read-only..</param>
            <param name="TotalMoney">The total amount of money to collect for the service charge.  Note that &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;.  This field is read-only..</param>
            <param name="TotalTaxMoney">The total amount of tax money to collect for the service charge.  This field is read-only..</param>
            <param name="CalculationPhase">The calculation phase at which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values.</param>
            <param name="Taxable">Indicates whether the service charge can be taxed. If set to &#x60;true&#x60;, any order-level taxes will automatically apply to this service charge. Note that service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable..</param>
            <param name="Taxes">Taxes applied to the service charge. By default, order-level taxes apply to service charges calculated in the &#x60;SUBTOTAL_PHASE&#x60; if &#x60;taxable&#x60; is set to &#x60;true&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.Uid">
            <summary>
            Unique ID that identifies the service charge only within this order.  This field is read-only.
            </summary>
            <value>Unique ID that identifies the service charge only within this order.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.Name">
            <summary>
            The name of the service charge.
            </summary>
            <value>The name of the service charge.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.CatalogObjectId">
            <summary>
            The catalog object ID referencing the service charge [CatalogObject](#type-catalogobject).
            </summary>
            <value>The catalog object ID referencing the service charge [CatalogObject](#type-catalogobject).</value>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.Percentage">
            <summary>
            The service charge percentage, as a string representation of a decimal number.  For example, &#x60;7.25&#x60; indicates 7.25%  Exactly one of &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set.
            </summary>
            <value>The service charge percentage, as a string representation of a decimal number.  For example, &#x60;7.25&#x60; indicates 7.25%  Exactly one of &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.AmountMoney">
            <summary>
            The amount of a non-percentage based service charge.  Exactly one of &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set.
            </summary>
            <value>The amount of a non-percentage based service charge.  Exactly one of &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.AppliedMoney">
            <summary>
            The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;.  For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. The &#x60;applied_money&#x60; field will include any inclusive tax amounts as well.  This field is read-only.
            </summary>
            <value>The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;.  For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. The &#x60;applied_money&#x60; field will include any inclusive tax amounts as well.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.TotalMoney">
            <summary>
            The total amount of money to collect for the service charge.  Note that &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;.  This field is read-only.
            </summary>
            <value>The total amount of money to collect for the service charge.  Note that &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.TotalTaxMoney">
            <summary>
            The total amount of tax money to collect for the service charge.  This field is read-only.
            </summary>
            <value>The total amount of tax money to collect for the service charge.  This field is read-only.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.Taxable">
            <summary>
            Indicates whether the service charge can be taxed. If set to &#x60;true&#x60;, any order-level taxes will automatically apply to this service charge. Note that service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable.
            </summary>
            <value>Indicates whether the service charge can be taxed. If set to &#x60;true&#x60;, any order-level taxes will automatically apply to this service charge. Note that service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable.</value>
        </member>
        <member name="P:Square.Connect.Model.OrderServiceCharge.Taxes">
            <summary>
            Taxes applied to the service charge. By default, order-level taxes apply to service charges calculated in the &#x60;SUBTOTAL_PHASE&#x60; if &#x60;taxable&#x60; is set to &#x60;true&#x60;.
            </summary>
            <value>Taxes applied to the service charge. By default, order-level taxes apply to service charges calculated in the &#x60;SUBTOTAL_PHASE&#x60; if &#x60;taxable&#x60; is set to &#x60;true&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderServiceCharge.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderServiceCharge.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderServiceCharge.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderServiceCharge.Equals(Square.Connect.Model.OrderServiceCharge)">
            <summary>
            Returns true if OrderServiceCharge instances are equal
            </summary>
            <param name="other">Instance of OrderServiceCharge to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderServiceCharge.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderServiceChargeCalculationPhase">
            <summary>
            Represents a phase in the process of calculating order totals. Service charges will be applied after the phase indicated.  [Read more about how order totals are calculated.](/orders-api/how-it-works#how-totals-are-calculated)
            </summary>
            <value>Represents a phase in the process of calculating order totals. Service charges will be applied after the phase indicated.  [Read more about how order totals are calculated.](/orders-api/how-it-works#how-totals-are-calculated)</value>
        </member>
        <member name="F:Square.Connect.Model.OrderServiceChargeCalculationPhase.SUBTOTALPHASE">
            <summary>
            Enum SUBTOTALPHASE for "SUBTOTAL_PHASE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderServiceChargeCalculationPhase.TOTALPHASE">
            <summary>
            Enum TOTALPHASE for "TOTAL_PHASE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.OrderSource">
            <summary>
            Represents the origination details of an order.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.OrderSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderSource" /> class.
            </summary>
            <param name="Name">The name used to identify the place (physical or digital) that an order originates. If unset, the name defaults to the name of the application that created the order..</param>
        </member>
        <member name="P:Square.Connect.Model.OrderSource.Name">
            <summary>
            The name used to identify the place (physical or digital) that an order originates. If unset, the name defaults to the name of the application that created the order.
            </summary>
            <value>The name used to identify the place (physical or digital) that an order originates. If unset, the name defaults to the name of the application that created the order.</value>
        </member>
        <member name="M:Square.Connect.Model.OrderSource.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderSource.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderSource.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderSource.Equals(Square.Connect.Model.OrderSource)">
            <summary>
            Returns true if OrderSource instances are equal
            </summary>
            <param name="other">Instance of OrderSource to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.OrderSource.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.OrderState">
            <summary>
            The state of the order.
            </summary>
            <value>The state of the order.</value>
        </member>
        <member name="F:Square.Connect.Model.OrderState.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderState.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.OrderState.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Product">
            <summary>
            Indicates the Square product used to generate an inventory change.
            </summary>
            <value>Indicates the Square product used to generate an inventory change.</value>
        </member>
        <member name="F:Square.Connect.Model.Product.SQUAREPOS">
            <summary>
            Enum SQUAREPOS for "SQUARE_POS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Product.EXTERNALAPI">
            <summary>
            Enum EXTERNALAPI for "EXTERNAL_API"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Product.BILLING">
            <summary>
            Enum BILLING for "BILLING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Product.APPOINTMENTS">
            <summary>
            Enum APPOINTMENTS for "APPOINTMENTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Product.INVOICES">
            <summary>
            Enum INVOICES for "INVOICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Product.ONLINESTORE">
            <summary>
            Enum ONLINESTORE for "ONLINE_STORE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Product.PAYROLL">
            <summary>
            Enum PAYROLL for "PAYROLL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Product.DASHBOARD">
            <summary>
            Enum DASHBOARD for "DASHBOARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Product.ITEMLIBRARYIMPORT">
            <summary>
            Enum ITEMLIBRARYIMPORT for "ITEM_LIBRARY_IMPORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Product.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Refund">
            <summary>
            Represents a refund processed for a Square transaction.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Refund.StatusEnum">
            <summary>
            The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`). See [RefundStatus](#type-refundstatus) for possible values
            </summary>
            <value>The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`). See [RefundStatus](#type-refundstatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.PENDING">
            <summary>
            Enum PENDING for "PENDING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.APPROVED">
            <summary>
            Enum APPROVED for "APPROVED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.REJECTED">
            <summary>
            Enum REJECTED for "REJECTED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Refund.Status">
            <summary>
            The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`). See [RefundStatus](#type-refundstatus) for possible values
            </summary>
            <value>The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`). See [RefundStatus](#type-refundstatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Refund.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Refund" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.Refund.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.Refund.StatusEnum},Square.Connect.Model.Money,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipient})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Refund" /> class.
            </summary>
            <param name="Id">The refund&#39;s unique ID. (required).</param>
            <param name="LocationId">The ID of the refund&#39;s associated location. (required).</param>
            <param name="TransactionId">The ID of the transaction that the refunded tender is part of. (required).</param>
            <param name="TenderId">The ID of the refunded tender. (required).</param>
            <param name="CreatedAt">The time when the refund was created, in RFC 3339 format..</param>
            <param name="Reason">The reason for the refund being issued. (required).</param>
            <param name="AmountMoney">The amount of money refunded to the buyer. (required).</param>
            <param name="Status">The current status of the refund (&#x60;PENDING&#x60;, &#x60;APPROVED&#x60;, &#x60;REJECTED&#x60;, or &#x60;FAILED&#x60;). See [RefundStatus](#type-refundstatus) for possible values (required).</param>
            <param name="ProcessingFeeMoney">The amount of Square processing fee money refunded to the *merchant*..</param>
            <param name="AdditionalRecipients">Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration..</param>
        </member>
        <member name="P:Square.Connect.Model.Refund.Id">
            <summary>
            The refund&#39;s unique ID.
            </summary>
            <value>The refund&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.Refund.LocationId">
            <summary>
            The ID of the refund&#39;s associated location.
            </summary>
            <value>The ID of the refund&#39;s associated location.</value>
        </member>
        <member name="P:Square.Connect.Model.Refund.TransactionId">
            <summary>
            The ID of the transaction that the refunded tender is part of.
            </summary>
            <value>The ID of the transaction that the refunded tender is part of.</value>
        </member>
        <member name="P:Square.Connect.Model.Refund.TenderId">
            <summary>
            The ID of the refunded tender.
            </summary>
            <value>The ID of the refunded tender.</value>
        </member>
        <member name="P:Square.Connect.Model.Refund.CreatedAt">
            <summary>
            The time when the refund was created, in RFC 3339 format.
            </summary>
            <value>The time when the refund was created, in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.Refund.Reason">
            <summary>
            The reason for the refund being issued.
            </summary>
            <value>The reason for the refund being issued.</value>
        </member>
        <member name="P:Square.Connect.Model.Refund.AmountMoney">
            <summary>
            The amount of money refunded to the buyer.
            </summary>
            <value>The amount of money refunded to the buyer.</value>
        </member>
        <member name="P:Square.Connect.Model.Refund.ProcessingFeeMoney">
            <summary>
            The amount of Square processing fee money refunded to the *merchant*.
            </summary>
            <value>The amount of Square processing fee money refunded to the *merchant*.</value>
        </member>
        <member name="P:Square.Connect.Model.Refund.AdditionalRecipients">
            <summary>
            Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration.
            </summary>
            <value>Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration.</value>
        </member>
        <member name="M:Square.Connect.Model.Refund.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Refund.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Refund.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Refund.Equals(Square.Connect.Model.Refund)">
            <summary>
            Returns true if Refund instances are equal
            </summary>
            <param name="other">Instance of Refund to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Refund.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RefundStatus">
            <summary>
            Indicates a refund's current status.
            </summary>
            <value>Indicates a refund's current status.</value>
        </member>
        <member name="F:Square.Connect.Model.RefundStatus.PENDING">
            <summary>
            Enum PENDING for "PENDING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.RefundStatus.APPROVED">
            <summary>
            Enum APPROVED for "APPROVED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.RefundStatus.REJECTED">
            <summary>
            Enum REJECTED for "REJECTED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.RefundStatus.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.RegisterDomainRequest">
            <summary>
            Defines the parameters that can be included in the body of a request to the RegisterDomain endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RegisterDomainRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RegisterDomainRequest" /> class.
            </summary>
            <param name="DomainName">A domain name as described in RFC-1034 that will be registered with ApplePay (required).</param>
        </member>
        <member name="P:Square.Connect.Model.RegisterDomainRequest.DomainName">
            <summary>
            A domain name as described in RFC-1034 that will be registered with ApplePay
            </summary>
            <value>A domain name as described in RFC-1034 that will be registered with ApplePay</value>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.Equals(Square.Connect.Model.RegisterDomainRequest)">
            <summary>
            Returns true if RegisterDomainRequest instances are equal
            </summary>
            <param name="other">Instance of RegisterDomainRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RegisterDomainResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the RegisterDomain endpoint.  Either &#x60;errors&#x60; or &#x60;status&#x60; will be present in a given response (never both).
            </summary>
        </member>
        <member name="T:Square.Connect.Model.RegisterDomainResponse.StatusEnum">
            <summary>
            Status of the domain registration. See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values
            </summary>
            <value>Status of the domain registration. See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.RegisterDomainResponse.StatusEnum.PENDING">
            <summary>
            Enum PENDING for "PENDING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.RegisterDomainResponse.StatusEnum.VERIFIED">
            <summary>
            Enum VERIFIED for "VERIFIED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.RegisterDomainResponse.Status">
            <summary>
            Status of the domain registration. See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values
            </summary>
            <value>Status of the domain registration. See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Nullable{Square.Connect.Model.RegisterDomainResponse.StatusEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RegisterDomainResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Status">Status of the domain registration. See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.RegisterDomainResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.Equals(Square.Connect.Model.RegisterDomainResponse)">
            <summary>
            Returns true if RegisterDomainResponse instances are equal
            </summary>
            <param name="other">Instance of RegisterDomainResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RegisterDomainResponseStatus">
            <summary>
            The status of domain registration.
            </summary>
            <value>The status of domain registration.</value>
        </member>
        <member name="F:Square.Connect.Model.RegisterDomainResponseStatus.PENDING">
            <summary>
            Enum PENDING for "PENDING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.RegisterDomainResponseStatus.VERIFIED">
            <summary>
            Enum VERIFIED for "VERIFIED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.RenewTokenRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RenewTokenRequest" /> class.
            </summary>
            <param name="AccessToken">The token you want to renew..</param>
        </member>
        <member name="P:Square.Connect.Model.RenewTokenRequest.AccessToken">
            <summary>
            The token you want to renew.
            </summary>
            <value>The token you want to renew.</value>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenRequest.Equals(Square.Connect.Model.RenewTokenRequest)">
            <summary>
            Returns true if RenewTokenRequest instances are equal
            </summary>
            <param name="other">Instance of RenewTokenRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RenewTokenResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenResponse.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RenewTokenResponse" /> class.
            </summary>
            <param name="AccessToken">The renewed access token. This value might be different from the &#x60;access_token&#x60; you provided in your request. You provide this token in a header with every request to Connect API endpoints. See [Request and response headers](https://docs.connect.squareup.com/api/connect/v2/#requestandresponseheaders) for the format of this header..</param>
            <param name="TokenType">This value is always _bearer_..</param>
            <param name="ExpiresAt">The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format..</param>
            <param name="MerchantId">The ID of the authorizing merchant&#39;s business..</param>
            <param name="SubscriptionId">__LEGACY FIELD__. The ID of the merchant subscription associated with the authorization. Only present if the merchant signed up for a subscription during authorization..</param>
            <param name="PlanId">__LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization..</param>
        </member>
        <member name="P:Square.Connect.Model.RenewTokenResponse.AccessToken">
            <summary>
            The renewed access token. This value might be different from the &#x60;access_token&#x60; you provided in your request. You provide this token in a header with every request to Connect API endpoints. See [Request and response headers](https://docs.connect.squareup.com/api/connect/v2/#requestandresponseheaders) for the format of this header.
            </summary>
            <value>The renewed access token. This value might be different from the &#x60;access_token&#x60; you provided in your request. You provide this token in a header with every request to Connect API endpoints. See [Request and response headers](https://docs.connect.squareup.com/api/connect/v2/#requestandresponseheaders) for the format of this header.</value>
        </member>
        <member name="P:Square.Connect.Model.RenewTokenResponse.TokenType">
            <summary>
            This value is always _bearer_.
            </summary>
            <value>This value is always _bearer_.</value>
        </member>
        <member name="P:Square.Connect.Model.RenewTokenResponse.ExpiresAt">
            <summary>
            The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
            </summary>
            <value>The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.</value>
        </member>
        <member name="P:Square.Connect.Model.RenewTokenResponse.MerchantId">
            <summary>
            The ID of the authorizing merchant&#39;s business.
            </summary>
            <value>The ID of the authorizing merchant&#39;s business.</value>
        </member>
        <member name="P:Square.Connect.Model.RenewTokenResponse.SubscriptionId">
            <summary>
            __LEGACY FIELD__. The ID of the merchant subscription associated with the authorization. Only present if the merchant signed up for a subscription during authorization.
            </summary>
            <value>__LEGACY FIELD__. The ID of the merchant subscription associated with the authorization. Only present if the merchant signed up for a subscription during authorization.</value>
        </member>
        <member name="P:Square.Connect.Model.RenewTokenResponse.PlanId">
            <summary>
            __LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.
            </summary>
            <value>__LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.</value>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenResponse.Equals(Square.Connect.Model.RenewTokenResponse)">
            <summary>
            Returns true if RenewTokenResponse instances are equal
            </summary>
            <param name="other">Instance of RenewTokenResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RenewTokenResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveCatalogObjectRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCatalogObjectRequest" /> class.
            </summary>
            <param name="IncludeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60;.</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveCatalogObjectRequest.IncludeRelatedObjects">
            <summary>
            If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60;
            </summary>
            <value>If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the &#x60;related_objects&#x60; field of  the response.  Default value: &#x60;false&#x60;</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.Equals(Square.Connect.Model.RetrieveCatalogObjectRequest)">
            <summary>
            Returns true if RetrieveCatalogObjectRequest instances are equal
            </summary>
            <param name="other">Instance of RetrieveCatalogObjectRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveCatalogObjectResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.CatalogObject,System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCatalogObjectResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="_Object">The [CatalogObject](#type-catalogobject)s returned..</param>
            <param name="RelatedObjects">A list of [CatalogObject](#type-catalogobject)s referenced by the object in the &#x60;object&#x60; field..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveCatalogObjectResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveCatalogObjectResponse._Object">
            <summary>
            The [CatalogObject](#type-catalogobject)s returned.
            </summary>
            <value>The [CatalogObject](#type-catalogobject)s returned.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveCatalogObjectResponse.RelatedObjects">
            <summary>
            A list of [CatalogObject](#type-catalogobject)s referenced by the object in the &#x60;object&#x60; field.
            </summary>
            <value>A list of [CatalogObject](#type-catalogobject)s referenced by the object in the &#x60;object&#x60; field.</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.Equals(Square.Connect.Model.RetrieveCatalogObjectResponse)">
            <summary>
            Returns true if RetrieveCatalogObjectResponse instances are equal
            </summary>
            <param name="other">Instance of RetrieveCatalogObjectResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveCustomerRequest">
            <summary>
            Defines the fields that are included in requests to the RetrieveCustomer endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCustomerRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.Equals(Square.Connect.Model.RetrieveCustomerRequest)">
            <summary>
            Returns true if RetrieveCustomerRequest instances are equal
            </summary>
            <param name="other">Instance of RetrieveCustomerRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveCustomerResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the RetrieveCustomer endpoint.  One of &#x60;errors&#x60; or &#x60;customer&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCustomerResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Customer">The requested customer..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveCustomerResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveCustomerResponse.Customer">
            <summary>
            The requested customer.
            </summary>
            <value>The requested customer.</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.Equals(Square.Connect.Model.RetrieveCustomerResponse)">
            <summary>
            Returns true if RetrieveCustomerResponse instances are equal
            </summary>
            <param name="other">Instance of RetrieveCustomerResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveEmployeeRequest">
            <summary>
            Retrieve an employee by &#x60;Employee.id&#x60;
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveEmployeeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeRequest.Equals(Square.Connect.Model.RetrieveEmployeeRequest)">
            <summary>
            Returns true if RetrieveEmployeeRequest instances are equal
            </summary>
            <param name="other">Instance of RetrieveEmployeeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveEmployeeResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the RetrieveEmployee endpoint.  One of &#x60;errors&#x60; or &#x60;employee&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeResponse.#ctor(Square.Connect.Model.Employee,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveEmployeeResponse" /> class.
            </summary>
            <param name="Employee">The response object..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveEmployeeResponse.Employee">
            <summary>
            The response object.
            </summary>
            <value>The response object.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveEmployeeResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeResponse.Equals(Square.Connect.Model.RetrieveEmployeeResponse)">
            <summary>
            Returns true if RetrieveEmployeeResponse instances are equal
            </summary>
            <param name="other">Instance of RetrieveEmployeeResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveEmployeeResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveInventoryAdjustmentRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveInventoryAdjustmentRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentRequest.Equals(Square.Connect.Model.RetrieveInventoryAdjustmentRequest)">
            <summary>
            Returns true if RetrieveInventoryAdjustmentRequest instances are equal
            </summary>
            <param name="other">Instance of RetrieveInventoryAdjustmentRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveInventoryAdjustmentResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.InventoryAdjustment)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveInventoryAdjustmentResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Adjustment">The requested [InventoryAdjustment](#type-inventoryadjustment)..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryAdjustmentResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryAdjustmentResponse.Adjustment">
            <summary>
            The requested [InventoryAdjustment](#type-inventoryadjustment).
            </summary>
            <value>The requested [InventoryAdjustment](#type-inventoryadjustment).</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentResponse.Equals(Square.Connect.Model.RetrieveInventoryAdjustmentResponse)">
            <summary>
            Returns true if RetrieveInventoryAdjustmentResponse instances are equal
            </summary>
            <param name="other">Instance of RetrieveInventoryAdjustmentResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryAdjustmentResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveInventoryChangesRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveInventoryChangesRequest" /> class.
            </summary>
            <param name="LocationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations..</param>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryChangesRequest.LocationIds">
            <summary>
            The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations.
            </summary>
            <value>The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryChangesRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesRequest.Equals(Square.Connect.Model.RetrieveInventoryChangesRequest)">
            <summary>
            Returns true if RetrieveInventoryChangesRequest instances are equal
            </summary>
            <param name="other">Instance of RetrieveInventoryChangesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveInventoryChangesResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.InventoryChange},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveInventoryChangesResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Changes">The set of inventory changes for the requested object and locations..</param>
            <param name="Cursor">The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryChangesResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryChangesResponse.Changes">
            <summary>
            The set of inventory changes for the requested object and locations.
            </summary>
            <value>The set of inventory changes for the requested object and locations.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryChangesResponse.Cursor">
            <summary>
            The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesResponse.Equals(Square.Connect.Model.RetrieveInventoryChangesResponse)">
            <summary>
            Returns true if RetrieveInventoryChangesResponse instances are equal
            </summary>
            <param name="other">Instance of RetrieveInventoryChangesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryChangesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveInventoryCountRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveInventoryCountRequest" /> class.
            </summary>
            <param name="LocationIds">The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations..</param>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryCountRequest.LocationIds">
            <summary>
            The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations.
            </summary>
            <value>The [Location](#type-location) IDs to look up as a comma-separated list. An empty list queries all locations.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryCountRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountRequest.Equals(Square.Connect.Model.RetrieveInventoryCountRequest)">
            <summary>
            Returns true if RetrieveInventoryCountRequest instances are equal
            </summary>
            <param name="other">Instance of RetrieveInventoryCountRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveInventoryCountResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.InventoryCount},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveInventoryCountResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Counts">The current calculated inventory counts for the requested object and locations..</param>
            <param name="Cursor">The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryCountResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryCountResponse.Counts">
            <summary>
            The current calculated inventory counts for the requested object and locations.
            </summary>
            <value>The current calculated inventory counts for the requested object and locations.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryCountResponse.Cursor">
            <summary>
            The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountResponse.Equals(Square.Connect.Model.RetrieveInventoryCountResponse)">
            <summary>
            Returns true if RetrieveInventoryCountResponse instances are equal
            </summary>
            <param name="other">Instance of RetrieveInventoryCountResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryCountResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveInventoryPhysicalCountRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveInventoryPhysicalCountRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountRequest.Equals(Square.Connect.Model.RetrieveInventoryPhysicalCountRequest)">
            <summary>
            Returns true if RetrieveInventoryPhysicalCountRequest instances are equal
            </summary>
            <param name="other">Instance of RetrieveInventoryPhysicalCountRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.InventoryPhysicalCount)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Count">The requested [InventoryPhysicalCount](#type-inventoryphysicalcount)..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse.Count">
            <summary>
            The requested [InventoryPhysicalCount](#type-inventoryphysicalcount).
            </summary>
            <value>The requested [InventoryPhysicalCount](#type-inventoryphysicalcount).</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse.Equals(Square.Connect.Model.RetrieveInventoryPhysicalCountResponse)">
            <summary>
            Returns true if RetrieveInventoryPhysicalCountResponse instances are equal
            </summary>
            <param name="other">Instance of RetrieveInventoryPhysicalCountResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveInventoryPhysicalCountResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveTransactionRequest">
            <summary>
            Defines the request body fields for calls to the RetrieveTransaction endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveTransactionRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.Equals(Square.Connect.Model.RetrieveTransactionRequest)">
            <summary>
            Returns true if RetrieveTransactionRequest instances are equal
            </summary>
            <param name="other">Instance of RetrieveTransactionRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RetrieveTransactionResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the RetrieveTransaction endpoint.  One of &#x60;errors&#x60; or &#x60;transaction&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Transaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveTransactionResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Transaction">The requested transaction..</param>
        </member>
        <member name="P:Square.Connect.Model.RetrieveTransactionResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.RetrieveTransactionResponse.Transaction">
            <summary>
            The requested transaction.
            </summary>
            <value>The requested transaction.</value>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.Equals(Square.Connect.Model.RetrieveTransactionResponse)">
            <summary>
            Returns true if RetrieveTransactionResponse instances are equal
            </summary>
            <param name="other">Instance of RetrieveTransactionResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RevokeTokenRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RevokeTokenRequest" /> class.
            </summary>
            <param name="ClientId">Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps)..</param>
            <param name="AccessToken">The access token of the merchant whose token you want to revoke. Do not provide a value for merchant_id if you provide this parameter..</param>
            <param name="MerchantId">The ID of the merchant whose token you want to revoke. Do not provide a value for access_token if you provide this parameter..</param>
        </member>
        <member name="P:Square.Connect.Model.RevokeTokenRequest.ClientId">
            <summary>
            Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).
            </summary>
            <value>Your application&#39;s ID, available from the [application dashboard](https://connect.squareup.com/apps).</value>
        </member>
        <member name="P:Square.Connect.Model.RevokeTokenRequest.AccessToken">
            <summary>
            The access token of the merchant whose token you want to revoke. Do not provide a value for merchant_id if you provide this parameter.
            </summary>
            <value>The access token of the merchant whose token you want to revoke. Do not provide a value for merchant_id if you provide this parameter.</value>
        </member>
        <member name="P:Square.Connect.Model.RevokeTokenRequest.MerchantId">
            <summary>
            The ID of the merchant whose token you want to revoke. Do not provide a value for access_token if you provide this parameter.
            </summary>
            <value>The ID of the merchant whose token you want to revoke. Do not provide a value for access_token if you provide this parameter.</value>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenRequest.Equals(Square.Connect.Model.RevokeTokenRequest)">
            <summary>
            Returns true if RevokeTokenRequest instances are equal
            </summary>
            <param name="other">Instance of RevokeTokenRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.RevokeTokenResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenResponse.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.RevokeTokenResponse" /> class.
            </summary>
            <param name="Success">If the request is successful, this is true..</param>
        </member>
        <member name="P:Square.Connect.Model.RevokeTokenResponse.Success">
            <summary>
            If the request is successful, this is true.
            </summary>
            <value>If the request is successful, this is true.</value>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenResponse.Equals(Square.Connect.Model.RevokeTokenResponse)">
            <summary>
            Returns true if RevokeTokenResponse instances are equal
            </summary>
            <param name="other">Instance of RevokeTokenResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.RevokeTokenResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchCatalogObjectsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum">
            <summary>
            Gets or Sets ObjectTypes
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.ITEM">
            <summary>
            Enum ITEM for "ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.IMAGE">
            <summary>
            Enum IMAGE for "IMAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.CATEGORY">
            <summary>
            Enum CATEGORY for "CATEGORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.ITEMVARIATION">
            <summary>
            Enum ITEMVARIATION for "ITEM_VARIATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.TAX">
            <summary>
            Enum TAX for "TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.DISCOUNT">
            <summary>
            Enum DISCOUNT for "DISCOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.MODIFIERLIST">
            <summary>
            Enum MODIFIERLIST for "MODIFIER_LIST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.MODIFIER">
            <summary>
            Enum MODIFIER for "MODIFIER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.PRICINGRULE">
            <summary>
            Enum PRICINGRULE for "PRICING_RULE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.PRODUCTSET">
            <summary>
            Enum PRODUCTSET for "PRODUCT_SET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.TIMEPERIOD">
            <summary>
            Enum TIMEPERIOD for "TIME_PERIOD"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypes">
            <summary>
            The desired set of object types to appear in the search results. The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. See [CatalogObjectType](#type-catalogobjecttype) for possible values
            </summary>
            <value>The desired set of object types to appear in the search results. The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. See [CatalogObjectType](#type-catalogobjecttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.#ctor(System.String,System.Collections.Generic.List{Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,Square.Connect.Model.CatalogQuery,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchCatalogObjectsRequest" /> class.
            </summary>
            <param name="Cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information..</param>
            <param name="ObjectTypes">The desired set of object types to appear in the search results. The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely &#x60;\&quot;ITEM\&quot;&#x60;, &#x60;\&quot;ITEM_VARIATION\&quot;&#x60;, &#x60;\&quot;CATEGORY\&quot;&#x60;, &#x60;\&quot;DISCOUNT\&quot;&#x60;, &#x60;\&quot;TAX\&quot;&#x60;, &#x60;\&quot;MODIFIER\&quot;&#x60;, or &#x60;\&quot;MODIFIER_LIST\&quot;&#x60;. See [CatalogObjectType](#type-catalogobjecttype) for possible values.</param>
            <param name="IncludeDeletedObjects">If &#x60;true&#x60;, deleted objects will be included in the results. Deleted objects will have their &#x60;is_deleted&#x60; field set to &#x60;true&#x60;..</param>
            <param name="IncludeRelatedObjects">If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If a [CatalogItem](#type-catalogitem) is returned in the object field of the response, its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be included in the &#x60;related_objects&#x60; field of the response.  If a [CatalogItemVariation](#type-catalogitemvariation) is returned in the object field of the response, its parent [CatalogItem](#type-catalogitem) will be included in the &#x60;related_objects&#x60; field of the response..</param>
            <param name="BeginTime">Return objects modified after this [timestamp](#workingwithdates), in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. The timestamp is exclusive - objects with a timestamp equal to &#x60;begin_time&#x60; will not be included in the response..</param>
            <param name="Query">A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned..</param>
            <param name="Limit">A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.Cursor">
            <summary>
            The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.IncludeDeletedObjects">
            <summary>
            If &#x60;true&#x60;, deleted objects will be included in the results. Deleted objects will have their &#x60;is_deleted&#x60; field set to &#x60;true&#x60;.
            </summary>
            <value>If &#x60;true&#x60;, deleted objects will be included in the results. Deleted objects will have their &#x60;is_deleted&#x60; field set to &#x60;true&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.IncludeRelatedObjects">
            <summary>
            If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If a [CatalogItem](#type-catalogitem) is returned in the object field of the response, its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be included in the &#x60;related_objects&#x60; field of the response.  If a [CatalogItemVariation](#type-catalogitemvariation) is returned in the object field of the response, its parent [CatalogItem](#type-catalogitem) will be included in the &#x60;related_objects&#x60; field of the response.
            </summary>
            <value>If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If a [CatalogItem](#type-catalogitem) is returned in the object field of the response, its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, [CatalogImage](#type-catalogimage)s and [CatalogModifierList](#type-catalogmodifierlist)s will be included in the &#x60;related_objects&#x60; field of the response.  If a [CatalogItemVariation](#type-catalogitemvariation) is returned in the object field of the response, its parent [CatalogItem](#type-catalogitem) will be included in the &#x60;related_objects&#x60; field of the response.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.BeginTime">
            <summary>
            Return objects modified after this [timestamp](#workingwithdates), in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. The timestamp is exclusive - objects with a timestamp equal to &#x60;begin_time&#x60; will not be included in the response.
            </summary>
            <value>Return objects modified after this [timestamp](#workingwithdates), in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. The timestamp is exclusive - objects with a timestamp equal to &#x60;begin_time&#x60; will not be included in the response.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.Query">
            <summary>
            A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned.
            </summary>
            <value>A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.Limit">
            <summary>
            A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored.
            </summary>
            <value>A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.Equals(Square.Connect.Model.SearchCatalogObjectsRequest)">
            <summary>
            Returns true if SearchCatalogObjectsRequest instances are equal
            </summary>
            <param name="other">Instance of SearchCatalogObjectsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchCatalogObjectsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogObject},System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchCatalogObjectsResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="Cursor">The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information..</param>
            <param name="Objects">The [CatalogObject](#type-catalogobject)s returned..</param>
            <param name="RelatedObjects">A list of [CatalogObject](#type-catalogobject)s referenced by the objects in the &#x60;objects&#x60; field..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsResponse.Cursor">
            <summary>
            The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsResponse.Objects">
            <summary>
            The [CatalogObject](#type-catalogobject)s returned.
            </summary>
            <value>The [CatalogObject](#type-catalogobject)s returned.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsResponse.RelatedObjects">
            <summary>
            A list of [CatalogObject](#type-catalogobject)s referenced by the objects in the &#x60;objects&#x60; field.
            </summary>
            <value>A list of [CatalogObject](#type-catalogobject)s referenced by the objects in the &#x60;objects&#x60; field.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.Equals(Square.Connect.Model.SearchCatalogObjectsResponse)">
            <summary>
            Returns true if SearchCatalogObjectsResponse instances are equal
            </summary>
            <param name="other">Instance of SearchCatalogObjectsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchCustomersRequest">
            <summary>
            Defines the fields included in the request body for the SearchCustomers endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersRequest.#ctor(System.String,System.Nullable{System.Int64},Square.Connect.Model.CustomerQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchCustomersRequest" /> class.
            </summary>
            <param name="Cursor">Include the pagination cursor in subsequent calls to this endpoint to retrieve the next set of results associated with the original query.  See [Pagination](/basics/api101/pagination) for more information..</param>
            <param name="Limit">A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored..</param>
            <param name="Query">Query customers based on the given conditions and sort order. Calling SearchCustomers without an explicit query parameter will return all customers ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchCustomersRequest.Cursor">
            <summary>
            Include the pagination cursor in subsequent calls to this endpoint to retrieve the next set of results associated with the original query.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>Include the pagination cursor in subsequent calls to this endpoint to retrieve the next set of results associated with the original query.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCustomersRequest.Limit">
            <summary>
            A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored.
            </summary>
            <value>A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCustomersRequest.Query">
            <summary>
            Query customers based on the given conditions and sort order. Calling SearchCustomers without an explicit query parameter will return all customers ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.
            </summary>
            <value>Query customers based on the given conditions and sort order. Calling SearchCustomers without an explicit query parameter will return all customers ordered alphabetically based on &#x60;given_name&#x60; and &#x60;family_name&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersRequest.Equals(Square.Connect.Model.SearchCustomersRequest)">
            <summary>
            Returns true if SearchCustomersRequest instances are equal
            </summary>
            <param name="other">Instance of SearchCustomersRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchCustomersResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the SearchCustomers endpoint.  One of &#x60;errors&#x60; or &#x60;customers&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Customer},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchCustomersResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Customers">An array of &#x60;Customer&#x60; objects that match a query..</param>
            <param name="Cursor">A pagination cursor that can be used during subsequent calls to SearchCustomers to retrieve the next set of results associated with the original query. Pagination cursors are only present when a request succeeds and additional results are available.  See [Pagination](/basics/api101/pagination) for more information..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchCustomersResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCustomersResponse.Customers">
            <summary>
            An array of &#x60;Customer&#x60; objects that match a query.
            </summary>
            <value>An array of &#x60;Customer&#x60; objects that match a query.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchCustomersResponse.Cursor">
            <summary>
            A pagination cursor that can be used during subsequent calls to SearchCustomers to retrieve the next set of results associated with the original query. Pagination cursors are only present when a request succeeds and additional results are available.  See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor that can be used during subsequent calls to SearchCustomers to retrieve the next set of results associated with the original query. Pagination cursors are only present when a request succeeds and additional results are available.  See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersResponse.Equals(Square.Connect.Model.SearchCustomersResponse)">
            <summary>
            Returns true if SearchCustomersResponse instances are equal
            </summary>
            <param name="other">Instance of SearchCustomersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchCustomersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersCustomerFilter">
            <summary>
            Filter based on Order &#x60;customer_id&#x60; and any Tender &#x60;customer_id&#x60; associated with the Order. Does not filter based on the [FulfillmentRecipient](#type-orderfulfillmentrecipient) &#x60;customer_id&#x60;.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersCustomerFilter.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersCustomerFilter" /> class.
            </summary>
            <param name="CustomerIds">Filter by orders with any of the listed &#x60;customer_id&#x60;s.  Max: 10 &#x60;customer_id&#x60;s..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersCustomerFilter.CustomerIds">
            <summary>
            Filter by orders with any of the listed &#x60;customer_id&#x60;s.  Max: 10 &#x60;customer_id&#x60;s.
            </summary>
            <value>Filter by orders with any of the listed &#x60;customer_id&#x60;s.  Max: 10 &#x60;customer_id&#x60;s.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersCustomerFilter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersCustomerFilter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersCustomerFilter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersCustomerFilter.Equals(Square.Connect.Model.SearchOrdersCustomerFilter)">
            <summary>
            Returns true if SearchOrdersCustomerFilter instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersCustomerFilter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersCustomerFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersDateTimeFilter">
            <summary>
            Filter for &#x60;Order&#x60; objects based on whether their &#x60;CREATED_AT&#x60;, &#x60;CLOSED_AT&#x60; or &#x60;UPDATED_AT&#x60; timestamps fall within a specified time range. You can specify the time range and which timestamp to filter for. You can filter for only one time range at a time.  For each time range, the start time and end time are inclusive. If the end time is absent, it defaults to the time of the first request for the cursor.  __Important:__ If you use the DateTimeFilter to filter for &#x60;CLOSED_AT&#x60; or &#x60;UPDATED_AT&#x60;, you must also set the [OrdersSort](#type-searchorderordersort). The TimeRange used in DateTimeFilter must correspond to the &#x60;sort_field&#x60; in the [OrdersSort](#type-searchorderordersort) object.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersDateTimeFilter.#ctor(Square.Connect.Model.TimeRange,Square.Connect.Model.TimeRange,Square.Connect.Model.TimeRange)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersDateTimeFilter" /> class.
            </summary>
            <param name="CreatedAt">Time range for filtering on the &#x60;created_at&#x60; timestamp..</param>
            <param name="UpdatedAt">Time range for filtering on the &#x60;updated_at&#x60; timestamp..</param>
            <param name="ClosedAt">Time range for filtering on the &#x60;closed_at&#x60; timestamp..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersDateTimeFilter.CreatedAt">
            <summary>
            Time range for filtering on the &#x60;created_at&#x60; timestamp.
            </summary>
            <value>Time range for filtering on the &#x60;created_at&#x60; timestamp.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersDateTimeFilter.UpdatedAt">
            <summary>
            Time range for filtering on the &#x60;updated_at&#x60; timestamp.
            </summary>
            <value>Time range for filtering on the &#x60;updated_at&#x60; timestamp.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersDateTimeFilter.ClosedAt">
            <summary>
            Time range for filtering on the &#x60;closed_at&#x60; timestamp.
            </summary>
            <value>Time range for filtering on the &#x60;closed_at&#x60; timestamp.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersDateTimeFilter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersDateTimeFilter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersDateTimeFilter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersDateTimeFilter.Equals(Square.Connect.Model.SearchOrdersDateTimeFilter)">
            <summary>
            Returns true if SearchOrdersDateTimeFilter instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersDateTimeFilter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersDateTimeFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersFilter">
            <summary>
            Filter options to use for a query. Multiple filters will be ANDed together.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFilter.#ctor(Square.Connect.Model.SearchOrdersStateFilter,Square.Connect.Model.SearchOrdersDateTimeFilter,Square.Connect.Model.SearchOrdersFulfillmentFilter,Square.Connect.Model.SearchOrdersSourceFilter,Square.Connect.Model.SearchOrdersCustomerFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersFilter" /> class.
            </summary>
            <param name="StateFilter">Filter by [&#x60;OrderState&#x60;](#type-orderstate)..</param>
            <param name="DateTimeFilter">Filter for results within a time range..</param>
            <param name="FulfillmentFilter">Filter by fulfillment type or state..</param>
            <param name="SourceFilter">Filter by source of order..</param>
            <param name="CustomerFilter">Filter by customers associated with the order..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersFilter.StateFilter">
            <summary>
            Filter by [&#x60;OrderState&#x60;](#type-orderstate).
            </summary>
            <value>Filter by [&#x60;OrderState&#x60;](#type-orderstate).</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersFilter.DateTimeFilter">
            <summary>
            Filter for results within a time range.
            </summary>
            <value>Filter for results within a time range.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersFilter.FulfillmentFilter">
            <summary>
            Filter by fulfillment type or state.
            </summary>
            <value>Filter by fulfillment type or state.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersFilter.SourceFilter">
            <summary>
            Filter by source of order.
            </summary>
            <value>Filter by source of order.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersFilter.CustomerFilter">
            <summary>
            Filter by customers associated with the order.
            </summary>
            <value>Filter by customers associated with the order.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFilter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFilter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFilter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFilter.Equals(Square.Connect.Model.SearchOrdersFilter)">
            <summary>
            Returns true if SearchOrdersFilter instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersFilter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersFulfillmentFilter">
            <summary>
            Filter based on [Order Fulfillment](#type-orderfulfillment) information.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentTypesEnum">
            <summary>
            Gets or Sets FulfillmentTypes
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentTypesEnum.PICKUP">
            <summary>
            Enum PICKUP for "PICKUP"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentStatesEnum">
            <summary>
            Gets or Sets FulfillmentStates
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentStatesEnum.PROPOSED">
            <summary>
            Enum PROPOSED for "PROPOSED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentStatesEnum.RESERVED">
            <summary>
            Enum RESERVED for "RESERVED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentStatesEnum.PREPARED">
            <summary>
            Enum PREPARED for "PREPARED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentStatesEnum.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentStatesEnum.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentStatesEnum.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentTypes">
            <summary>
            List of [fulfillment types](#type-orderfulfillmenttype) to filter for. Will return orders if any of its fulfillments match any of the fulfillment types listed in this field. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values
            </summary>
            <value>List of [fulfillment types](#type-orderfulfillmenttype) to filter for. Will return orders if any of its fulfillments match any of the fulfillment types listed in this field. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentStates">
            <summary>
            List of [fulfillment states](#type-orderfulfillmentstate) to filter for. Will return orders if any of its fulfillments match any of the fulfillment states listed in this field. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values
            </summary>
            <value>List of [fulfillment states](#type-orderfulfillmentstate) to filter for. Will return orders if any of its fulfillments match any of the fulfillment states listed in this field. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFulfillmentFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersFulfillmentFilter" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFulfillmentFilter.#ctor(System.Collections.Generic.List{Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentTypesEnum},System.Collections.Generic.List{Square.Connect.Model.SearchOrdersFulfillmentFilter.FulfillmentStatesEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersFulfillmentFilter" /> class.
            </summary>
            <param name="FulfillmentTypes">List of [fulfillment types](#type-orderfulfillmenttype) to filter for. Will return orders if any of its fulfillments match any of the fulfillment types listed in this field. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values (required).</param>
            <param name="FulfillmentStates">List of [fulfillment states](#type-orderfulfillmentstate) to filter for. Will return orders if any of its fulfillments match any of the fulfillment states listed in this field. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values.</param>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFulfillmentFilter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFulfillmentFilter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFulfillmentFilter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFulfillmentFilter.Equals(Square.Connect.Model.SearchOrdersFulfillmentFilter)">
            <summary>
            Returns true if SearchOrdersFulfillmentFilter instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersFulfillmentFilter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersFulfillmentFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersQuery">
            <summary>
            Contains query criteria for the search.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersQuery.#ctor(Square.Connect.Model.SearchOrdersFilter,Square.Connect.Model.SearchOrdersSort)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersQuery" /> class.
            </summary>
            <param name="Filter">Criteria to filter results by..</param>
            <param name="Sort">Criteria to sort results by..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersQuery.Filter">
            <summary>
            Criteria to filter results by.
            </summary>
            <value>Criteria to filter results by.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersQuery.Sort">
            <summary>
            Criteria to sort results by.
            </summary>
            <value>Criteria to sort results by.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersQuery.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersQuery.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersQuery.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersQuery.Equals(Square.Connect.Model.SearchOrdersQuery)">
            <summary>
            Returns true if SearchOrdersQuery instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersQuery to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersQuery.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersRequest">
            <summary>
            The request does not have any required fields. When given no query criteria, SearchOrders will return all results for all of the merchant’s locations. When fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersRequest.#ctor(System.Collections.Generic.List{System.String},System.String,Square.Connect.Model.SearchOrdersQuery,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersRequest" /> class.
            </summary>
            <param name="LocationIds">The location IDs for the orders to query. The caller must have access to all provided locations.  Min: 1 &#x60;location_ids&#x60;. Max: 10 &#x60;location_ids&#x60;..</param>
            <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query. See [Pagination](/basics/api101/pagination) for more information..</param>
            <param name="Query">Query conditions used to filter or sort the results. Note that when fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results..</param>
            <param name="Limit">Number of results to be returned in a single page. SearchOrders may use a smaller limit than specified depending on server load. If the response includes a &#x60;cursor&#x60; field, you can use it to retrieve the next set of results. Default: &#x60;500&#x60;.</param>
            <param name="ReturnEntries"> If set to &#x60;true&#x60;, SearchOrders will return [&#x60;OrderEntry&#x60;](#type-orderentry) objects instead of &#x60;Order&#x60; objects. &#x60;OrderEntry&#x60; objects are lightweight descriptions of orders that include &#x60;order_id&#x60;s.  Default: &#x60;false&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersRequest.LocationIds">
            <summary>
            The location IDs for the orders to query. The caller must have access to all provided locations.  Min: 1 &#x60;location_ids&#x60;. Max: 10 &#x60;location_ids&#x60;.
            </summary>
            <value>The location IDs for the orders to query. The caller must have access to all provided locations.  Min: 1 &#x60;location_ids&#x60;. Max: 10 &#x60;location_ids&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersRequest.Cursor">
            <summary>
            A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query. See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query. See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersRequest.Query">
            <summary>
            Query conditions used to filter or sort the results. Note that when fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.
            </summary>
            <value>Query conditions used to filter or sort the results. Note that when fetching additional pages using a &#x60;cursor&#x60;, the &#x60;query&#x60; must be equal to the &#x60;query&#x60; used to fetch the first page of results.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersRequest.Limit">
            <summary>
            Number of results to be returned in a single page. SearchOrders may use a smaller limit than specified depending on server load. If the response includes a &#x60;cursor&#x60; field, you can use it to retrieve the next set of results. Default: &#x60;500&#x60;
            </summary>
            <value>Number of results to be returned in a single page. SearchOrders may use a smaller limit than specified depending on server load. If the response includes a &#x60;cursor&#x60; field, you can use it to retrieve the next set of results. Default: &#x60;500&#x60;</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersRequest.ReturnEntries">
            <summary>
             If set to &#x60;true&#x60;, SearchOrders will return [&#x60;OrderEntry&#x60;](#type-orderentry) objects instead of &#x60;Order&#x60; objects. &#x60;OrderEntry&#x60; objects are lightweight descriptions of orders that include &#x60;order_id&#x60;s.  Default: &#x60;false&#x60;.
            </summary>
            <value> If set to &#x60;true&#x60;, SearchOrders will return [&#x60;OrderEntry&#x60;](#type-orderentry) objects instead of &#x60;Order&#x60; objects. &#x60;OrderEntry&#x60; objects are lightweight descriptions of orders that include &#x60;order_id&#x60;s.  Default: &#x60;false&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersRequest.Equals(Square.Connect.Model.SearchOrdersRequest)">
            <summary>
            Returns true if SearchOrdersRequest instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersResponse">
            <summary>
            Only one of &#x60;order_entries&#x60; or &#x60;orders&#x60; fields will be set, depending on whether &#x60;return_entries&#x60; was set on the [SearchOrdersRequest](#type-searchorderrequest).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.OrderEntry},System.Collections.Generic.List{Square.Connect.Model.Order},System.String,System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersResponse" /> class.
            </summary>
            <param name="OrderEntries">List of [OrderEntries](#type-orderentry) that fit the query conditions.  Populated only if &#x60;order_entries&#x60; was set to &#x60;true&#x60; in the request..</param>
            <param name="Orders">List of [Orders](#type-order) that match query conditions. Populated only if &#x60;return_entries&#x60; in the request is set to &#x60;false&#x60;..</param>
            <param name="Cursor">The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information..</param>
            <param name="Errors">[Errors](#type-error) encountered during the search..</param>
            <param name="UnconvertibleTransactionIds">List of transaction IDs identifying transactions that could not be converted to an &#x60;Order&#x60;. Empty if &#x60;return_entries&#x60; is true, however, attempts to retrieve those orders may encounter subsequent &#x60;unconvertible_transcation_ids&#x60; Note that this field will not be present after SearchOrders moves from BETA to GA..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersResponse.OrderEntries">
            <summary>
            List of [OrderEntries](#type-orderentry) that fit the query conditions.  Populated only if &#x60;order_entries&#x60; was set to &#x60;true&#x60; in the request.
            </summary>
            <value>List of [OrderEntries](#type-orderentry) that fit the query conditions.  Populated only if &#x60;order_entries&#x60; was set to &#x60;true&#x60; in the request.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersResponse.Orders">
            <summary>
            List of [Orders](#type-order) that match query conditions. Populated only if &#x60;return_entries&#x60; in the request is set to &#x60;false&#x60;.
            </summary>
            <value>List of [Orders](#type-order) that match query conditions. Populated only if &#x60;return_entries&#x60; in the request is set to &#x60;false&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersResponse.Cursor">
            <summary>
            The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information.
            </summary>
            <value>The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](/basics/api101/pagination) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersResponse.Errors">
            <summary>
            [Errors](#type-error) encountered during the search.
            </summary>
            <value>[Errors](#type-error) encountered during the search.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersResponse.UnconvertibleTransactionIds">
            <summary>
            List of transaction IDs identifying transactions that could not be converted to an &#x60;Order&#x60;. Empty if &#x60;return_entries&#x60; is true, however, attempts to retrieve those orders may encounter subsequent &#x60;unconvertible_transcation_ids&#x60; Note that this field will not be present after SearchOrders moves from BETA to GA.
            </summary>
            <value>List of transaction IDs identifying transactions that could not be converted to an &#x60;Order&#x60;. Empty if &#x60;return_entries&#x60; is true, however, attempts to retrieve those orders may encounter subsequent &#x60;unconvertible_transcation_ids&#x60; Note that this field will not be present after SearchOrders moves from BETA to GA.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersResponse.Equals(Square.Connect.Model.SearchOrdersResponse)">
            <summary>
            Returns true if SearchOrdersResponse instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersSort">
            <summary>
            Sorting options for a query. Returned Orders will always be sorted on a timestamp.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersSort.SortFieldEnum">
            <summary>
            The field to sort by.  __Important:__ When using a [DateTimeFilter](#type-searchordersfilter), `sort_field` must match the set time range field. If this field does not match the time range field in `DateTimeFilter`, SearchOrder will return an error.  Default: `CREATED_AT`. See [SearchOrdersSortField](#type-searchorderssortfield) for possible values
            </summary>
            <value>The field to sort by.  __Important:__ When using a [DateTimeFilter](#type-searchordersfilter), `sort_field` must match the set time range field. If this field does not match the time range field in `DateTimeFilter`, SearchOrder will return an error.  Default: `CREATED_AT`. See [SearchOrdersSortField](#type-searchorderssortfield) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersSort.SortFieldEnum.CREATEDAT">
            <summary>
            Enum CREATEDAT for "CREATED_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersSort.SortFieldEnum.UPDATEDAT">
            <summary>
            Enum UPDATEDAT for "UPDATED_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersSort.SortFieldEnum.CLOSEDAT">
            <summary>
            Enum CLOSEDAT for "CLOSED_AT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersSort.SortOrderEnum">
            <summary>
            The order in which results are returned. Defaults to `DESC`. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are returned. Defaults to `DESC`. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersSort.SortOrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersSort.SortOrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersSort.SortField">
            <summary>
            The field to sort by.  __Important:__ When using a [DateTimeFilter](#type-searchordersfilter), `sort_field` must match the set time range field. If this field does not match the time range field in `DateTimeFilter`, SearchOrder will return an error.  Default: `CREATED_AT`. See [SearchOrdersSortField](#type-searchorderssortfield) for possible values
            </summary>
            <value>The field to sort by.  __Important:__ When using a [DateTimeFilter](#type-searchordersfilter), `sort_field` must match the set time range field. If this field does not match the time range field in `DateTimeFilter`, SearchOrder will return an error.  Default: `CREATED_AT`. See [SearchOrdersSortField](#type-searchorderssortfield) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersSort.SortOrder">
            <summary>
            The order in which results are returned. Defaults to `DESC`. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are returned. Defaults to `DESC`. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersSort" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSort.#ctor(System.Nullable{Square.Connect.Model.SearchOrdersSort.SortFieldEnum},System.Nullable{Square.Connect.Model.SearchOrdersSort.SortOrderEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersSort" /> class.
            </summary>
            <param name="SortField">The field to sort by.  __Important:__ When using a [DateTimeFilter](#type-searchordersfilter), &#x60;sort_field&#x60; must match the set time range field. If this field does not match the time range field in &#x60;DateTimeFilter&#x60;, SearchOrder will return an error.  Default: &#x60;CREATED_AT&#x60;. See [SearchOrdersSortField](#type-searchorderssortfield) for possible values (required).</param>
            <param name="SortOrder">The order in which results are returned. Defaults to &#x60;DESC&#x60;. See [SortOrder](#type-sortorder) for possible values.</param>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSort.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSort.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSort.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSort.Equals(Square.Connect.Model.SearchOrdersSort)">
            <summary>
            Returns true if SearchOrdersSort instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersSort to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSort.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersSortField">
            <summary>
            Specifies which timestamp to use to sort SearchOrder results.
            </summary>
            <value>Specifies which timestamp to use to sort SearchOrder results.</value>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersSortField.CREATEDAT">
            <summary>
            Enum CREATEDAT for "CREATED_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersSortField.UPDATEDAT">
            <summary>
            Enum UPDATEDAT for "UPDATED_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersSortField.CLOSEDAT">
            <summary>
            Enum CLOSEDAT for "CLOSED_AT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersSourceFilter">
            <summary>
            Filter based on Order &#x60;source&#x60; information.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSourceFilter.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersSourceFilter" /> class.
            </summary>
            <param name="SourceNames">Filters by [Source](#type-ordersource) &#x60;name&#x60;. Will return any orders with with &#x60;source.name&#x60;s that match any of the listed source names.  Max: 10 &#x60;source_names&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersSourceFilter.SourceNames">
            <summary>
            Filters by [Source](#type-ordersource) &#x60;name&#x60;. Will return any orders with with &#x60;source.name&#x60;s that match any of the listed source names.  Max: 10 &#x60;source_names&#x60;.
            </summary>
            <value>Filters by [Source](#type-ordersource) &#x60;name&#x60;. Will return any orders with with &#x60;source.name&#x60;s that match any of the listed source names.  Max: 10 &#x60;source_names&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSourceFilter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSourceFilter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSourceFilter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSourceFilter.Equals(Square.Connect.Model.SearchOrdersSourceFilter)">
            <summary>
            Returns true if SearchOrdersSourceFilter instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersSourceFilter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersSourceFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersStateFilter">
            <summary>
            Filter by current Order &#x60;state&#x60;.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SearchOrdersStateFilter.StatesEnum">
            <summary>
            Gets or Sets States
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersStateFilter.StatesEnum.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersStateFilter.StatesEnum.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SearchOrdersStateFilter.StatesEnum.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.SearchOrdersStateFilter.States">
            <summary>
            States to filter for. See [OrderState](#type-orderstate) for possible values
            </summary>
            <value>States to filter for. See [OrderState](#type-orderstate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersStateFilter" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersStateFilter.#ctor(System.Collections.Generic.List{Square.Connect.Model.SearchOrdersStateFilter.StatesEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchOrdersStateFilter" /> class.
            </summary>
            <param name="States">States to filter for. See [OrderState](#type-orderstate) for possible values (required).</param>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersStateFilter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersStateFilter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersStateFilter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersStateFilter.Equals(Square.Connect.Model.SearchOrdersStateFilter)">
            <summary>
            Returns true if SearchOrdersStateFilter instances are equal
            </summary>
            <param name="other">Instance of SearchOrdersStateFilter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchOrdersStateFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchShiftsRequest">
            <summary>
            A request for a filtered and sorted set of &#x60;Shift&#x60; objects.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsRequest.#ctor(Square.Connect.Model.ShiftQuery,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchShiftsRequest" /> class.
            </summary>
            <param name="Query">Query filters..</param>
            <param name="Limit">number of resources in a page (200 by default)..</param>
            <param name="Cursor">opaque cursor for fetching the next page..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchShiftsRequest.Query">
            <summary>
            Query filters.
            </summary>
            <value>Query filters.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchShiftsRequest.Limit">
            <summary>
            number of resources in a page (200 by default).
            </summary>
            <value>number of resources in a page (200 by default).</value>
        </member>
        <member name="P:Square.Connect.Model.SearchShiftsRequest.Cursor">
            <summary>
            opaque cursor for fetching the next page.
            </summary>
            <value>opaque cursor for fetching the next page.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsRequest.Equals(Square.Connect.Model.SearchShiftsRequest)">
            <summary>
            Returns true if SearchShiftsRequest instances are equal
            </summary>
            <param name="other">Instance of SearchShiftsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.SearchShiftsResponse">
            <summary>
            The response to a request for &#x60;Shift&#x60; objects. Contains the requested &#x60;Shift&#x60; objects. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Shift},System.String,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchShiftsResponse" /> class.
            </summary>
            <param name="Shifts">Shifts.</param>
            <param name="Cursor">Opaque cursor for fetching the next page..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.SearchShiftsResponse.Shifts">
            <summary>
            Shifts
            </summary>
            <value>Shifts</value>
        </member>
        <member name="P:Square.Connect.Model.SearchShiftsResponse.Cursor">
            <summary>
            Opaque cursor for fetching the next page.
            </summary>
            <value>Opaque cursor for fetching the next page.</value>
        </member>
        <member name="P:Square.Connect.Model.SearchShiftsResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsResponse.Equals(Square.Connect.Model.SearchShiftsResponse)">
            <summary>
            Returns true if SearchShiftsResponse instances are equal
            </summary>
            <param name="other">Instance of SearchShiftsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SearchShiftsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Shift">
            <summary>
            A record of the hourly rate, start, and end times for a single work shift  for an employee. May include a record of the start and end times for breaks  taken during the shift.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Shift.StatusEnum">
            <summary>
            Describes working state of the current `Shift`. See [ShiftStatus](#type-shiftstatus) for possible values
            </summary>
            <value>Describes working state of the current `Shift`. See [ShiftStatus](#type-shiftstatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Shift.StatusEnum.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Shift.StatusEnum.CLOSED">
            <summary>
            Enum CLOSED for "CLOSED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Shift.Status">
            <summary>
            Describes working state of the current `Shift`. See [ShiftStatus](#type-shiftstatus) for possible values
            </summary>
            <value>Describes working state of the current `Shift`. See [ShiftStatus](#type-shiftstatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Shift.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Shift" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.Shift.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.ShiftWage,System.Collections.Generic.List{Square.Connect.Model.ModelBreak},System.Nullable{Square.Connect.Model.Shift.StatusEnum},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Shift" /> class.
            </summary>
            <param name="Id">UUID for this object.</param>
            <param name="EmployeeId">The ID of the employee this shift belongs to. (required).</param>
            <param name="LocationId">The ID of the location this shift occurred at. Should be based on where the employee clocked in..</param>
            <param name="Timezone">Read-only convenience value that is calculated from the location based on &#x60;location_id&#x60;. Format: the IANA Timezone Database identifier for the location timezone..</param>
            <param name="StartAt">RFC 3339; shifted to location timezone + offset. Precision up to the minute is respected; seconds are truncated. (required).</param>
            <param name="EndAt">RFC 3339; shifted to timezone + offset. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the shift length is calculated. For example, a shift from &#x60;00:00&#x60; to &#x60;08:01&#x60; is considered an 8 hour shift (midnight to 8am)..</param>
            <param name="Wage">Job and pay related information..</param>
            <param name="Breaks">A list of any paid or unpaid breaks that were taken during this shift..</param>
            <param name="Status">Describes working state of the current &#x60;Shift&#x60;. See [ShiftStatus](#type-shiftstatus) for possible values.</param>
            <param name="Version">Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write..</param>
            <param name="CreatedAt">A read-only timestamp in RFC 3339 format; presented in UTC..</param>
            <param name="UpdatedAt">A read-only timestamp in RFC 3339 format; presented in UTC..</param>
        </member>
        <member name="P:Square.Connect.Model.Shift.Id">
            <summary>
            UUID for this object
            </summary>
            <value>UUID for this object</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.EmployeeId">
            <summary>
            The ID of the employee this shift belongs to.
            </summary>
            <value>The ID of the employee this shift belongs to.</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.LocationId">
            <summary>
            The ID of the location this shift occurred at. Should be based on where the employee clocked in.
            </summary>
            <value>The ID of the location this shift occurred at. Should be based on where the employee clocked in.</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.Timezone">
            <summary>
            Read-only convenience value that is calculated from the location based on &#x60;location_id&#x60;. Format: the IANA Timezone Database identifier for the location timezone.
            </summary>
            <value>Read-only convenience value that is calculated from the location based on &#x60;location_id&#x60;. Format: the IANA Timezone Database identifier for the location timezone.</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.StartAt">
            <summary>
            RFC 3339; shifted to location timezone + offset. Precision up to the minute is respected; seconds are truncated.
            </summary>
            <value>RFC 3339; shifted to location timezone + offset. Precision up to the minute is respected; seconds are truncated.</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.EndAt">
            <summary>
            RFC 3339; shifted to timezone + offset. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the shift length is calculated. For example, a shift from &#x60;00:00&#x60; to &#x60;08:01&#x60; is considered an 8 hour shift (midnight to 8am).
            </summary>
            <value>RFC 3339; shifted to timezone + offset. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the shift length is calculated. For example, a shift from &#x60;00:00&#x60; to &#x60;08:01&#x60; is considered an 8 hour shift (midnight to 8am).</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.Wage">
            <summary>
            Job and pay related information.
            </summary>
            <value>Job and pay related information.</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.Breaks">
            <summary>
            A list of any paid or unpaid breaks that were taken during this shift.
            </summary>
            <value>A list of any paid or unpaid breaks that were taken during this shift.</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.Version">
            <summary>
            Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write.
            </summary>
            <value>Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write.</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.CreatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format; presented in UTC.
            </summary>
            <value>A read-only timestamp in RFC 3339 format; presented in UTC.</value>
        </member>
        <member name="P:Square.Connect.Model.Shift.UpdatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format; presented in UTC.
            </summary>
            <value>A read-only timestamp in RFC 3339 format; presented in UTC.</value>
        </member>
        <member name="M:Square.Connect.Model.Shift.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Shift.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Shift.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Shift.Equals(Square.Connect.Model.Shift)">
            <summary>
            Returns true if Shift instances are equal
            </summary>
            <param name="other">Instance of Shift to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Shift.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ShiftFilter">
            <summary>
            Defines a filter used in a search for &#x60;Shift&#x60; records. &#x60;AND&#x60; logic is used by Square&#39;s servers to apply each filter property specified.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ShiftFilter.StatusEnum">
            <summary>
            Fetch a `Shift` instance by `Shift.status`. See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values
            </summary>
            <value>Fetch a `Shift` instance by `Shift.status`. See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ShiftFilter.StatusEnum.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftFilter.StatusEnum.CLOSED">
            <summary>
            Enum CLOSED for "CLOSED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ShiftFilter.Status">
            <summary>
            Fetch a `Shift` instance by `Shift.status`. See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values
            </summary>
            <value>Fetch a `Shift` instance by `Shift.status`. See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ShiftFilter.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{Square.Connect.Model.ShiftFilter.StatusEnum},Square.Connect.Model.TimeRange,Square.Connect.Model.TimeRange,Square.Connect.Model.ShiftWorkday)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ShiftFilter" /> class.
            </summary>
            <param name="LocationId">Fetch shifts for the specified location..</param>
            <param name="EmployeeId">Fetch shifts for the specified employee..</param>
            <param name="Status">Fetch a &#x60;Shift&#x60; instance by &#x60;Shift.status&#x60;. See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values.</param>
            <param name="Start">Fetch &#x60;Shift&#x60;s that start in the time range - Inclusive..</param>
            <param name="End">Fetch the &#x60;Shift&#x60;s that end in the time range - Inclusive..</param>
            <param name="Workday">Fetch the &#x60;Shift&#x60;s based on workday date range..</param>
        </member>
        <member name="P:Square.Connect.Model.ShiftFilter.LocationId">
            <summary>
            Fetch shifts for the specified location.
            </summary>
            <value>Fetch shifts for the specified location.</value>
        </member>
        <member name="P:Square.Connect.Model.ShiftFilter.EmployeeId">
            <summary>
            Fetch shifts for the specified employee.
            </summary>
            <value>Fetch shifts for the specified employee.</value>
        </member>
        <member name="P:Square.Connect.Model.ShiftFilter.Start">
            <summary>
            Fetch &#x60;Shift&#x60;s that start in the time range - Inclusive.
            </summary>
            <value>Fetch &#x60;Shift&#x60;s that start in the time range - Inclusive.</value>
        </member>
        <member name="P:Square.Connect.Model.ShiftFilter.End">
            <summary>
            Fetch the &#x60;Shift&#x60;s that end in the time range - Inclusive.
            </summary>
            <value>Fetch the &#x60;Shift&#x60;s that end in the time range - Inclusive.</value>
        </member>
        <member name="P:Square.Connect.Model.ShiftFilter.Workday">
            <summary>
            Fetch the &#x60;Shift&#x60;s based on workday date range.
            </summary>
            <value>Fetch the &#x60;Shift&#x60;s based on workday date range.</value>
        </member>
        <member name="M:Square.Connect.Model.ShiftFilter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftFilter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftFilter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftFilter.Equals(Square.Connect.Model.ShiftFilter)">
            <summary>
            Returns true if ShiftFilter instances are equal
            </summary>
            <param name="other">Instance of ShiftFilter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ShiftFilterStatus">
            <summary>
            Specifies the `status` of `Shift` records to be returned.
            </summary>
            <value>Specifies the `status` of `Shift` records to be returned.</value>
        </member>
        <member name="F:Square.Connect.Model.ShiftFilterStatus.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftFilterStatus.CLOSED">
            <summary>
            Enum CLOSED for "CLOSED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ShiftQuery">
            <summary>
            The parameters of a &#x60;Shift&#x60; search query. Includes filter and sort options.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ShiftQuery.#ctor(Square.Connect.Model.ShiftFilter,Square.Connect.Model.ShiftSort)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ShiftQuery" /> class.
            </summary>
            <param name="Filter">Query filter options.</param>
            <param name="Sort">Sort order details.</param>
        </member>
        <member name="P:Square.Connect.Model.ShiftQuery.Filter">
            <summary>
            Query filter options
            </summary>
            <value>Query filter options</value>
        </member>
        <member name="P:Square.Connect.Model.ShiftQuery.Sort">
            <summary>
            Sort order details
            </summary>
            <value>Sort order details</value>
        </member>
        <member name="M:Square.Connect.Model.ShiftQuery.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftQuery.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftQuery.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftQuery.Equals(Square.Connect.Model.ShiftQuery)">
            <summary>
            Returns true if ShiftQuery instances are equal
            </summary>
            <param name="other">Instance of ShiftQuery to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftQuery.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ShiftSort">
            <summary>
            Sets the sort order of search results.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ShiftSort.FieldEnum">
            <summary>
            The field to sort on. See [ShiftSortField](#type-shiftsortfield) for possible values
            </summary>
            <value>The field to sort on. See [ShiftSortField](#type-shiftsortfield) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ShiftSort.FieldEnum.STARTAT">
            <summary>
            Enum STARTAT for "START_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftSort.FieldEnum.ENDAT">
            <summary>
            Enum ENDAT for "END_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftSort.FieldEnum.CREATEDAT">
            <summary>
            Enum CREATEDAT for "CREATED_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftSort.FieldEnum.UPDATEDAT">
            <summary>
            Enum UPDATEDAT for "UPDATED_AT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ShiftSort.OrderEnum">
            <summary>
            The order in which results are returned. Defaults to DESC. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are returned. Defaults to DESC. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ShiftSort.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftSort.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ShiftSort.Field">
            <summary>
            The field to sort on. See [ShiftSortField](#type-shiftsortfield) for possible values
            </summary>
            <value>The field to sort on. See [ShiftSortField](#type-shiftsortfield) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.ShiftSort.Order">
            <summary>
            The order in which results are returned. Defaults to DESC. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which results are returned. Defaults to DESC. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ShiftSort.#ctor(System.Nullable{Square.Connect.Model.ShiftSort.FieldEnum},System.Nullable{Square.Connect.Model.ShiftSort.OrderEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ShiftSort" /> class.
            </summary>
            <param name="Field">The field to sort on. See [ShiftSortField](#type-shiftsortfield) for possible values.</param>
            <param name="Order">The order in which results are returned. Defaults to DESC. See [SortOrder](#type-sortorder) for possible values.</param>
        </member>
        <member name="M:Square.Connect.Model.ShiftSort.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftSort.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftSort.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftSort.Equals(Square.Connect.Model.ShiftSort)">
            <summary>
            Returns true if ShiftSort instances are equal
            </summary>
            <param name="other">Instance of ShiftSort to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftSort.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ShiftSortField">
            <summary>
            Enumerates the `Shift` fields to sort on.
            </summary>
            <value>Enumerates the `Shift` fields to sort on.</value>
        </member>
        <member name="F:Square.Connect.Model.ShiftSortField.STARTAT">
            <summary>
            Enum STARTAT for "START_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftSortField.ENDAT">
            <summary>
            Enum ENDAT for "END_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftSortField.CREATEDAT">
            <summary>
            Enum CREATEDAT for "CREATED_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftSortField.UPDATEDAT">
            <summary>
            Enum UPDATEDAT for "UPDATED_AT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ShiftStatus">
            <summary>
            Enumerates the possible status of a `Shift`
            </summary>
            <value>Enumerates the possible status of a `Shift`</value>
        </member>
        <member name="F:Square.Connect.Model.ShiftStatus.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftStatus.CLOSED">
            <summary>
            Enum CLOSED for "CLOSED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ShiftWage">
            <summary>
            The hourly wage rate used to compensate an employee for this shift.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.ShiftWage.#ctor(System.String,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ShiftWage" /> class.
            </summary>
            <param name="Title">The name of the job performed during this shift. Square labor-reporting UIs may group shifts together by title..</param>
            <param name="HourlyRate">Can be a custom-set hourly wage or the calculated effective hourly wage based on annual wage and hours worked per week..</param>
        </member>
        <member name="P:Square.Connect.Model.ShiftWage.Title">
            <summary>
            The name of the job performed during this shift. Square labor-reporting UIs may group shifts together by title.
            </summary>
            <value>The name of the job performed during this shift. Square labor-reporting UIs may group shifts together by title.</value>
        </member>
        <member name="P:Square.Connect.Model.ShiftWage.HourlyRate">
            <summary>
            Can be a custom-set hourly wage or the calculated effective hourly wage based on annual wage and hours worked per week.
            </summary>
            <value>Can be a custom-set hourly wage or the calculated effective hourly wage based on annual wage and hours worked per week.</value>
        </member>
        <member name="M:Square.Connect.Model.ShiftWage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftWage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftWage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftWage.Equals(Square.Connect.Model.ShiftWage)">
            <summary>
            Returns true if ShiftWage instances are equal
            </summary>
            <param name="other">Instance of ShiftWage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftWage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ShiftWorkday">
            <summary>
            A &#x60;Shift&#x60; search query filter parameter that sets a range of days that  a &#x60;Shift&#x60; must start or end in before passing the filter condition.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.ShiftWorkday.MatchShiftsByEnum">
            <summary>
            The strategy on which the dates are applied. See [ShiftWorkdayMatcher](#type-shiftworkdaymatcher) for possible values
            </summary>
            <value>The strategy on which the dates are applied. See [ShiftWorkdayMatcher](#type-shiftworkdaymatcher) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.ShiftWorkday.MatchShiftsByEnum.STARTAT">
            <summary>
            Enum STARTAT for "START_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftWorkday.MatchShiftsByEnum.ENDAT">
            <summary>
            Enum ENDAT for "END_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftWorkday.MatchShiftsByEnum.INTERSECTION">
            <summary>
            Enum INTERSECTION for "INTERSECTION"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.ShiftWorkday.MatchShiftsBy">
            <summary>
            The strategy on which the dates are applied. See [ShiftWorkdayMatcher](#type-shiftworkdaymatcher) for possible values
            </summary>
            <value>The strategy on which the dates are applied. See [ShiftWorkdayMatcher](#type-shiftworkdaymatcher) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.ShiftWorkday.#ctor(Square.Connect.Model.DateRange,System.Nullable{Square.Connect.Model.ShiftWorkday.MatchShiftsByEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.ShiftWorkday" /> class.
            </summary>
            <param name="DateRange">Dates for fetching the shifts.</param>
            <param name="MatchShiftsBy">The strategy on which the dates are applied. See [ShiftWorkdayMatcher](#type-shiftworkdaymatcher) for possible values.</param>
            <param name="DefaultTimezone">Location-specific timezones convert workdays to datetime filters. Every location included in the query must have a timezone, or this field must be provided as a fallback. Format: the IANA timezone database identifier for the relevant timezone..</param>
        </member>
        <member name="P:Square.Connect.Model.ShiftWorkday.DateRange">
            <summary>
            Dates for fetching the shifts
            </summary>
            <value>Dates for fetching the shifts</value>
        </member>
        <member name="P:Square.Connect.Model.ShiftWorkday.DefaultTimezone">
            <summary>
            Location-specific timezones convert workdays to datetime filters. Every location included in the query must have a timezone, or this field must be provided as a fallback. Format: the IANA timezone database identifier for the relevant timezone.
            </summary>
            <value>Location-specific timezones convert workdays to datetime filters. Every location included in the query must have a timezone, or this field must be provided as a fallback. Format: the IANA timezone database identifier for the relevant timezone.</value>
        </member>
        <member name="M:Square.Connect.Model.ShiftWorkday.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftWorkday.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftWorkday.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftWorkday.Equals(Square.Connect.Model.ShiftWorkday)">
            <summary>
            Returns true if ShiftWorkday instances are equal
            </summary>
            <param name="other">Instance of ShiftWorkday to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.ShiftWorkday.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.ShiftWorkdayMatcher">
            <summary>
            Defines the logic used to apply a workday filter.
            </summary>
            <value>Defines the logic used to apply a workday filter.</value>
        </member>
        <member name="F:Square.Connect.Model.ShiftWorkdayMatcher.STARTAT">
            <summary>
            Enum STARTAT for "START_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftWorkdayMatcher.ENDAT">
            <summary>
            Enum ENDAT for "END_AT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.ShiftWorkdayMatcher.INTERSECTION">
            <summary>
            Enum INTERSECTION for "INTERSECTION"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SortOrder">
            <summary>
            The order (e.g., chronological or alphabetical) in which results from a request are returned.
            </summary>
            <value>The order (e.g., chronological or alphabetical) in which results from a request are returned.</value>
        </member>
        <member name="F:Square.Connect.Model.SortOrder.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SortOrder.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SourceApplication">
            <summary>
            Provides information about the application used to generate an inventory change.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.SourceApplication.ProductEnum">
            <summary>
            Read-only [Product](#type-product) type for the application. See [Product](#type-product) for possible values
            </summary>
            <value>Read-only [Product](#type-product) type for the application. See [Product](#type-product) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.SQUAREPOS">
            <summary>
            Enum SQUAREPOS for "SQUARE_POS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.EXTERNALAPI">
            <summary>
            Enum EXTERNALAPI for "EXTERNAL_API"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.BILLING">
            <summary>
            Enum BILLING for "BILLING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.APPOINTMENTS">
            <summary>
            Enum APPOINTMENTS for "APPOINTMENTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.INVOICES">
            <summary>
            Enum INVOICES for "INVOICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.ONLINESTORE">
            <summary>
            Enum ONLINESTORE for "ONLINE_STORE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.PAYROLL">
            <summary>
            Enum PAYROLL for "PAYROLL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.DASHBOARD">
            <summary>
            Enum DASHBOARD for "DASHBOARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.ITEMLIBRARYIMPORT">
            <summary>
            Enum ITEMLIBRARYIMPORT for "ITEM_LIBRARY_IMPORT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.SourceApplication.ProductEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.SourceApplication.Product">
            <summary>
            Read-only [Product](#type-product) type for the application. See [Product](#type-product) for possible values
            </summary>
            <value>Read-only [Product](#type-product) type for the application. See [Product](#type-product) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.SourceApplication.#ctor(System.Nullable{Square.Connect.Model.SourceApplication.ProductEnum},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.SourceApplication" /> class.
            </summary>
            <param name="Product">Read-only [Product](#type-product) type for the application. See [Product](#type-product) for possible values.</param>
            <param name="ApplicationId">Read-only Square ID assigned to the application. Only used for [Product](#type-product) type &#x60;EXTERNAL_API&#x60;..</param>
            <param name="Name">Read-only display name assigned to the application (e.g. &#x60;\&quot;Custom Application\&quot;&#x60;, &#x60;\&quot;Square POS 4.74 for Android\&quot;&#x60;)..</param>
        </member>
        <member name="P:Square.Connect.Model.SourceApplication.ApplicationId">
            <summary>
            Read-only Square ID assigned to the application. Only used for [Product](#type-product) type &#x60;EXTERNAL_API&#x60;.
            </summary>
            <value>Read-only Square ID assigned to the application. Only used for [Product](#type-product) type &#x60;EXTERNAL_API&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.SourceApplication.Name">
            <summary>
            Read-only display name assigned to the application (e.g. &#x60;\&quot;Custom Application\&quot;&#x60;, &#x60;\&quot;Square POS 4.74 for Android\&quot;&#x60;).
            </summary>
            <value>Read-only display name assigned to the application (e.g. &#x60;\&quot;Custom Application\&quot;&#x60;, &#x60;\&quot;Square POS 4.74 for Android\&quot;&#x60;).</value>
        </member>
        <member name="M:Square.Connect.Model.SourceApplication.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SourceApplication.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.SourceApplication.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SourceApplication.Equals(Square.Connect.Model.SourceApplication)">
            <summary>
            Returns true if SourceApplication instances are equal
            </summary>
            <param name="other">Instance of SourceApplication to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.SourceApplication.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.StandardUnitDescription">
            <summary>
            Contains the name and abbreviation for standard measurement unit.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescription.#ctor(Square.Connect.Model.MeasurementUnit,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.StandardUnitDescription" /> class.
            </summary>
            <param name="Unit">Identifies the measurement unit being described..</param>
            <param name="Name">Display name of the measurement unit. For example, &#39;Pound&#39;..</param>
            <param name="Abbreviation">Abbreviation for the measurement unit. For example, &#39;lb&#39;..</param>
        </member>
        <member name="P:Square.Connect.Model.StandardUnitDescription.Unit">
            <summary>
            Identifies the measurement unit being described.
            </summary>
            <value>Identifies the measurement unit being described.</value>
        </member>
        <member name="P:Square.Connect.Model.StandardUnitDescription.Name">
            <summary>
            Display name of the measurement unit. For example, &#39;Pound&#39;.
            </summary>
            <value>Display name of the measurement unit. For example, &#39;Pound&#39;.</value>
        </member>
        <member name="P:Square.Connect.Model.StandardUnitDescription.Abbreviation">
            <summary>
            Abbreviation for the measurement unit. For example, &#39;lb&#39;.
            </summary>
            <value>Abbreviation for the measurement unit. For example, &#39;lb&#39;.</value>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescription.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescription.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescription.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescription.Equals(Square.Connect.Model.StandardUnitDescription)">
            <summary>
            Returns true if StandardUnitDescription instances are equal
            </summary>
            <param name="other">Instance of StandardUnitDescription to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescription.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.StandardUnitDescriptionGroup">
            <summary>
            Group of standard measurement units.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescriptionGroup.#ctor(System.Collections.Generic.List{Square.Connect.Model.StandardUnitDescription},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.StandardUnitDescriptionGroup" /> class.
            </summary>
            <param name="StandardUnitDescriptions">List of measurement units in this description group..</param>
            <param name="LanguageCode">IETF language tag..</param>
        </member>
        <member name="P:Square.Connect.Model.StandardUnitDescriptionGroup.StandardUnitDescriptions">
            <summary>
            List of measurement units in this description group.
            </summary>
            <value>List of measurement units in this description group.</value>
        </member>
        <member name="P:Square.Connect.Model.StandardUnitDescriptionGroup.LanguageCode">
            <summary>
            IETF language tag.
            </summary>
            <value>IETF language tag.</value>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescriptionGroup.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescriptionGroup.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescriptionGroup.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescriptionGroup.Equals(Square.Connect.Model.StandardUnitDescriptionGroup)">
            <summary>
            Returns true if StandardUnitDescriptionGroup instances are equal
            </summary>
            <param name="other">Instance of StandardUnitDescriptionGroup to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.StandardUnitDescriptionGroup.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.TaxCalculationPhase">
            <summary>
            When to calculate the taxes due on a cart.
            </summary>
            <value>When to calculate the taxes due on a cart.</value>
        </member>
        <member name="F:Square.Connect.Model.TaxCalculationPhase.SUBTOTALPHASE">
            <summary>
            Enum SUBTOTALPHASE for "TAX_SUBTOTAL_PHASE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TaxCalculationPhase.TOTALPHASE">
            <summary>
            Enum TOTALPHASE for "TAX_TOTAL_PHASE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.TaxInclusionType">
            <summary>
            Whether to the tax amount should be additional to or included in to the [CatalogItem](#type-catalogitem) price.
            </summary>
            <value>Whether to the tax amount should be additional to or included in to the [CatalogItem](#type-catalogitem) price.</value>
        </member>
        <member name="F:Square.Connect.Model.TaxInclusionType.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TaxInclusionType.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Tender">
            <summary>
            Represents a tender (i.e., a method of payment) used in a Square transaction.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Tender.TypeEnum">
            <summary>
            The type of tender, such as `CARD` or `CASH`. See [TenderType](#type-tendertype) for possible values
            </summary>
            <value>The type of tender, such as `CARD` or `CASH`. See [TenderType](#type-tendertype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.CARD">
            <summary>
            Enum CARD for "CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.CASH">
            <summary>
            Enum CASH for "CASH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.THIRDPARTYCARD">
            <summary>
            Enum THIRDPARTYCARD for "THIRD_PARTY_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.SQUAREGIFTCARD">
            <summary>
            Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.NOSALE">
            <summary>
            Enum NOSALE for "NO_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Tender.Type">
            <summary>
            The type of tender, such as `CARD` or `CASH`. See [TenderType](#type-tendertype) for possible values
            </summary>
            <value>The type of tender, such as `CARD` or `CASH`. See [TenderType](#type-tendertype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Tender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Tender" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.Tender.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,System.String,System.Nullable{Square.Connect.Model.Tender.TypeEnum},Square.Connect.Model.TenderCardDetails,Square.Connect.Model.TenderCashDetails,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipient})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Tender" /> class.
            </summary>
            <param name="Id">The tender&#39;s unique ID..</param>
            <param name="LocationId">The ID of the transaction&#39;s associated location..</param>
            <param name="TransactionId">The ID of the tender&#39;s associated transaction..</param>
            <param name="CreatedAt">The time when the tender was created, in RFC 3339 format..</param>
            <param name="Note">An optional note associated with the tender at the time of payment..</param>
            <param name="AmountMoney">The amount of the tender..</param>
            <param name="TipMoney">The tip&#39;s amount of the tender..</param>
            <param name="ProcessingFeeMoney">The amount of any Square processing fees applied to the tender.  This field is not immediately populated when a new transaction is created. It is usually available after about ten seconds..</param>
            <param name="CustomerId">If the tender is associated with a customer or represents a customer&#39;s card on file, this is the ID of the associated customer..</param>
            <param name="Type">The type of tender, such as &#x60;CARD&#x60; or &#x60;CASH&#x60;. See [TenderType](#type-tendertype) for possible values (required).</param>
            <param name="CardDetails">The details of the card tender.  This value is present only if the value of &#x60;type&#x60; is &#x60;CARD&#x60;..</param>
            <param name="CashDetails">The details of the cash tender.  This value is present only if the value of &#x60;type&#x60; is &#x60;CASH&#x60;..</param>
            <param name="AdditionalRecipients">Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration..</param>
        </member>
        <member name="P:Square.Connect.Model.Tender.Id">
            <summary>
            The tender&#39;s unique ID.
            </summary>
            <value>The tender&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.LocationId">
            <summary>
            The ID of the transaction&#39;s associated location.
            </summary>
            <value>The ID of the transaction&#39;s associated location.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.TransactionId">
            <summary>
            The ID of the tender&#39;s associated transaction.
            </summary>
            <value>The ID of the tender&#39;s associated transaction.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.CreatedAt">
            <summary>
            The time when the tender was created, in RFC 3339 format.
            </summary>
            <value>The time when the tender was created, in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.Note">
            <summary>
            An optional note associated with the tender at the time of payment.
            </summary>
            <value>An optional note associated with the tender at the time of payment.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.AmountMoney">
            <summary>
            The amount of the tender.
            </summary>
            <value>The amount of the tender.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.TipMoney">
            <summary>
            The tip&#39;s amount of the tender.
            </summary>
            <value>The tip&#39;s amount of the tender.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.ProcessingFeeMoney">
            <summary>
            The amount of any Square processing fees applied to the tender.  This field is not immediately populated when a new transaction is created. It is usually available after about ten seconds.
            </summary>
            <value>The amount of any Square processing fees applied to the tender.  This field is not immediately populated when a new transaction is created. It is usually available after about ten seconds.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.CustomerId">
            <summary>
            If the tender is associated with a customer or represents a customer&#39;s card on file, this is the ID of the associated customer.
            </summary>
            <value>If the tender is associated with a customer or represents a customer&#39;s card on file, this is the ID of the associated customer.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.CardDetails">
            <summary>
            The details of the card tender.  This value is present only if the value of &#x60;type&#x60; is &#x60;CARD&#x60;.
            </summary>
            <value>The details of the card tender.  This value is present only if the value of &#x60;type&#x60; is &#x60;CARD&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.CashDetails">
            <summary>
            The details of the cash tender.  This value is present only if the value of &#x60;type&#x60; is &#x60;CASH&#x60;.
            </summary>
            <value>The details of the cash tender.  This value is present only if the value of &#x60;type&#x60; is &#x60;CASH&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.Tender.AdditionalRecipients">
            <summary>
            Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration.
            </summary>
            <value>Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration.</value>
        </member>
        <member name="M:Square.Connect.Model.Tender.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Tender.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Tender.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Tender.Equals(Square.Connect.Model.Tender)">
            <summary>
            Returns true if Tender instances are equal
            </summary>
            <param name="other">Instance of Tender to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Tender.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.TenderCardDetails">
            <summary>
            Represents additional details of a tender with &#x60;type&#x60; &#x60;CARD&#x60; or &#x60;SQUARE_GIFT_CARD&#x60;
            </summary>
        </member>
        <member name="T:Square.Connect.Model.TenderCardDetails.StatusEnum">
            <summary>
            The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values
            </summary>
            <value>The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.AUTHORIZED">
            <summary>
            Enum AUTHORIZED for "AUTHORIZED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.CAPTURED">
            <summary>
            Enum CAPTURED for "CAPTURED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.VOIDED">
            <summary>
            Enum VOIDED for "VOIDED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.TenderCardDetails.EntryMethodEnum">
            <summary>
            The method used to enter the card's details for the transaction. See [TenderCardDetailsEntryMethod](#type-tendercarddetailsentrymethod) for possible values
            </summary>
            <value>The method used to enter the card's details for the transaction. See [TenderCardDetailsEntryMethod](#type-tendercarddetailsentrymethod) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.SWIPED">
            <summary>
            Enum SWIPED for "SWIPED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.KEYED">
            <summary>
            Enum KEYED for "KEYED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.EMV">
            <summary>
            Enum EMV for "EMV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.ONFILE">
            <summary>
            Enum ONFILE for "ON_FILE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.CONTACTLESS">
            <summary>
            Enum CONTACTLESS for "CONTACTLESS"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.Status">
            <summary>
            The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values
            </summary>
            <value>The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.EntryMethod">
            <summary>
            The method used to enter the card's details for the transaction. See [TenderCardDetailsEntryMethod](#type-tendercarddetailsentrymethod) for possible values
            </summary>
            <value>The method used to enter the card's details for the transaction. See [TenderCardDetailsEntryMethod](#type-tendercarddetailsentrymethod) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.#ctor(System.Nullable{Square.Connect.Model.TenderCardDetails.StatusEnum},Square.Connect.Model.Card,System.Nullable{Square.Connect.Model.TenderCardDetails.EntryMethodEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.TenderCardDetails" /> class.
            </summary>
            <param name="Status">The credit card payment&#39;s current state (such as &#x60;AUTHORIZED&#x60; or &#x60;CAPTURED&#x60;). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.</param>
            <param name="Card">The credit card&#39;s non-confidential details..</param>
            <param name="EntryMethod">The method used to enter the card&#39;s details for the transaction. See [TenderCardDetailsEntryMethod](#type-tendercarddetailsentrymethod) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.Card">
            <summary>
            The credit card&#39;s non-confidential details.
            </summary>
            <value>The credit card&#39;s non-confidential details.</value>
        </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.Equals(Square.Connect.Model.TenderCardDetails)">
            <summary>
            Returns true if TenderCardDetails instances are equal
            </summary>
            <param name="other">Instance of TenderCardDetails to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.TenderCardDetailsEntryMethod">
            <summary>
            Indicates the method used to enter the card's details.
            </summary>
            <value>Indicates the method used to enter the card's details.</value>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.SWIPED">
            <summary>
            Enum SWIPED for "SWIPED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.KEYED">
            <summary>
            Enum KEYED for "KEYED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.EMV">
            <summary>
            Enum EMV for "EMV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.ONFILE">
            <summary>
            Enum ONFILE for "ON_FILE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.CONTACTLESS">
            <summary>
            Enum CONTACTLESS for "CONTACTLESS"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.TenderCardDetailsStatus">
            <summary>
            Indicates the card transaction's current status.
            </summary>
            <value>Indicates the card transaction's current status.</value>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.AUTHORIZED">
            <summary>
            Enum AUTHORIZED for "AUTHORIZED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.CAPTURED">
            <summary>
            Enum CAPTURED for "CAPTURED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.VOIDED">
            <summary>
            Enum VOIDED for "VOIDED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.TenderCashDetails">
            <summary>
            Represents the details of a tender with &#x60;type&#x60; &#x60;CASH&#x60;.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.#ctor(Square.Connect.Model.Money,Square.Connect.Model.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.TenderCashDetails" /> class.
            </summary>
            <param name="BuyerTenderedMoney">The total amount of cash provided by the buyer, before change is given..</param>
            <param name="ChangeBackMoney">The amount of change returned to the buyer..</param>
        </member>
        <member name="P:Square.Connect.Model.TenderCashDetails.BuyerTenderedMoney">
            <summary>
            The total amount of cash provided by the buyer, before change is given.
            </summary>
            <value>The total amount of cash provided by the buyer, before change is given.</value>
        </member>
        <member name="P:Square.Connect.Model.TenderCashDetails.ChangeBackMoney">
            <summary>
            The amount of change returned to the buyer.
            </summary>
            <value>The amount of change returned to the buyer.</value>
        </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.Equals(Square.Connect.Model.TenderCashDetails)">
            <summary>
            Returns true if TenderCashDetails instances are equal
            </summary>
            <param name="other">Instance of TenderCashDetails to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.TenderType">
            <summary>
            Indicates a tender's type.
            </summary>
            <value>Indicates a tender's type.</value>
        </member>
        <member name="F:Square.Connect.Model.TenderType.CARD">
            <summary>
            Enum CARD for "CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderType.CASH">
            <summary>
            Enum CASH for "CASH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderType.THIRDPARTYCARD">
            <summary>
            Enum THIRDPARTYCARD for "THIRD_PARTY_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderType.SQUAREGIFTCARD">
            <summary>
            Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderType.NOSALE">
            <summary>
            Enum NOSALE for "NO_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TenderType.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.TimeRange">
            <summary>
            Represents a generic time range. The start and end values are represented in RFC-3339 format. Time ranges are customized to be inclusive or exclusive based on the needs of a particular endpoint. Refer to the relevent endpoint-specific documentation to determine how time ranges are handled.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.TimeRange.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.TimeRange" /> class.
            </summary>
            <param name="StartAt">A datetime value in RFC-3339 format indicating when the time range starts..</param>
            <param name="EndAt">A datetime value in RFC-3339 format indicating when the time range ends..</param>
        </member>
        <member name="P:Square.Connect.Model.TimeRange.StartAt">
            <summary>
            A datetime value in RFC-3339 format indicating when the time range starts.
            </summary>
            <value>A datetime value in RFC-3339 format indicating when the time range starts.</value>
        </member>
        <member name="P:Square.Connect.Model.TimeRange.EndAt">
            <summary>
            A datetime value in RFC-3339 format indicating when the time range ends.
            </summary>
            <value>A datetime value in RFC-3339 format indicating when the time range ends.</value>
        </member>
        <member name="M:Square.Connect.Model.TimeRange.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.TimeRange.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.TimeRange.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.TimeRange.Equals(Square.Connect.Model.TimeRange)">
            <summary>
            Returns true if TimeRange instances are equal
            </summary>
            <param name="other">Instance of TimeRange to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.TimeRange.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.Transaction">
            <summary>
            Represents a transaction processed with Square, either with the Connect API or with Square Point of Sale.  The &#x60;tenders&#x60; field of this object lists all methods of payment used to pay in the transaction.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Transaction.ProductEnum">
            <summary>
            The Square product that processed the transaction. See [TransactionProduct](#type-transactionproduct) for possible values
            </summary>
            <value>The Square product that processed the transaction. See [TransactionProduct](#type-transactionproduct) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.REGISTER">
            <summary>
            Enum REGISTER for "REGISTER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.EXTERNALAPI">
            <summary>
            Enum EXTERNALAPI for "EXTERNAL_API"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.BILLING">
            <summary>
            Enum BILLING for "BILLING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.APPOINTMENTS">
            <summary>
            Enum APPOINTMENTS for "APPOINTMENTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.INVOICES">
            <summary>
            Enum INVOICES for "INVOICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.ONLINESTORE">
            <summary>
            Enum ONLINESTORE for "ONLINE_STORE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.PAYROLL">
            <summary>
            Enum PAYROLL for "PAYROLL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.Transaction.Product">
            <summary>
            The Square product that processed the transaction. See [TransactionProduct](#type-transactionproduct) for possible values
            </summary>
            <value>The Square product that processed the transaction. See [TransactionProduct](#type-transactionproduct) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.Transaction.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.Tender},System.Collections.Generic.List{Square.Connect.Model.Refund},System.String,System.Nullable{Square.Connect.Model.Transaction.ProductEnum},System.String,Square.Connect.Model.Address,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.Transaction" /> class.
            </summary>
            <param name="Id">The transaction&#39;s unique ID, issued by Square payments servers..</param>
            <param name="LocationId">The ID of the transaction&#39;s associated location..</param>
            <param name="CreatedAt">The time when the transaction was created, in RFC 3339 format..</param>
            <param name="Tenders">The tenders used to pay in the transaction..</param>
            <param name="Refunds">Refunds that have been applied to any tender in the transaction..</param>
            <param name="ReferenceId">If the transaction was created with the [Charge](#endpoint-transactions-charge) endpoint, this value is the same as the value provided for the &#x60;reference_id&#x60; parameter in the request to that endpoint. Otherwise, it is not set..</param>
            <param name="Product">The Square product that processed the transaction. See [TransactionProduct](#type-transactionproduct) for possible values.</param>
            <param name="ClientId">If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction&#39;s canonical &#x60;id&#x60;, which is generated by Square&#39;s backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value..</param>
            <param name="ShippingAddress">The shipping address provided in the request, if any..</param>
            <param name="OrderId">The order_id is an identifier for the order associated with this transaction, if any..</param>
        </member>
        <member name="P:Square.Connect.Model.Transaction.Id">
            <summary>
            The transaction&#39;s unique ID, issued by Square payments servers.
            </summary>
            <value>The transaction&#39;s unique ID, issued by Square payments servers.</value>
        </member>
        <member name="P:Square.Connect.Model.Transaction.LocationId">
            <summary>
            The ID of the transaction&#39;s associated location.
            </summary>
            <value>The ID of the transaction&#39;s associated location.</value>
        </member>
        <member name="P:Square.Connect.Model.Transaction.CreatedAt">
            <summary>
            The time when the transaction was created, in RFC 3339 format.
            </summary>
            <value>The time when the transaction was created, in RFC 3339 format.</value>
        </member>
        <member name="P:Square.Connect.Model.Transaction.Tenders">
            <summary>
            The tenders used to pay in the transaction.
            </summary>
            <value>The tenders used to pay in the transaction.</value>
        </member>
        <member name="P:Square.Connect.Model.Transaction.Refunds">
            <summary>
            Refunds that have been applied to any tender in the transaction.
            </summary>
            <value>Refunds that have been applied to any tender in the transaction.</value>
        </member>
        <member name="P:Square.Connect.Model.Transaction.ReferenceId">
            <summary>
            If the transaction was created with the [Charge](#endpoint-transactions-charge) endpoint, this value is the same as the value provided for the &#x60;reference_id&#x60; parameter in the request to that endpoint. Otherwise, it is not set.
            </summary>
            <value>If the transaction was created with the [Charge](#endpoint-transactions-charge) endpoint, this value is the same as the value provided for the &#x60;reference_id&#x60; parameter in the request to that endpoint. Otherwise, it is not set.</value>
        </member>
        <member name="P:Square.Connect.Model.Transaction.ClientId">
            <summary>
            If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction&#39;s canonical &#x60;id&#x60;, which is generated by Square&#39;s backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.
            </summary>
            <value>If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction&#39;s canonical &#x60;id&#x60;, which is generated by Square&#39;s backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.</value>
        </member>
        <member name="P:Square.Connect.Model.Transaction.ShippingAddress">
            <summary>
            The shipping address provided in the request, if any.
            </summary>
            <value>The shipping address provided in the request, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.Transaction.OrderId">
            <summary>
            The order_id is an identifier for the order associated with this transaction, if any.
            </summary>
            <value>The order_id is an identifier for the order associated with this transaction, if any.</value>
        </member>
        <member name="M:Square.Connect.Model.Transaction.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Transaction.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.Transaction.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Transaction.Equals(Square.Connect.Model.Transaction)">
            <summary>
            Returns true if Transaction instances are equal
            </summary>
            <param name="other">Instance of Transaction to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.Transaction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.TransactionProduct">
            <summary>
            Indicates the Square product used to process a transaction.
            </summary>
            <value>Indicates the Square product used to process a transaction.</value>
        </member>
        <member name="F:Square.Connect.Model.TransactionProduct.REGISTER">
            <summary>
            Enum REGISTER for "REGISTER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TransactionProduct.EXTERNALAPI">
            <summary>
            Enum EXTERNALAPI for "EXTERNAL_API"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TransactionProduct.BILLING">
            <summary>
            Enum BILLING for "BILLING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TransactionProduct.APPOINTMENTS">
            <summary>
            Enum APPOINTMENTS for "APPOINTMENTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TransactionProduct.INVOICES">
            <summary>
            Enum INVOICES for "INVOICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TransactionProduct.ONLINESTORE">
            <summary>
            Enum ONLINESTORE for "ONLINE_STORE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TransactionProduct.PAYROLL">
            <summary>
            Enum PAYROLL for "PAYROLL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.TransactionProduct.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.UpdateBreakTypeRequest">
            <summary>
            A request to update a &#x60;BreakType&#x60;
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeRequest.#ctor(Square.Connect.Model.BreakType)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateBreakTypeRequest" /> class.
            </summary>
            <param name="BreakType">The updated &#x60;BreakType&#x60;..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateBreakTypeRequest.BreakType">
            <summary>
            The updated &#x60;BreakType&#x60;.
            </summary>
            <value>The updated &#x60;BreakType&#x60;.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeRequest.Equals(Square.Connect.Model.UpdateBreakTypeRequest)">
            <summary>
            Returns true if UpdateBreakTypeRequest instances are equal
            </summary>
            <param name="other">Instance of UpdateBreakTypeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateBreakTypeResponse">
            <summary>
            A response to a request to update a &#x60;BreakType&#x60;. Contains the requested &#x60;BreakType&#x60; objects. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeResponse.#ctor(Square.Connect.Model.BreakType,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateBreakTypeResponse" /> class.
            </summary>
            <param name="BreakType">The response object..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateBreakTypeResponse.BreakType">
            <summary>
            The response object.
            </summary>
            <value>The response object.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateBreakTypeResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeResponse.Equals(Square.Connect.Model.UpdateBreakTypeResponse)">
            <summary>
            Returns true if UpdateBreakTypeResponse instances are equal
            </summary>
            <param name="other">Instance of UpdateBreakTypeResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateBreakTypeResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateCustomerRequest">
            <summary>
            Defines the body parameters that can be provided in a request to the UpdateCustomer endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateCustomerRequest" /> class.
            </summary>
            <param name="GivenName">The customer&#39;s given (i.e., first) name..</param>
            <param name="FamilyName">The customer&#39;s family (i.e., last) name..</param>
            <param name="CompanyName">The name of the customer&#39;s company..</param>
            <param name="Nickname">A nickname for the customer..</param>
            <param name="EmailAddress">The customer&#39;s email address..</param>
            <param name="Address">The customer&#39;s physical address..</param>
            <param name="PhoneNumber">The customer&#39;s phone number..</param>
            <param name="ReferenceId">An optional second ID you can set to associate the customer with an entity in another system..</param>
            <param name="Note">An optional note to associate with the customer..</param>
            <param name="Birthday">The customer birthday in RFC-3339 format. Year is optional, timezone and times are not allowed. Example: &#x60;0000-09-01T00:00:00-00:00&#x60; for a birthday on September 1st. &#x60;1998-09-01T00:00:00-00:00&#x60; for a birthday on September 1st 1998..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.GivenName">
            <summary>
            The customer&#39;s given (i.e., first) name.
            </summary>
            <value>The customer&#39;s given (i.e., first) name.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.FamilyName">
            <summary>
            The customer&#39;s family (i.e., last) name.
            </summary>
            <value>The customer&#39;s family (i.e., last) name.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.CompanyName">
            <summary>
            The name of the customer&#39;s company.
            </summary>
            <value>The name of the customer&#39;s company.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Nickname">
            <summary>
            A nickname for the customer.
            </summary>
            <value>A nickname for the customer.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.EmailAddress">
            <summary>
            The customer&#39;s email address.
            </summary>
            <value>The customer&#39;s email address.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Address">
            <summary>
            The customer&#39;s physical address.
            </summary>
            <value>The customer&#39;s physical address.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.PhoneNumber">
            <summary>
            The customer&#39;s phone number.
            </summary>
            <value>The customer&#39;s phone number.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.ReferenceId">
            <summary>
            An optional second ID you can set to associate the customer with an entity in another system.
            </summary>
            <value>An optional second ID you can set to associate the customer with an entity in another system.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Note">
            <summary>
            An optional note to associate with the customer.
            </summary>
            <value>An optional note to associate with the customer.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Birthday">
            <summary>
            The customer birthday in RFC-3339 format. Year is optional, timezone and times are not allowed. Example: &#x60;0000-09-01T00:00:00-00:00&#x60; for a birthday on September 1st. &#x60;1998-09-01T00:00:00-00:00&#x60; for a birthday on September 1st 1998.
            </summary>
            <value>The customer birthday in RFC-3339 format. Year is optional, timezone and times are not allowed. Example: &#x60;0000-09-01T00:00:00-00:00&#x60; for a birthday on September 1st. &#x60;1998-09-01T00:00:00-00:00&#x60; for a birthday on September 1st 1998.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.Equals(Square.Connect.Model.UpdateCustomerRequest)">
            <summary>
            Returns true if UpdateCustomerRequest instances are equal
            </summary>
            <param name="other">Instance of UpdateCustomerRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateCustomerResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the UpdateCustomer endpoint.  One of &#x60;errors&#x60; or &#x60;customer&#x60; is present in a given response (never both).
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateCustomerResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Customer">The updated customer..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateCustomerResponse.Customer">
            <summary>
            The updated customer.
            </summary>
            <value>The updated customer.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.Equals(Square.Connect.Model.UpdateCustomerResponse)">
            <summary>
            Returns true if UpdateCustomerResponse instances are equal
            </summary>
            <param name="other">Instance of UpdateCustomerResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateItemModifierListsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemModifierListsRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemModifierListsRequest" /> class.
            </summary>
            <param name="ItemIds">The [CatalogItem](#type-catalogitem)s whose [CatalogModifierList](#type-catalogmodifierlist)s are being updated. (required).</param>
            <param name="ModifierListsToEnable">The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to enable for the [CatalogItem](#type-catalogitem)..</param>
            <param name="ModifierListsToDisable">The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to disable for the [CatalogItem](#type-catalogitem)..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsRequest.ItemIds">
            <summary>
            The [CatalogItem](#type-catalogitem)s whose [CatalogModifierList](#type-catalogmodifierlist)s are being updated.
            </summary>
            <value>The [CatalogItem](#type-catalogitem)s whose [CatalogModifierList](#type-catalogmodifierlist)s are being updated.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsRequest.ModifierListsToEnable">
            <summary>
            The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).
            </summary>
            <value>The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsRequest.ModifierListsToDisable">
            <summary>
            The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).
            </summary>
            <value>The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.Equals(Square.Connect.Model.UpdateItemModifierListsRequest)">
            <summary>
            Returns true if UpdateItemModifierListsRequest instances are equal
            </summary>
            <param name="other">Instance of UpdateItemModifierListsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateItemModifierListsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemModifierListsResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="UpdatedAt">The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsResponse.UpdatedAt">
            <summary>
            The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.
            </summary>
            <value>The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.Equals(Square.Connect.Model.UpdateItemModifierListsResponse)">
            <summary>
            Returns true if UpdateItemModifierListsResponse instances are equal
            </summary>
            <param name="other">Instance of UpdateItemModifierListsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateItemTaxesRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemTaxesRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemTaxesRequest" /> class.
            </summary>
            <param name="ItemIds">The [CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax](#type-catalogtax)es are being updated. (required).</param>
            <param name="TaxesToEnable">The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem](#type-catalogitem)..</param>
            <param name="TaxesToDisable">The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem](#type-catalogitem)..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesRequest.ItemIds">
            <summary>
            The [CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax](#type-catalogtax)es are being updated.
            </summary>
            <value>The [CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax](#type-catalogtax)es are being updated.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesRequest.TaxesToEnable">
            <summary>
            The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).
            </summary>
            <value>The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesRequest.TaxesToDisable">
            <summary>
            The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).
            </summary>
            <value>The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.Equals(Square.Connect.Model.UpdateItemTaxesRequest)">
            <summary>
            Returns true if UpdateItemTaxesRequest instances are equal
            </summary>
            <param name="other">Instance of UpdateItemTaxesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateItemTaxesResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemTaxesResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="UpdatedAt">The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesResponse.UpdatedAt">
            <summary>
            The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.
            </summary>
            <value>The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.Equals(Square.Connect.Model.UpdateItemTaxesResponse)">
            <summary>
            Returns true if UpdateItemTaxesResponse instances are equal
            </summary>
            <param name="other">Instance of UpdateItemTaxesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateShiftRequest">
            <summary>
            A request to update a &#x60;Shift&#x60; object.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateShiftRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftRequest.#ctor(Square.Connect.Model.Shift)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateShiftRequest" /> class.
            </summary>
            <param name="Shift">The updated &#x60;Shift&#x60; object. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateShiftRequest.Shift">
            <summary>
            The updated &#x60;Shift&#x60; object.
            </summary>
            <value>The updated &#x60;Shift&#x60; object.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftRequest.Equals(Square.Connect.Model.UpdateShiftRequest)">
            <summary>
            Returns true if UpdateShiftRequest instances are equal
            </summary>
            <param name="other">Instance of UpdateShiftRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateShiftResponse">
            <summary>
            The response to a request to update a &#x60;Shift&#x60;. Contains the updated &#x60;Shift&#x60; object. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftResponse.#ctor(Square.Connect.Model.Shift,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateShiftResponse" /> class.
            </summary>
            <param name="Shift">The updated &#x60;Shift&#x60;..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateShiftResponse.Shift">
            <summary>
            The updated &#x60;Shift&#x60;.
            </summary>
            <value>The updated &#x60;Shift&#x60;.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateShiftResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftResponse.Equals(Square.Connect.Model.UpdateShiftResponse)">
            <summary>
            Returns true if UpdateShiftResponse instances are equal
            </summary>
            <param name="other">Instance of UpdateShiftResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateShiftResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateWorkweekConfigRequest">
            <summary>
            A request to update a &#x60;WorkweekConfig&#x60; object
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigRequest.#ctor(Square.Connect.Model.WorkweekConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateWorkweekConfigRequest" /> class.
            </summary>
            <param name="WorkweekConfig">The updated &#x60;WorkweekConfig&#x60; object..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateWorkweekConfigRequest.WorkweekConfig">
            <summary>
            The updated &#x60;WorkweekConfig&#x60; object.
            </summary>
            <value>The updated &#x60;WorkweekConfig&#x60; object.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigRequest.Equals(Square.Connect.Model.UpdateWorkweekConfigRequest)">
            <summary>
            Returns true if UpdateWorkweekConfigRequest instances are equal
            </summary>
            <param name="other">Instance of UpdateWorkweekConfigRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpdateWorkweekConfigResponse">
            <summary>
            The response to a request to update a &#x60;WorkweekConfig&#x60; object. Contains the updated &#x60;WorkweekConfig&#x60; object. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigResponse.#ctor(Square.Connect.Model.WorkweekConfig,System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateWorkweekConfigResponse" /> class.
            </summary>
            <param name="WorkweekConfig">The response object..</param>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.UpdateWorkweekConfigResponse.WorkweekConfig">
            <summary>
            The response object.
            </summary>
            <value>The response object.</value>
        </member>
        <member name="P:Square.Connect.Model.UpdateWorkweekConfigResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigResponse.Equals(Square.Connect.Model.UpdateWorkweekConfigResponse)">
            <summary>
            Returns true if UpdateWorkweekConfigResponse instances are equal
            </summary>
            <param name="other">Instance of UpdateWorkweekConfigResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpdateWorkweekConfigResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpsertCatalogObjectRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpsertCatalogObjectRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.#ctor(System.String,Square.Connect.Model.CatalogObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpsertCatalogObjectRequest" /> class.
            </summary>
            <param name="IdempotencyKey">A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you&#39;re unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](/basics/api101/idempotency) for more information. (required).</param>
            <param name="_Object">A [CatalogObject](#type-catalogobject) to be created or updated. - For updates, the object must be active (the &#x60;is_deleted&#x60; field is not &#x60;true&#x60;). - For creates, the object ID must start with &#x60;#&#x60;. The provided ID is replaced with a server-generated ID. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectRequest.IdempotencyKey">
            <summary>
            A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you&#39;re unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](/basics/api101/idempotency) for more information.
            </summary>
            <value>A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you&#39;re unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](/basics/api101/idempotency) for more information.</value>
        </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectRequest._Object">
            <summary>
            A [CatalogObject](#type-catalogobject) to be created or updated. - For updates, the object must be active (the &#x60;is_deleted&#x60; field is not &#x60;true&#x60;). - For creates, the object ID must start with &#x60;#&#x60;. The provided ID is replaced with a server-generated ID.
            </summary>
            <value>A [CatalogObject](#type-catalogobject) to be created or updated. - For updates, the object must be active (the &#x60;is_deleted&#x60; field is not &#x60;true&#x60;). - For creates, the object ID must start with &#x60;#&#x60;. The provided ID is replaced with a server-generated ID.</value>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.Equals(Square.Connect.Model.UpsertCatalogObjectRequest)">
            <summary>
            Returns true if UpsertCatalogObjectRequest instances are equal
            </summary>
            <param name="other">Instance of UpsertCatalogObjectRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.UpsertCatalogObjectResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.CatalogObject,System.Collections.Generic.List{Square.Connect.Model.CatalogIdMapping})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.UpsertCatalogObjectResponse" /> class.
            </summary>
            <param name="Errors">The set of [Error](#type-error)s encountered..</param>
            <param name="CatalogObject">The created [CatalogObject](#type-catalogobject)..</param>
            <param name="IdMappings">The mapping between client and server IDs for this Upsert..</param>
        </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectResponse.Errors">
            <summary>
            The set of [Error](#type-error)s encountered.
            </summary>
            <value>The set of [Error](#type-error)s encountered.</value>
        </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectResponse.CatalogObject">
            <summary>
            The created [CatalogObject](#type-catalogobject).
            </summary>
            <value>The created [CatalogObject](#type-catalogobject).</value>
        </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectResponse.IdMappings">
            <summary>
            The mapping between client and server IDs for this Upsert.
            </summary>
            <value>The mapping between client and server IDs for this Upsert.</value>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.Equals(Square.Connect.Model.UpsertCatalogObjectResponse)">
            <summary>
            Returns true if UpsertCatalogObjectResponse instances are equal
            </summary>
            <param name="other">Instance of UpsertCatalogObjectResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1AdjustInventoryRequest">
            <summary>
            V1AdjustInventoryRequest
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1AdjustInventoryRequest.AdjustmentTypeEnum">
            <summary>
            The reason for the inventory adjustment. See [V1AdjustInventoryRequestAdjustmentType](#type-v1adjustinventoryrequestadjustmenttype) for possible values
            </summary>
            <value>The reason for the inventory adjustment. See [V1AdjustInventoryRequestAdjustmentType](#type-v1adjustinventoryrequestadjustmenttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1AdjustInventoryRequest.AdjustmentTypeEnum.SALE">
            <summary>
            Enum SALE for "SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1AdjustInventoryRequest.AdjustmentTypeEnum.RECEIVESTOCK">
            <summary>
            Enum RECEIVESTOCK for "RECEIVE_STOCK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1AdjustInventoryRequest.AdjustmentTypeEnum.MANUALADJUST">
            <summary>
            Enum MANUALADJUST for "MANUAL_ADJUST"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1AdjustInventoryRequest.AdjustmentType">
            <summary>
            The reason for the inventory adjustment. See [V1AdjustInventoryRequestAdjustmentType](#type-v1adjustinventoryrequestadjustmenttype) for possible values
            </summary>
            <value>The reason for the inventory adjustment. See [V1AdjustInventoryRequestAdjustmentType](#type-v1adjustinventoryrequestadjustmenttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.#ctor(System.Nullable{System.Decimal},System.Nullable{Square.Connect.Model.V1AdjustInventoryRequest.AdjustmentTypeEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1AdjustInventoryRequest" /> class.
            </summary>
            <param name="QuantityDelta">The number to adjust the variation&#39;s quantity by..</param>
            <param name="AdjustmentType">The reason for the inventory adjustment. See [V1AdjustInventoryRequestAdjustmentType](#type-v1adjustinventoryrequestadjustmenttype) for possible values.</param>
            <param name="Memo">A note about the inventory adjustment..</param>
        </member>
        <member name="P:Square.Connect.Model.V1AdjustInventoryRequest.QuantityDelta">
            <summary>
            The number to adjust the variation&#39;s quantity by.
            </summary>
            <value>The number to adjust the variation&#39;s quantity by.</value>
        </member>
        <member name="P:Square.Connect.Model.V1AdjustInventoryRequest.Memo">
            <summary>
            A note about the inventory adjustment.
            </summary>
            <value>A note about the inventory adjustment.</value>
        </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.Equals(Square.Connect.Model.V1AdjustInventoryRequest)">
            <summary>
            Returns true if V1AdjustInventoryRequest instances are equal
            </summary>
            <param name="other">Instance of V1AdjustInventoryRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1AdjustInventoryRequestAdjustmentType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1AdjustInventoryRequestAdjustmentType.SALE">
            <summary>
            Enum SALE for "SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1AdjustInventoryRequestAdjustmentType.RECEIVESTOCK">
            <summary>
            Enum RECEIVESTOCK for "RECEIVE_STOCK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1AdjustInventoryRequestAdjustmentType.MANUALADJUST">
            <summary>
            Enum MANUALADJUST for "MANUAL_ADJUST"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ApplyFeeRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyFeeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ApplyFeeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyFeeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyFeeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyFeeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyFeeRequest.Equals(Square.Connect.Model.V1ApplyFeeRequest)">
            <summary>
            Returns true if V1ApplyFeeRequest instances are equal
            </summary>
            <param name="other">Instance of V1ApplyFeeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyFeeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ApplyModifierListRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyModifierListRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ApplyModifierListRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyModifierListRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyModifierListRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyModifierListRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyModifierListRequest.Equals(Square.Connect.Model.V1ApplyModifierListRequest)">
            <summary>
            Returns true if V1ApplyModifierListRequest instances are equal
            </summary>
            <param name="other">Instance of V1ApplyModifierListRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ApplyModifierListRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1BankAccount">
            <summary>
            V1BankAccount
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1BankAccount.TypeEnum">
            <summary>
            The bank account's type (for example, savings or checking). See [V1BankAccountType](#type-v1bankaccounttype) for possible values
            </summary>
            <value>The bank account's type (for example, savings or checking). See [V1BankAccountType](#type-v1bankaccounttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.BUSINESSCHECKING">
            <summary>
            Enum BUSINESSCHECKING for "BUSINESS_CHECKING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.CHECKING">
            <summary>
            Enum CHECKING for "CHECKING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.INVESTMENT">
            <summary>
            Enum INVESTMENT for "INVESTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.LOAN">
            <summary>
            Enum LOAN for "LOAN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.SAVINGS">
            <summary>
            Enum SAVINGS for "SAVINGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1BankAccount.Type">
            <summary>
            The bank account's type (for example, savings or checking). See [V1BankAccountType](#type-v1bankaccounttype) for possible values
            </summary>
            <value>The bank account's type (for example, savings or checking). See [V1BankAccountType](#type-v1bankaccounttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1BankAccount.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1BankAccount.TypeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1BankAccount" /> class.
            </summary>
            <param name="Id">The bank account&#39;s Square-issued ID..</param>
            <param name="MerchantId">The Square-issued ID of the merchant associated with the bank account..</param>
            <param name="BankName">The name of the bank that manages the account..</param>
            <param name="Name">The name associated with the bank account..</param>
            <param name="RoutingNumber">The bank account&#39;s routing number..</param>
            <param name="AccountNumberSuffix">The last few digits of the bank account number..</param>
            <param name="CurrencyCode">The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD..</param>
            <param name="Type">The bank account&#39;s type (for example, savings or checking). See [V1BankAccountType](#type-v1bankaccounttype) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.V1BankAccount.Id">
            <summary>
            The bank account&#39;s Square-issued ID.
            </summary>
            <value>The bank account&#39;s Square-issued ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1BankAccount.MerchantId">
            <summary>
            The Square-issued ID of the merchant associated with the bank account.
            </summary>
            <value>The Square-issued ID of the merchant associated with the bank account.</value>
        </member>
        <member name="P:Square.Connect.Model.V1BankAccount.BankName">
            <summary>
            The name of the bank that manages the account.
            </summary>
            <value>The name of the bank that manages the account.</value>
        </member>
        <member name="P:Square.Connect.Model.V1BankAccount.Name">
            <summary>
            The name associated with the bank account.
            </summary>
            <value>The name associated with the bank account.</value>
        </member>
        <member name="P:Square.Connect.Model.V1BankAccount.RoutingNumber">
            <summary>
            The bank account&#39;s routing number.
            </summary>
            <value>The bank account&#39;s routing number.</value>
        </member>
        <member name="P:Square.Connect.Model.V1BankAccount.AccountNumberSuffix">
            <summary>
            The last few digits of the bank account number.
            </summary>
            <value>The last few digits of the bank account number.</value>
        </member>
        <member name="P:Square.Connect.Model.V1BankAccount.CurrencyCode">
            <summary>
            The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD.
            </summary>
            <value>The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD.</value>
        </member>
        <member name="M:Square.Connect.Model.V1BankAccount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1BankAccount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1BankAccount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1BankAccount.Equals(Square.Connect.Model.V1BankAccount)">
            <summary>
            Returns true if V1BankAccount instances are equal
            </summary>
            <param name="other">Instance of V1BankAccount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1BankAccount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1BankAccountType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccountType.BUSINESSCHECKING">
            <summary>
            Enum BUSINESSCHECKING for "BUSINESS_CHECKING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccountType.CHECKING">
            <summary>
            Enum CHECKING for "CHECKING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccountType.INVESTMENT">
            <summary>
            Enum INVESTMENT for "INVESTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccountType.LOAN">
            <summary>
            Enum LOAN for "LOAN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccountType.SAVINGS">
            <summary>
            Enum SAVINGS for "SAVINGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1BankAccountType.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1CashDrawerEvent">
            <summary>
            V1CashDrawerEvent
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum">
            <summary>
            The type of event that occurred. See [V1CashDrawerEventEventType](#type-v1cashdrawereventeventtype) for possible values
            </summary>
            <value>The type of event that occurred. See [V1CashDrawerEventEventType](#type-v1cashdrawereventeventtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.NOSALE">
            <summary>
            Enum NOSALE for "NO_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.CASHTENDERPAYMENT">
            <summary>
            Enum CASHTENDERPAYMENT for "CASH_TENDER_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.OTHERTENDERPAYMENT">
            <summary>
            Enum OTHERTENDERPAYMENT for "OTHER_TENDER_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.CASHTENDERCANCELEDPAYMENT">
            <summary>
            Enum CASHTENDERCANCELEDPAYMENT for "CASH_TENDER_CANCELED_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.OTHERTENDERCANCELEDPAYMENT">
            <summary>
            Enum OTHERTENDERCANCELEDPAYMENT for "OTHER_TENDER_CANCELED_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.CASHTENDERREFUND">
            <summary>
            Enum CASHTENDERREFUND for "CASH_TENDER_REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.OTHERTENDERREFUND">
            <summary>
            Enum OTHERTENDERREFUND for "OTHER_TENDER_REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.PAIDIN">
            <summary>
            Enum PAIDIN for "PAID_IN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.PAIDOUT">
            <summary>
            Enum PAIDOUT for "PAID_OUT"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.EventType">
            <summary>
            The type of event that occurred. See [V1CashDrawerEventEventType](#type-v1cashdrawereventeventtype) for possible values
            </summary>
            <value>The type of event that occurred. See [V1CashDrawerEventEventType](#type-v1cashdrawereventeventtype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum},Square.Connect.Model.V1Money,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CashDrawerEvent" /> class.
            </summary>
            <param name="Id">The event&#39;s unique ID..</param>
            <param name="EmployeeId">The ID of the employee that created the event..</param>
            <param name="EventType">The type of event that occurred. See [V1CashDrawerEventEventType](#type-v1cashdrawereventeventtype) for possible values.</param>
            <param name="EventMoney">The amount of money that was added to or removed from the cash drawer because of the event. This value can be positive (for added money) or negative (for removed money)..</param>
            <param name="CreatedAt">The time when the event occurred, in ISO 8601 format..</param>
            <param name="Description">An optional description of the event, entered by the employee that created it..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.Id">
            <summary>
            The event&#39;s unique ID.
            </summary>
            <value>The event&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.EmployeeId">
            <summary>
            The ID of the employee that created the event.
            </summary>
            <value>The ID of the employee that created the event.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.EventMoney">
            <summary>
            The amount of money that was added to or removed from the cash drawer because of the event. This value can be positive (for added money) or negative (for removed money).
            </summary>
            <value>The amount of money that was added to or removed from the cash drawer because of the event. This value can be positive (for added money) or negative (for removed money).</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.CreatedAt">
            <summary>
            The time when the event occurred, in ISO 8601 format.
            </summary>
            <value>The time when the event occurred, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.Description">
            <summary>
            An optional description of the event, entered by the employee that created it.
            </summary>
            <value>An optional description of the event, entered by the employee that created it.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.Equals(Square.Connect.Model.V1CashDrawerEvent)">
            <summary>
            Returns true if V1CashDrawerEvent instances are equal
            </summary>
            <param name="other">Instance of V1CashDrawerEvent to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CashDrawerEventEventType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEventEventType.NOSALE">
            <summary>
            Enum NOSALE for "NO_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEventEventType.CASHTENDERPAYMENT">
            <summary>
            Enum CASHTENDERPAYMENT for "CASH_TENDER_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEventEventType.OTHERTENDERPAYMENT">
            <summary>
            Enum OTHERTENDERPAYMENT for "OTHER_TENDER_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEventEventType.CASHTENDERCANCELEDPAYMENT">
            <summary>
            Enum CASHTENDERCANCELEDPAYMENT for "CASH_TENDER_CANCELED_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEventEventType.OTHERTENDERCANCELEDPAYMENT">
            <summary>
            Enum OTHERTENDERCANCELEDPAYMENT for "OTHER_TENDER_CANCELED_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEventEventType.CASHTENDERREFUND">
            <summary>
            Enum CASHTENDERREFUND for "CASH_TENDER_REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEventEventType.OTHERTENDERREFUND">
            <summary>
            Enum OTHERTENDERREFUND for "OTHER_TENDER_REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEventEventType.PAIDIN">
            <summary>
            Enum PAIDIN for "PAID_IN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEventEventType.PAIDOUT">
            <summary>
            Enum PAIDOUT for "PAID_OUT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1CashDrawerShift">
            <summary>
            Contains details for a single cash drawer shift.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1CashDrawerShift.EventTypeEnum">
            <summary>
            The shift's current state. See [V1CashDrawerShiftEventType](#type-v1cashdrawershifteventtype) for possible values
            </summary>
            <value>The shift's current state. See [V1CashDrawerShiftEventType](#type-v1cashdrawershifteventtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerShift.EventTypeEnum.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerShift.EventTypeEnum.ENDED">
            <summary>
            Enum ENDED for "ENDED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerShift.EventTypeEnum.CLOSED">
            <summary>
            Enum CLOSED for "CLOSED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.EventType">
            <summary>
            The shift's current state. See [V1CashDrawerShiftEventType](#type-v1cashdrawershifteventtype) for possible values
            </summary>
            <value>The shift's current state. See [V1CashDrawerShiftEventType](#type-v1cashdrawershifteventtype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.#ctor(System.String,System.Nullable{Square.Connect.Model.V1CashDrawerShift.EventTypeEnum},System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.Device,System.Collections.Generic.List{Square.Connect.Model.V1CashDrawerEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CashDrawerShift" /> class.
            </summary>
            <param name="Id">The shift&#39;s unique ID..</param>
            <param name="EventType">The shift&#39;s current state. See [V1CashDrawerShiftEventType](#type-v1cashdrawershifteventtype) for possible values.</param>
            <param name="OpenedAt">The time when the shift began, in ISO 8601 format..</param>
            <param name="EndedAt">The time when the shift ended, in ISO 8601 format..</param>
            <param name="ClosedAt">The time when the shift was closed, in ISO 8601 format..</param>
            <param name="EmployeeIds">The IDs of all employees that were logged into Square Register at some point during the cash drawer shift..</param>
            <param name="OpeningEmployeeId">The ID of the employee that started the cash drawer shift..</param>
            <param name="EndingEmployeeId">The ID of the employee that ended the cash drawer shift..</param>
            <param name="ClosingEmployeeId">The ID of the employee that closed the cash drawer shift by auditing the cash drawer&#39;s contents..</param>
            <param name="Description">A description of the cash drawer shift..</param>
            <param name="StartingCashMoney">The amount of money in the cash drawer at the start of the shift..</param>
            <param name="CashPaymentMoney">The amount of money added to the cash drawer from cash payments..</param>
            <param name="CashRefundsMoney">The amount of money removed from the cash drawer from cash refunds. This value is always negative or zero..</param>
            <param name="CashPaidInMoney">The amount of money added to the cash drawer for reasons other than cash payments..</param>
            <param name="CashPaidOutMoney">The amount of money removed from the cash drawer for reasons other than cash refunds..</param>
            <param name="ExpectedCashMoney">The amount of money that should be in the cash drawer at the end of the shift, based on the shift&#39;s other money amounts..</param>
            <param name="ClosedCashMoney">The amount of money found in the cash drawer at the end of the shift by an auditing employee..</param>
            <param name="Device">The device running Square Register that was connected to the cash drawer..</param>
            <param name="Events">All of the events (payments, refunds, and so on) that involved the cash drawer during the shift..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.Id">
            <summary>
            The shift&#39;s unique ID.
            </summary>
            <value>The shift&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.OpenedAt">
            <summary>
            The time when the shift began, in ISO 8601 format.
            </summary>
            <value>The time when the shift began, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.EndedAt">
            <summary>
            The time when the shift ended, in ISO 8601 format.
            </summary>
            <value>The time when the shift ended, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.ClosedAt">
            <summary>
            The time when the shift was closed, in ISO 8601 format.
            </summary>
            <value>The time when the shift was closed, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.EmployeeIds">
            <summary>
            The IDs of all employees that were logged into Square Register at some point during the cash drawer shift.
            </summary>
            <value>The IDs of all employees that were logged into Square Register at some point during the cash drawer shift.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.OpeningEmployeeId">
            <summary>
            The ID of the employee that started the cash drawer shift.
            </summary>
            <value>The ID of the employee that started the cash drawer shift.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.EndingEmployeeId">
            <summary>
            The ID of the employee that ended the cash drawer shift.
            </summary>
            <value>The ID of the employee that ended the cash drawer shift.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.ClosingEmployeeId">
            <summary>
            The ID of the employee that closed the cash drawer shift by auditing the cash drawer&#39;s contents.
            </summary>
            <value>The ID of the employee that closed the cash drawer shift by auditing the cash drawer&#39;s contents.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.Description">
            <summary>
            A description of the cash drawer shift.
            </summary>
            <value>A description of the cash drawer shift.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.StartingCashMoney">
            <summary>
            The amount of money in the cash drawer at the start of the shift.
            </summary>
            <value>The amount of money in the cash drawer at the start of the shift.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.CashPaymentMoney">
            <summary>
            The amount of money added to the cash drawer from cash payments.
            </summary>
            <value>The amount of money added to the cash drawer from cash payments.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.CashRefundsMoney">
            <summary>
            The amount of money removed from the cash drawer from cash refunds. This value is always negative or zero.
            </summary>
            <value>The amount of money removed from the cash drawer from cash refunds. This value is always negative or zero.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.CashPaidInMoney">
            <summary>
            The amount of money added to the cash drawer for reasons other than cash payments.
            </summary>
            <value>The amount of money added to the cash drawer for reasons other than cash payments.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.CashPaidOutMoney">
            <summary>
            The amount of money removed from the cash drawer for reasons other than cash refunds.
            </summary>
            <value>The amount of money removed from the cash drawer for reasons other than cash refunds.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.ExpectedCashMoney">
            <summary>
            The amount of money that should be in the cash drawer at the end of the shift, based on the shift&#39;s other money amounts.
            </summary>
            <value>The amount of money that should be in the cash drawer at the end of the shift, based on the shift&#39;s other money amounts.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.ClosedCashMoney">
            <summary>
            The amount of money found in the cash drawer at the end of the shift by an auditing employee.
            </summary>
            <value>The amount of money found in the cash drawer at the end of the shift by an auditing employee.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.Device">
            <summary>
            The device running Square Register that was connected to the cash drawer.
            </summary>
            <value>The device running Square Register that was connected to the cash drawer.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.Events">
            <summary>
            All of the events (payments, refunds, and so on) that involved the cash drawer during the shift.
            </summary>
            <value>All of the events (payments, refunds, and so on) that involved the cash drawer during the shift.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.Equals(Square.Connect.Model.V1CashDrawerShift)">
            <summary>
            Returns true if V1CashDrawerShift instances are equal
            </summary>
            <param name="other">Instance of V1CashDrawerShift to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CashDrawerShiftEventType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerShiftEventType.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerShiftEventType.ENDED">
            <summary>
            Enum ENDED for "ENDED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CashDrawerShiftEventType.CLOSED">
            <summary>
            Enum CLOSED for "CLOSED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Category">
            <summary>
            V1Category
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1Category.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Category" /> class.
            </summary>
            <param name="Id">The category&#39;s unique ID..</param>
            <param name="Name">The category&#39;s name..</param>
            <param name="V2Id">The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Category.Id">
            <summary>
            The category&#39;s unique ID.
            </summary>
            <value>The category&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Category.Name">
            <summary>
            The category&#39;s name.
            </summary>
            <value>The category&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Category.V2Id">
            <summary>
            The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
            </summary>
            <value>The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Category.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Category.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Category.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Category.Equals(Square.Connect.Model.V1Category)">
            <summary>
            Returns true if V1Category instances are equal
            </summary>
            <param name="other">Instance of V1Category to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Category.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreateCategoryRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreateCategoryRequest.#ctor(Square.Connect.Model.V1Category)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateCategoryRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreateCategoryRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateCategoryRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateCategoryRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateCategoryRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateCategoryRequest.Equals(Square.Connect.Model.V1CreateCategoryRequest)">
            <summary>
            Returns true if V1CreateCategoryRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreateCategoryRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateCategoryRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreateDiscountRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreateDiscountRequest.#ctor(Square.Connect.Model.V1Discount)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateDiscountRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreateDiscountRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateDiscountRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateDiscountRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateDiscountRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateDiscountRequest.Equals(Square.Connect.Model.V1CreateDiscountRequest)">
            <summary>
            Returns true if V1CreateDiscountRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreateDiscountRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateDiscountRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreateEmployeeRoleRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreateEmployeeRoleRequest.#ctor(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateEmployeeRoleRequest" /> class.
            </summary>
            <param name="EmployeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreateEmployeeRoleRequest.EmployeeRole">
            <summary>
            An EmployeeRole object with a name and permissions, and an optional owner flag.
            </summary>
            <value>An EmployeeRole object with a name and permissions, and an optional owner flag.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateEmployeeRoleRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateEmployeeRoleRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateEmployeeRoleRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateEmployeeRoleRequest.Equals(Square.Connect.Model.V1CreateEmployeeRoleRequest)">
            <summary>
            Returns true if V1CreateEmployeeRoleRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreateEmployeeRoleRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateEmployeeRoleRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreateFeeRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreateFeeRequest.#ctor(Square.Connect.Model.V1Fee)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateFeeRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreateFeeRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateFeeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateFeeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateFeeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateFeeRequest.Equals(Square.Connect.Model.V1CreateFeeRequest)">
            <summary>
            Returns true if V1CreateFeeRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreateFeeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateFeeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreateItemRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreateItemRequest.#ctor(Square.Connect.Model.V1Item)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateItemRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreateItemRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateItemRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateItemRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateItemRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateItemRequest.Equals(Square.Connect.Model.V1CreateItemRequest)">
            <summary>
            Returns true if V1CreateItemRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreateItemRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateItemRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreateModifierListRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierListRequest.#ctor(Square.Connect.Model.V1ModifierList)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateModifierListRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreateModifierListRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierListRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierListRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierListRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierListRequest.Equals(Square.Connect.Model.V1CreateModifierListRequest)">
            <summary>
            Returns true if V1CreateModifierListRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreateModifierListRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierListRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreateModifierOptionRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierOptionRequest.#ctor(Square.Connect.Model.V1ModifierOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateModifierOptionRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreateModifierOptionRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierOptionRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierOptionRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierOptionRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierOptionRequest.Equals(Square.Connect.Model.V1CreateModifierOptionRequest)">
            <summary>
            Returns true if V1CreateModifierOptionRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreateModifierOptionRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateModifierOptionRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreatePageRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreatePageRequest.#ctor(Square.Connect.Model.V1Page)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreatePageRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreatePageRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreatePageRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreatePageRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreatePageRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreatePageRequest.Equals(Square.Connect.Model.V1CreatePageRequest)">
            <summary>
            Returns true if V1CreatePageRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreatePageRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreatePageRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreateRefundRequest">
            <summary>
            V1CreateRefundRequest
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1CreateRefundRequest.TypeEnum">
            <summary>
            TThe type of refund (FULL or PARTIAL). See [V1CreateRefundRequestType](#type-v1createrefundrequesttype) for possible values
            </summary>
            <value>TThe type of refund (FULL or PARTIAL). See [V1CreateRefundRequestType](#type-v1createrefundrequesttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1CreateRefundRequest.TypeEnum.FULL">
            <summary>
            Enum FULL for "FULL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CreateRefundRequest.TypeEnum.PARTIAL">
            <summary>
            Enum PARTIAL for "PARTIAL"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.Type">
            <summary>
            TThe type of refund (FULL or PARTIAL). See [V1CreateRefundRequestType](#type-v1createrefundrequesttype) for possible values
            </summary>
            <value>TThe type of refund (FULL or PARTIAL). See [V1CreateRefundRequestType](#type-v1createrefundrequesttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateRefundRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.#ctor(System.String,System.Nullable{Square.Connect.Model.V1CreateRefundRequest.TypeEnum},System.String,Square.Connect.Model.V1Money,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateRefundRequest" /> class.
            </summary>
            <param name="PaymentId">The ID of the payment to refund. If you are creating a &#x60;PARTIAL&#x60; refund for a split tender payment, instead provide the id of the particular tender you want to refund. (required).</param>
            <param name="Type">TThe type of refund (FULL or PARTIAL). See [V1CreateRefundRequestType](#type-v1createrefundrequesttype) for possible values (required).</param>
            <param name="Reason">The reason for the refund. (required).</param>
            <param name="RefundedMoney">The amount of money to refund. Required only for PARTIAL refunds..</param>
            <param name="RequestIdempotenceKey">An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.PaymentId">
            <summary>
            The ID of the payment to refund. If you are creating a &#x60;PARTIAL&#x60; refund for a split tender payment, instead provide the id of the particular tender you want to refund.
            </summary>
            <value>The ID of the payment to refund. If you are creating a &#x60;PARTIAL&#x60; refund for a split tender payment, instead provide the id of the particular tender you want to refund.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.Reason">
            <summary>
            The reason for the refund.
            </summary>
            <value>The reason for the refund.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.RefundedMoney">
            <summary>
            The amount of money to refund. Required only for PARTIAL refunds.
            </summary>
            <value>The amount of money to refund. Required only for PARTIAL refunds.</value>
        </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.RequestIdempotenceKey">
            <summary>
            An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.
            </summary>
            <value>An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.Equals(Square.Connect.Model.V1CreateRefundRequest)">
            <summary>
            Returns true if V1CreateRefundRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreateRefundRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1CreateRefundRequestType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1CreateRefundRequestType.FULL">
            <summary>
            Enum FULL for "FULL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1CreateRefundRequestType.PARTIAL">
            <summary>
            Enum PARTIAL for "PARTIAL"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1CreateVariationRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1CreateVariationRequest.#ctor(Square.Connect.Model.V1Variation)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateVariationRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details..</param>
        </member>
        <member name="P:Square.Connect.Model.V1CreateVariationRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1CreateVariationRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateVariationRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateVariationRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateVariationRequest.Equals(Square.Connect.Model.V1CreateVariationRequest)">
            <summary>
            Returns true if V1CreateVariationRequest instances are equal
            </summary>
            <param name="other">Instance of V1CreateVariationRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1CreateVariationRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeleteCategoryRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteCategoryRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeleteCategoryRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteCategoryRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteCategoryRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteCategoryRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteCategoryRequest.Equals(Square.Connect.Model.V1DeleteCategoryRequest)">
            <summary>
            Returns true if V1DeleteCategoryRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeleteCategoryRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteCategoryRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeleteDiscountRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteDiscountRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeleteDiscountRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteDiscountRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteDiscountRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteDiscountRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteDiscountRequest.Equals(Square.Connect.Model.V1DeleteDiscountRequest)">
            <summary>
            Returns true if V1DeleteDiscountRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeleteDiscountRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteDiscountRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeleteFeeRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteFeeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeleteFeeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteFeeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteFeeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteFeeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteFeeRequest.Equals(Square.Connect.Model.V1DeleteFeeRequest)">
            <summary>
            Returns true if V1DeleteFeeRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeleteFeeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteFeeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeleteItemRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteItemRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeleteItemRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteItemRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteItemRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteItemRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteItemRequest.Equals(Square.Connect.Model.V1DeleteItemRequest)">
            <summary>
            Returns true if V1DeleteItemRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeleteItemRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteItemRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeleteModifierListRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierListRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeleteModifierListRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierListRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierListRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierListRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierListRequest.Equals(Square.Connect.Model.V1DeleteModifierListRequest)">
            <summary>
            Returns true if V1DeleteModifierListRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeleteModifierListRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierListRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeleteModifierOptionRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierOptionRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeleteModifierOptionRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierOptionRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierOptionRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierOptionRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierOptionRequest.Equals(Square.Connect.Model.V1DeleteModifierOptionRequest)">
            <summary>
            Returns true if V1DeleteModifierOptionRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeleteModifierOptionRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteModifierOptionRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeletePageCellRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageCellRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeletePageCellRequest" /> class.
            </summary>
            <param name="Row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row..</param>
            <param name="Column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column..</param>
        </member>
        <member name="P:Square.Connect.Model.V1DeletePageCellRequest.Row">
            <summary>
            The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
            </summary>
            <value>The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.</value>
        </member>
        <member name="P:Square.Connect.Model.V1DeletePageCellRequest.Column">
            <summary>
            The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
            </summary>
            <value>The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.</value>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageCellRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageCellRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageCellRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageCellRequest.Equals(Square.Connect.Model.V1DeletePageCellRequest)">
            <summary>
            Returns true if V1DeletePageCellRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeletePageCellRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageCellRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeletePageRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeletePageRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageRequest.Equals(Square.Connect.Model.V1DeletePageRequest)">
            <summary>
            Returns true if V1DeletePageRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeletePageRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeletePageRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeleteTimecardRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeleteTimecardRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardRequest.Equals(Square.Connect.Model.V1DeleteTimecardRequest)">
            <summary>
            Returns true if V1DeleteTimecardRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeleteTimecardRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeleteTimecardResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeleteTimecardResponse" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardResponse.Equals(Square.Connect.Model.V1DeleteTimecardResponse)">
            <summary>
            Returns true if V1DeleteTimecardResponse instances are equal
            </summary>
            <param name="other">Instance of V1DeleteTimecardResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteTimecardResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DeleteVariationRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteVariationRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1DeleteVariationRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteVariationRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteVariationRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteVariationRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteVariationRequest.Equals(Square.Connect.Model.V1DeleteVariationRequest)">
            <summary>
            Returns true if V1DeleteVariationRequest instances are equal
            </summary>
            <param name="other">Instance of V1DeleteVariationRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1DeleteVariationRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1Discount">
            <summary>
            V1Discount
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Discount.DiscountTypeEnum">
            <summary>
            Indicates whether the discount is a FIXED value or entered at the time of sale. See [V1DiscountDiscountType](#type-v1discountdiscounttype) for possible values
            </summary>
            <value>Indicates whether the discount is a FIXED value or entered at the time of sale. See [V1DiscountDiscountType](#type-v1discountdiscounttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.DiscountTypeEnum.FIXED">
            <summary>
            Enum FIXED for "FIXED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.DiscountTypeEnum.VARIABLEPERCENTAGE">
            <summary>
            Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.DiscountTypeEnum.VARIABLEAMOUNT">
            <summary>
            Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Discount.ColorEnum">
            <summary>
            The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6. See [V1DiscountColor](#type-v1discountcolor) for possible values
            </summary>
            <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6. See [V1DiscountColor](#type-v1discountcolor) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._9da2a6">
            <summary>
            Enum _9da2a6 for "9da2a6"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._4ab200">
            <summary>
            Enum _4ab200 for "4ab200"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._0b8000">
            <summary>
            Enum _0b8000 for "0b8000"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._2952cc">
            <summary>
            Enum _2952cc for "2952cc"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum.A82ee5">
            <summary>
            Enum A82ee5 for "a82ee5"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum.E5457a">
            <summary>
            Enum E5457a for "e5457a"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum.B21212">
            <summary>
            Enum B21212 for "b21212"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._593c00">
            <summary>
            Enum _593c00 for "593c00"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum.E5BF00">
            <summary>
            Enum E5BF00 for "e5BF00"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Discount.DiscountType">
            <summary>
            Indicates whether the discount is a FIXED value or entered at the time of sale. See [V1DiscountDiscountType](#type-v1discountdiscounttype) for possible values
            </summary>
            <value>Indicates whether the discount is a FIXED value or entered at the time of sale. See [V1DiscountDiscountType](#type-v1discountdiscounttype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Discount.Color">
            <summary>
            The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6. See [V1DiscountColor](#type-v1discountcolor) for possible values
            </summary>
            <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6. See [V1DiscountColor](#type-v1discountcolor) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Discount.#ctor(System.String,System.String,System.String,Square.Connect.Model.V1Money,System.Nullable{Square.Connect.Model.V1Discount.DiscountTypeEnum},System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.V1Discount.ColorEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Discount" /> class.
            </summary>
            <param name="Id">The discount&#39;s unique ID..</param>
            <param name="Name">The discount&#39;s name..</param>
            <param name="Rate">The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE..</param>
            <param name="AmountMoney">The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts..</param>
            <param name="DiscountType">Indicates whether the discount is a FIXED value or entered at the time of sale. See [V1DiscountDiscountType](#type-v1discountdiscounttype) for possible values.</param>
            <param name="PinRequired">Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment..</param>
            <param name="Color">The color of the discount&#39;s display label in Square Register, if not the default color. The default color is 9da2a6. See [V1DiscountColor](#type-v1discountcolor) for possible values.</param>
            <param name="V2Id">The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Discount.Id">
            <summary>
            The discount&#39;s unique ID.
            </summary>
            <value>The discount&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Discount.Name">
            <summary>
            The discount&#39;s name.
            </summary>
            <value>The discount&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Discount.Rate">
            <summary>
            The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.
            </summary>
            <value>The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Discount.AmountMoney">
            <summary>
            The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts.
            </summary>
            <value>The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Discount.PinRequired">
            <summary>
            Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.
            </summary>
            <value>Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Discount.V2Id">
            <summary>
            The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
            </summary>
            <value>The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Discount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Discount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Discount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Discount.Equals(Square.Connect.Model.V1Discount)">
            <summary>
            Returns true if V1Discount instances are equal
            </summary>
            <param name="other">Instance of V1Discount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Discount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1DiscountColor">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountColor._9da2a6">
            <summary>
            Enum _9da2a6 for "9da2a6"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountColor._4ab200">
            <summary>
            Enum _4ab200 for "4ab200"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountColor._0b8000">
            <summary>
            Enum _0b8000 for "0b8000"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountColor._2952cc">
            <summary>
            Enum _2952cc for "2952cc"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountColor.A82ee5">
            <summary>
            Enum A82ee5 for "a82ee5"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountColor.E5457a">
            <summary>
            Enum E5457a for "e5457a"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountColor.B21212">
            <summary>
            Enum B21212 for "b21212"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountColor._593c00">
            <summary>
            Enum _593c00 for "593c00"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountColor.E5BF00">
            <summary>
            Enum E5BF00 for "e5BF00"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1DiscountDiscountType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountDiscountType.FIXED">
            <summary>
            Enum FIXED for "FIXED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountDiscountType.VARIABLEPERCENTAGE">
            <summary>
            Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1DiscountDiscountType.VARIABLEAMOUNT">
            <summary>
            Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Employee">
            <summary>
            Represents one of a business&#39;s employees.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Employee.StatusEnum">
            <summary>
            CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. See [V1EmployeeStatus](#type-v1employeestatus) for possible values
            </summary>
            <value>CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. See [V1EmployeeStatus](#type-v1employeestatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Employee.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for "ACTIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Employee.StatusEnum.INACTIVE">
            <summary>
            Enum INACTIVE for "INACTIVE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.Status">
            <summary>
            CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. See [V1EmployeeStatus](#type-v1employeestatus) for possible values
            </summary>
            <value>CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. See [V1EmployeeStatus](#type-v1employeestatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Employee.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Employee" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1Employee.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Nullable{Square.Connect.Model.V1Employee.StatusEnum},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Employee" /> class.
            </summary>
            <param name="Id">The employee&#39;s unique ID..</param>
            <param name="FirstName">The employee&#39;s first name. (required).</param>
            <param name="LastName">The employee&#39;s last name. (required).</param>
            <param name="RoleIds">The ids of the employee&#39;s associated roles. Currently, you can specify only one or zero roles per employee..</param>
            <param name="AuthorizedLocationIds">The IDs of the locations the employee is allowed to clock in at..</param>
            <param name="Email">The employee&#39;s email address..</param>
            <param name="Status">CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. See [V1EmployeeStatus](#type-v1employeestatus) for possible values.</param>
            <param name="ExternalId">An ID the merchant can set to associate the employee with an entity in another system..</param>
            <param name="CreatedAt">The time when the employee entity was created, in ISO 8601 format..</param>
            <param name="UpdatedAt">The time when the employee entity was most recently updated, in ISO 8601 format..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.Id">
            <summary>
            The employee&#39;s unique ID.
            </summary>
            <value>The employee&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.FirstName">
            <summary>
            The employee&#39;s first name.
            </summary>
            <value>The employee&#39;s first name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.LastName">
            <summary>
            The employee&#39;s last name.
            </summary>
            <value>The employee&#39;s last name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.RoleIds">
            <summary>
            The ids of the employee&#39;s associated roles. Currently, you can specify only one or zero roles per employee.
            </summary>
            <value>The ids of the employee&#39;s associated roles. Currently, you can specify only one or zero roles per employee.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.AuthorizedLocationIds">
            <summary>
            The IDs of the locations the employee is allowed to clock in at.
            </summary>
            <value>The IDs of the locations the employee is allowed to clock in at.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.Email">
            <summary>
            The employee&#39;s email address.
            </summary>
            <value>The employee&#39;s email address.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.ExternalId">
            <summary>
            An ID the merchant can set to associate the employee with an entity in another system.
            </summary>
            <value>An ID the merchant can set to associate the employee with an entity in another system.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.CreatedAt">
            <summary>
            The time when the employee entity was created, in ISO 8601 format.
            </summary>
            <value>The time when the employee entity was created, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Employee.UpdatedAt">
            <summary>
            The time when the employee entity was most recently updated, in ISO 8601 format.
            </summary>
            <value>The time when the employee entity was most recently updated, in ISO 8601 format.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Employee.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Employee.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Employee.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Employee.Equals(Square.Connect.Model.V1Employee)">
            <summary>
            Returns true if V1Employee instances are equal
            </summary>
            <param name="other">Instance of V1Employee to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Employee.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1EmployeeRole">
            <summary>
            V1EmployeeRole
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1EmployeeRole.PermissionsEnum">
            <summary>
            Gets or Sets Permissions
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.ACCESSSALESHISTORY">
            <summary>
            Enum ACCESSSALESHISTORY for "REGISTER_ACCESS_SALES_HISTORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.APPLYRESTRICTEDDISCOUNTS">
            <summary>
            Enum APPLYRESTRICTEDDISCOUNTS for "REGISTER_APPLY_RESTRICTED_DISCOUNTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.CHANGESETTINGS">
            <summary>
            Enum CHANGESETTINGS for "REGISTER_CHANGE_SETTINGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.EDITITEM">
            <summary>
            Enum EDITITEM for "REGISTER_EDIT_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.ISSUEREFUNDS">
            <summary>
            Enum ISSUEREFUNDS for "REGISTER_ISSUE_REFUNDS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.OPENCASHDRAWEROUTSIDESALE">
            <summary>
            Enum OPENCASHDRAWEROUTSIDESALE for "REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.VIEWSUMMARYREPORTS">
            <summary>
            Enum VIEWSUMMARYREPORTS for "REGISTER_VIEW_SUMMARY_REPORTS"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.Permissions">
            <summary>
            The role's permissions. See [V1EmployeeRolePermissions](#type-v1employeerolepermissions) for possible values
            </summary>
            <value>The role's permissions. See [V1EmployeeRolePermissions](#type-v1employeerolepermissions) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1EmployeeRole" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.#ctor(System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.V1EmployeeRole.PermissionsEnum},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1EmployeeRole" /> class.
            </summary>
            <param name="Id">The role&#39;s unique ID, Can only be set by Square..</param>
            <param name="Name">The role&#39;s merchant-defined name. (required).</param>
            <param name="Permissions">The role&#39;s permissions. See [V1EmployeeRolePermissions](#type-v1employeerolepermissions) for possible values (required).</param>
            <param name="IsOwner">If true, employees with this role have all permissions, regardless of the values indicated in permissions..</param>
            <param name="CreatedAt">The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created..</param>
            <param name="UpdatedAt">The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated..</param>
        </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.Id">
            <summary>
            The role&#39;s unique ID, Can only be set by Square.
            </summary>
            <value>The role&#39;s unique ID, Can only be set by Square.</value>
        </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.Name">
            <summary>
            The role&#39;s merchant-defined name.
            </summary>
            <value>The role&#39;s merchant-defined name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.IsOwner">
            <summary>
            If true, employees with this role have all permissions, regardless of the values indicated in permissions.
            </summary>
            <value>If true, employees with this role have all permissions, regardless of the values indicated in permissions.</value>
        </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.CreatedAt">
            <summary>
            The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.
            </summary>
            <value>The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.</value>
        </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.UpdatedAt">
            <summary>
            The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.
            </summary>
            <value>The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.</value>
        </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.Equals(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            Returns true if V1EmployeeRole instances are equal
            </summary>
            <param name="other">Instance of V1EmployeeRole to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1EmployeeRolePermissions">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRolePermissions.ACCESSSALESHISTORY">
            <summary>
            Enum ACCESSSALESHISTORY for "REGISTER_ACCESS_SALES_HISTORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRolePermissions.APPLYRESTRICTEDDISCOUNTS">
            <summary>
            Enum APPLYRESTRICTEDDISCOUNTS for "REGISTER_APPLY_RESTRICTED_DISCOUNTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRolePermissions.CHANGESETTINGS">
            <summary>
            Enum CHANGESETTINGS for "REGISTER_CHANGE_SETTINGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRolePermissions.EDITITEM">
            <summary>
            Enum EDITITEM for "REGISTER_EDIT_ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRolePermissions.ISSUEREFUNDS">
            <summary>
            Enum ISSUEREFUNDS for "REGISTER_ISSUE_REFUNDS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRolePermissions.OPENCASHDRAWEROUTSIDESALE">
            <summary>
            Enum OPENCASHDRAWEROUTSIDESALE for "REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeRolePermissions.VIEWSUMMARYREPORTS">
            <summary>
            Enum VIEWSUMMARYREPORTS for "REGISTER_VIEW_SUMMARY_REPORTS"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1EmployeeStatus">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeStatus.ACTIVE">
            <summary>
            Enum ACTIVE for "ACTIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1EmployeeStatus.INACTIVE">
            <summary>
            Enum INACTIVE for "INACTIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Fee">
            <summary>
            V1Fee
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Fee.CalculationPhaseEnum">
            <summary>
            Forthcoming See [V1FeeCalculationPhase](#type-v1feecalculationphase) for possible values
            </summary>
            <value>Forthcoming See [V1FeeCalculationPhase](#type-v1feecalculationphase) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.CalculationPhaseEnum.FEESUBTOTALPHASE">
            <summary>
            Enum FEESUBTOTALPHASE for "FEE_SUBTOTAL_PHASE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.CalculationPhaseEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.CalculationPhaseEnum.FEETOTALPHASE">
            <summary>
            Enum FEETOTALPHASE for "FEE_TOTAL_PHASE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Fee.AdjustmentTypeEnum">
            <summary>
            The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees. See [V1FeeAdjustmentType](#type-v1feeadjustmenttype) for possible values
            </summary>
            <value>The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees. See [V1FeeAdjustmentType](#type-v1feeadjustmenttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.AdjustmentTypeEnum.TAX">
            <summary>
            Enum TAX for "TAX"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Fee.InclusionTypeEnum">
            <summary>
            Whether the fee is ADDITIVE or INCLUSIVE. See [V1FeeInclusionType](#type-v1feeinclusiontype) for possible values
            </summary>
            <value>Whether the fee is ADDITIVE or INCLUSIVE. See [V1FeeInclusionType](#type-v1feeinclusiontype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.InclusionTypeEnum.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.InclusionTypeEnum.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Fee.TypeEnum">
            <summary>
            In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants. See [V1FeeType](#type-v1feetype) for possible values
            </summary>
            <value>In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants. See [V1FeeType](#type-v1feetype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAGST">
            <summary>
            Enum CAGST for "CA_GST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAHST">
            <summary>
            Enum CAHST for "CA_HST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAPST">
            <summary>
            Enum CAPST for "CA_PST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAQST">
            <summary>
            Enum CAQST for "CA_QST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.JPCONSUMPTIONTAX">
            <summary>
            Enum JPCONSUMPTIONTAX for "JP_CONSUMPTION_TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAPEIPST">
            <summary>
            Enum CAPEIPST for "CA_PEI_PST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.USSALESTAX">
            <summary>
            Enum USSALESTAX for "US_SALES_TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.CalculationPhase">
            <summary>
            Forthcoming See [V1FeeCalculationPhase](#type-v1feecalculationphase) for possible values
            </summary>
            <value>Forthcoming See [V1FeeCalculationPhase](#type-v1feecalculationphase) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.AdjustmentType">
            <summary>
            The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees. See [V1FeeAdjustmentType](#type-v1feeadjustmenttype) for possible values
            </summary>
            <value>The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees. See [V1FeeAdjustmentType](#type-v1feeadjustmenttype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.InclusionType">
            <summary>
            Whether the fee is ADDITIVE or INCLUSIVE. See [V1FeeInclusionType](#type-v1feeinclusiontype) for possible values
            </summary>
            <value>Whether the fee is ADDITIVE or INCLUSIVE. See [V1FeeInclusionType](#type-v1feeinclusiontype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.Type">
            <summary>
            In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants. See [V1FeeType](#type-v1feetype) for possible values
            </summary>
            <value>In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants. See [V1FeeType](#type-v1feetype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Fee.#ctor(System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Fee.CalculationPhaseEnum},System.Nullable{Square.Connect.Model.V1Fee.AdjustmentTypeEnum},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.V1Fee.InclusionTypeEnum},System.Nullable{Square.Connect.Model.V1Fee.TypeEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Fee" /> class.
            </summary>
            <param name="Id">The fee&#39;s unique ID..</param>
            <param name="Name">The fee&#39;s name..</param>
            <param name="Rate">The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%..</param>
            <param name="CalculationPhase">Forthcoming See [V1FeeCalculationPhase](#type-v1feecalculationphase) for possible values.</param>
            <param name="AdjustmentType">The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees. See [V1FeeAdjustmentType](#type-v1feeadjustmenttype) for possible values.</param>
            <param name="AppliesToCustomAmounts">If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item..</param>
            <param name="Enabled">If true, the fee is applied to all appropriate items. If false, the fee is not applied at all..</param>
            <param name="InclusionType">Whether the fee is ADDITIVE or INCLUSIVE. See [V1FeeInclusionType](#type-v1feeinclusiontype) for possible values.</param>
            <param name="Type">In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants. See [V1FeeType](#type-v1feetype) for possible values.</param>
            <param name="V2Id">The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.Id">
            <summary>
            The fee&#39;s unique ID.
            </summary>
            <value>The fee&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.Name">
            <summary>
            The fee&#39;s name.
            </summary>
            <value>The fee&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.Rate">
            <summary>
            The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
            </summary>
            <value>The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.AppliesToCustomAmounts">
            <summary>
            If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item.
            </summary>
            <value>If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.Enabled">
            <summary>
            If true, the fee is applied to all appropriate items. If false, the fee is not applied at all.
            </summary>
            <value>If true, the fee is applied to all appropriate items. If false, the fee is not applied at all.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Fee.V2Id">
            <summary>
            The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
            </summary>
            <value>The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Fee.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Fee.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Fee.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Fee.Equals(Square.Connect.Model.V1Fee)">
            <summary>
            Returns true if V1Fee instances are equal
            </summary>
            <param name="other">Instance of V1Fee to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Fee.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1FeeAdjustmentType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1FeeAdjustmentType.TAX">
            <summary>
            Enum TAX for "TAX"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1FeeCalculationPhase">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1FeeCalculationPhase.FEESUBTOTALPHASE">
            <summary>
            Enum FEESUBTOTALPHASE for "FEE_SUBTOTAL_PHASE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeCalculationPhase.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeCalculationPhase.FEETOTALPHASE">
            <summary>
            Enum FEETOTALPHASE for "FEE_TOTAL_PHASE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1FeeInclusionType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1FeeInclusionType.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeInclusionType.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1FeeType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1FeeType.CAGST">
            <summary>
            Enum CAGST for "CA_GST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeType.CAHST">
            <summary>
            Enum CAHST for "CA_HST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeType.CAPST">
            <summary>
            Enum CAPST for "CA_PST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeType.CAQST">
            <summary>
            Enum CAQST for "CA_QST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeType.JPCONSUMPTIONTAX">
            <summary>
            Enum JPCONSUMPTIONTAX for "JP_CONSUMPTION_TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeType.CAPEIPST">
            <summary>
            Enum CAPEIPST for "CA_PEI_PST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeType.USSALESTAX">
            <summary>
            Enum USSALESTAX for "US_SALES_TAX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1FeeType.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1InventoryEntry">
            <summary>
            V1InventoryEntry
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.#ctor(System.String,System.Nullable{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1InventoryEntry" /> class.
            </summary>
            <param name="VariationId">The variation that the entry corresponds to..</param>
            <param name="QuantityOnHand">The current available quantity of the item variation..</param>
        </member>
        <member name="P:Square.Connect.Model.V1InventoryEntry.VariationId">
            <summary>
            The variation that the entry corresponds to.
            </summary>
            <value>The variation that the entry corresponds to.</value>
        </member>
        <member name="P:Square.Connect.Model.V1InventoryEntry.QuantityOnHand">
            <summary>
            The current available quantity of the item variation.
            </summary>
            <value>The current available quantity of the item variation.</value>
        </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.Equals(Square.Connect.Model.V1InventoryEntry)">
            <summary>
            Returns true if V1InventoryEntry instances are equal
            </summary>
            <param name="other">Instance of V1InventoryEntry to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1Item">
            <summary>
            V1Item
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Item.TypeEnum">
            <summary>
            The item's type. This value is NORMAL for almost all items. See [V1ItemType](#type-v1itemtype) for possible values
            </summary>
            <value>The item's type. This value is NORMAL for almost all items. See [V1ItemType](#type-v1itemtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Item.TypeEnum.NORMAL">
            <summary>
            Enum NORMAL for "NORMAL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.TypeEnum.GIFTCARD">
            <summary>
            Enum GIFTCARD for "GIFT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.TypeEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Item.ColorEnum">
            <summary>
            The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6. See [V1ItemColor](#type-v1itemcolor) for possible values
            </summary>
            <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6. See [V1ItemColor](#type-v1itemcolor) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._9da2a6">
            <summary>
            Enum _9da2a6 for "9da2a6"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._4ab200">
            <summary>
            Enum _4ab200 for "4ab200"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._0b8000">
            <summary>
            Enum _0b8000 for "0b8000"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._2952cc">
            <summary>
            Enum _2952cc for "2952cc"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum.A82ee5">
            <summary>
            Enum A82ee5 for "a82ee5"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum.E5457a">
            <summary>
            Enum E5457a for "e5457a"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum.B21212">
            <summary>
            Enum B21212 for "b21212"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._593c00">
            <summary>
            Enum _593c00 for "593c00"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum.E5BF00">
            <summary>
            Enum E5BF00 for "e5BF00"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Item.VisibilityEnum">
            <summary>
            Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE. See [V1ItemVisibility](#type-v1itemvisibility) for possible values
            </summary>
            <value>Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE. See [V1ItemVisibility](#type-v1itemvisibility) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Item.VisibilityEnum.PUBLIC">
            <summary>
            Enum PUBLIC for "PUBLIC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Item.VisibilityEnum.PRIVATE">
            <summary>
            Enum PRIVATE for "PRIVATE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Type">
            <summary>
            The item's type. This value is NORMAL for almost all items. See [V1ItemType](#type-v1itemtype) for possible values
            </summary>
            <value>The item's type. This value is NORMAL for almost all items. See [V1ItemType](#type-v1itemtype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Color">
            <summary>
            The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6. See [V1ItemColor](#type-v1itemcolor) for possible values
            </summary>
            <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6. See [V1ItemColor](#type-v1itemcolor) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Visibility">
            <summary>
            Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE. See [V1ItemVisibility](#type-v1itemvisibility) for possible values
            </summary>
            <value>Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE. See [V1ItemVisibility](#type-v1itemvisibility) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Item.#ctor(System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Item.TypeEnum},System.Nullable{Square.Connect.Model.V1Item.ColorEnum},System.String,System.Nullable{Square.Connect.Model.V1Item.VisibilityEnum},System.Nullable{System.Boolean},Square.Connect.Model.V1ItemImage,Square.Connect.Model.V1Category,System.Collections.Generic.List{Square.Connect.Model.V1Variation},System.Collections.Generic.List{Square.Connect.Model.V1ModifierList},System.Collections.Generic.List{Square.Connect.Model.V1Fee},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Item" /> class.
            </summary>
            <param name="Id">The item&#39;s ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_)..</param>
            <param name="Name">The item&#39;s name..</param>
            <param name="Description">The item&#39;s description..</param>
            <param name="Type">The item&#39;s type. This value is NORMAL for almost all items. See [V1ItemType](#type-v1itemtype) for possible values.</param>
            <param name="Color">The color of the discount&#39;s display label in Square Register, if not the default color. The default color is 9da2a6. See [V1ItemColor](#type-v1itemcolor) for possible values.</param>
            <param name="Abbreviation">The text of the item&#39;s display label in Square Register. Only up to the first five characters of the string are used..</param>
            <param name="Visibility">Indicates whether the item is viewable from the merchant&#39;s online store (PUBLIC) or PRIVATE. See [V1ItemVisibility](#type-v1itemvisibility) for possible values.</param>
            <param name="AvailableOnline">If true, the item can be added to shipping orders from the merchant&#39;s online store..</param>
            <param name="MasterImage">The item&#39;s master image, if any..</param>
            <param name="Category">The category the item belongs to, if any..</param>
            <param name="Variations">The item&#39;s variations. You must specify at least one variation..</param>
            <param name="ModifierLists">The modifier lists that apply to the item, if any..</param>
            <param name="Fees">The fees that apply to the item, if any..</param>
            <param name="Taxable">Deprecated. This field is not used..</param>
            <param name="CategoryId">The ID of the item&#39;s category, if any..</param>
            <param name="AvailableForPickup">If true, the item can be added to pickup orders from the merchant&#39;s online store. Default value: false.</param>
            <param name="V2Id">The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Id">
            <summary>
            The item&#39;s ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_).
            </summary>
            <value>The item&#39;s ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_).</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Name">
            <summary>
            The item&#39;s name.
            </summary>
            <value>The item&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Description">
            <summary>
            The item&#39;s description.
            </summary>
            <value>The item&#39;s description.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Abbreviation">
            <summary>
            The text of the item&#39;s display label in Square Register. Only up to the first five characters of the string are used.
            </summary>
            <value>The text of the item&#39;s display label in Square Register. Only up to the first five characters of the string are used.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.AvailableOnline">
            <summary>
            If true, the item can be added to shipping orders from the merchant&#39;s online store.
            </summary>
            <value>If true, the item can be added to shipping orders from the merchant&#39;s online store.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.MasterImage">
            <summary>
            The item&#39;s master image, if any.
            </summary>
            <value>The item&#39;s master image, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Category">
            <summary>
            The category the item belongs to, if any.
            </summary>
            <value>The category the item belongs to, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Variations">
            <summary>
            The item&#39;s variations. You must specify at least one variation.
            </summary>
            <value>The item&#39;s variations. You must specify at least one variation.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.ModifierLists">
            <summary>
            The modifier lists that apply to the item, if any.
            </summary>
            <value>The modifier lists that apply to the item, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Fees">
            <summary>
            The fees that apply to the item, if any.
            </summary>
            <value>The fees that apply to the item, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.Taxable">
            <summary>
            Deprecated. This field is not used.
            </summary>
            <value>Deprecated. This field is not used.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.CategoryId">
            <summary>
            The ID of the item&#39;s category, if any.
            </summary>
            <value>The ID of the item&#39;s category, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.AvailableForPickup">
            <summary>
            If true, the item can be added to pickup orders from the merchant&#39;s online store. Default value: false
            </summary>
            <value>If true, the item can be added to pickup orders from the merchant&#39;s online store. Default value: false</value>
        </member>
        <member name="P:Square.Connect.Model.V1Item.V2Id">
            <summary>
            The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
            </summary>
            <value>The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Item.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Item.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Item.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Item.Equals(Square.Connect.Model.V1Item)">
            <summary>
            Returns true if V1Item instances are equal
            </summary>
            <param name="other">Instance of V1Item to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Item.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ItemColor">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1ItemColor._9da2a6">
            <summary>
            Enum _9da2a6 for "9da2a6"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemColor._4ab200">
            <summary>
            Enum _4ab200 for "4ab200"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemColor._0b8000">
            <summary>
            Enum _0b8000 for "0b8000"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemColor._2952cc">
            <summary>
            Enum _2952cc for "2952cc"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemColor.A82ee5">
            <summary>
            Enum A82ee5 for "a82ee5"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemColor.E5457a">
            <summary>
            Enum E5457a for "e5457a"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemColor.B21212">
            <summary>
            Enum B21212 for "b21212"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemColor._593c00">
            <summary>
            Enum _593c00 for "593c00"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemColor.E5BF00">
            <summary>
            Enum E5BF00 for "e5BF00"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ItemImage">
            <summary>
            V1ItemImage
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ItemImage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ItemImage" /> class.
            </summary>
            <param name="Id">The image&#39;s unique ID..</param>
            <param name="Url">The image&#39;s publicly accessible URL..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ItemImage.Id">
            <summary>
            The image&#39;s unique ID.
            </summary>
            <value>The image&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ItemImage.Url">
            <summary>
            The image&#39;s publicly accessible URL.
            </summary>
            <value>The image&#39;s publicly accessible URL.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ItemImage.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ItemImage.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ItemImage.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ItemImage.Equals(Square.Connect.Model.V1ItemImage)">
            <summary>
            Returns true if V1ItemImage instances are equal
            </summary>
            <param name="other">Instance of V1ItemImage to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ItemImage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ItemType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1ItemType.NORMAL">
            <summary>
            Enum NORMAL for "NORMAL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemType.GIFTCARD">
            <summary>
            Enum GIFTCARD for "GIFT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemType.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ItemVisibility">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1ItemVisibility.PUBLIC">
            <summary>
            Enum PUBLIC for "PUBLIC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ItemVisibility.PRIVATE">
            <summary>
            Enum PRIVATE for "PRIVATE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListBankAccountsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListBankAccountsRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsRequest.Equals(Square.Connect.Model.V1ListBankAccountsRequest)">
            <summary>
            Returns true if V1ListBankAccountsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListBankAccountsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListBankAccountsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1BankAccount})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListBankAccountsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListBankAccountsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsResponse.Equals(Square.Connect.Model.V1ListBankAccountsResponse)">
            <summary>
            Returns true if V1ListBankAccountsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListBankAccountsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListBankAccountsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListCashDrawerShiftsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListCashDrawerShiftsRequest.OrderEnum">
            <summary>
            The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListCashDrawerShiftsRequest.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListCashDrawerShiftsRequest.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1ListCashDrawerShiftsRequest.Order">
            <summary>
            The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsRequest.#ctor(System.Nullable{Square.Connect.Model.V1ListCashDrawerShiftsRequest.OrderEnum},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListCashDrawerShiftsRequest" /> class.
            </summary>
            <param name="Order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="BeginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days..</param>
            <param name="EndTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListCashDrawerShiftsRequest.BeginTime">
            <summary>
            The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
            </summary>
            <value>The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListCashDrawerShiftsRequest.EndTime">
            <summary>
            The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
            </summary>
            <value>The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsRequest.Equals(Square.Connect.Model.V1ListCashDrawerShiftsRequest)">
            <summary>
            Returns true if V1ListCashDrawerShiftsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListCashDrawerShiftsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListCashDrawerShiftsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1CashDrawerShift})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListCashDrawerShiftsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListCashDrawerShiftsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsResponse.Equals(Square.Connect.Model.V1ListCashDrawerShiftsResponse)">
            <summary>
            Returns true if V1ListCashDrawerShiftsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListCashDrawerShiftsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCashDrawerShiftsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListCategoriesRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListCategoriesRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesRequest.Equals(Square.Connect.Model.V1ListCategoriesRequest)">
            <summary>
            Returns true if V1ListCategoriesRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListCategoriesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListCategoriesResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Category})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListCategoriesResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListCategoriesResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesResponse.Equals(Square.Connect.Model.V1ListCategoriesResponse)">
            <summary>
            Returns true if V1ListCategoriesResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListCategoriesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListCategoriesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListDiscountsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListDiscountsRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsRequest.Equals(Square.Connect.Model.V1ListDiscountsRequest)">
            <summary>
            Returns true if V1ListDiscountsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListDiscountsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListDiscountsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Discount})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListDiscountsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListDiscountsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsResponse.Equals(Square.Connect.Model.V1ListDiscountsResponse)">
            <summary>
            Returns true if V1ListDiscountsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListDiscountsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListDiscountsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListEmployeeRolesRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListEmployeeRolesRequest.OrderEnum">
            <summary>
            The order in which employees are listed in the response, based on their created_at field.Default value: ASC See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which employees are listed in the response, based on their created_at field.Default value: ASC See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListEmployeeRolesRequest.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListEmployeeRolesRequest.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeeRolesRequest.Order">
            <summary>
            The order in which employees are listed in the response, based on their created_at field.Default value: ASC See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which employees are listed in the response, based on their created_at field.Default value: ASC See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesRequest.#ctor(System.Nullable{Square.Connect.Model.V1ListEmployeeRolesRequest.OrderEnum},System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListEmployeeRolesRequest" /> class.
            </summary>
            <param name="Order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="Limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200..</param>
            <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeeRolesRequest.Limit">
            <summary>
            The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
            </summary>
            <value>The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeeRolesRequest.BatchToken">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesRequest.Equals(Square.Connect.Model.V1ListEmployeeRolesRequest)">
            <summary>
            Returns true if V1ListEmployeeRolesRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListEmployeeRolesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListEmployeeRolesResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1EmployeeRole})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListEmployeeRolesResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeeRolesResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesResponse.Equals(Square.Connect.Model.V1ListEmployeeRolesResponse)">
            <summary>
            Returns true if V1ListEmployeeRolesResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListEmployeeRolesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeeRolesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListEmployeesRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListEmployeesRequest.OrderEnum">
            <summary>
            The order in which employees are listed in the response, based on their created_at field.      Default value: ASC See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which employees are listed in the response, based on their created_at field.      Default value: ASC See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListEmployeesRequest.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListEmployeesRequest.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListEmployeesRequest.StatusEnum">
            <summary>
            If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). See [V1ListEmployeesRequestStatus](#type-v1listemployeesrequeststatus) for possible values
            </summary>
            <value>If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). See [V1ListEmployeesRequestStatus](#type-v1listemployeesrequeststatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListEmployeesRequest.StatusEnum.ACTIVE">
            <summary>
            Enum ACTIVE for "ACTIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListEmployeesRequest.StatusEnum.INACTIVE">
            <summary>
            Enum INACTIVE for "INACTIVE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesRequest.Order">
            <summary>
            The order in which employees are listed in the response, based on their created_at field.      Default value: ASC See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which employees are listed in the response, based on their created_at field.      Default value: ASC See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesRequest.Status">
            <summary>
            If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). See [V1ListEmployeesRequestStatus](#type-v1listemployeesrequeststatus) for possible values
            </summary>
            <value>If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). See [V1ListEmployeesRequestStatus](#type-v1listemployeesrequeststatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesRequest.#ctor(System.Nullable{Square.Connect.Model.V1ListEmployeesRequest.OrderEnum},System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1ListEmployeesRequest.StatusEnum},System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListEmployeesRequest" /> class.
            </summary>
            <param name="Order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="BeginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.</param>
            <param name="EndUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format..</param>
            <param name="BeginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format..</param>
            <param name="EndCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format..</param>
            <param name="Status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). See [V1ListEmployeesRequestStatus](#type-v1listemployeesrequeststatus) for possible values.</param>
            <param name="ExternalId">If provided, the endpoint returns only employee entities with the specified external_id..</param>
            <param name="Limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200..</param>
            <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesRequest.BeginUpdatedAt">
            <summary>
            If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
            </summary>
            <value>If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesRequest.EndUpdatedAt">
            <summary>
            If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
            </summary>
            <value>If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesRequest.BeginCreatedAt">
            <summary>
            If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
            </summary>
            <value>If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesRequest.EndCreatedAt">
            <summary>
            If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
            </summary>
            <value>If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesRequest.ExternalId">
            <summary>
            If provided, the endpoint returns only employee entities with the specified external_id.
            </summary>
            <value>If provided, the endpoint returns only employee entities with the specified external_id.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesRequest.Limit">
            <summary>
            The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
            </summary>
            <value>The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesRequest.BatchToken">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesRequest.Equals(Square.Connect.Model.V1ListEmployeesRequest)">
            <summary>
            Returns true if V1ListEmployeesRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListEmployeesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListEmployeesRequestStatus">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1ListEmployeesRequestStatus.ACTIVE">
            <summary>
            Enum ACTIVE for "ACTIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListEmployeesRequestStatus.INACTIVE">
            <summary>
            Enum INACTIVE for "INACTIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListEmployeesResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Employee})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListEmployeesResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListEmployeesResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesResponse.Equals(Square.Connect.Model.V1ListEmployeesResponse)">
            <summary>
            Returns true if V1ListEmployeesResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListEmployeesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListEmployeesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListFeesRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListFeesRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesRequest.Equals(Square.Connect.Model.V1ListFeesRequest)">
            <summary>
            Returns true if V1ListFeesRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListFeesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListFeesResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Fee})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListFeesResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListFeesResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesResponse.Equals(Square.Connect.Model.V1ListFeesResponse)">
            <summary>
            Returns true if V1ListFeesResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListFeesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListFeesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListInventoryRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryRequest.#ctor(System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListInventoryRequest" /> class.
            </summary>
            <param name="Limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000..</param>
            <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListInventoryRequest.Limit">
            <summary>
            The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
            </summary>
            <value>The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListInventoryRequest.BatchToken">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryRequest.Equals(Square.Connect.Model.V1ListInventoryRequest)">
            <summary>
            Returns true if V1ListInventoryRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListInventoryRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListInventoryResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1InventoryEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListInventoryResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListInventoryResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryResponse.Equals(Square.Connect.Model.V1ListInventoryResponse)">
            <summary>
            Returns true if V1ListInventoryResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListInventoryResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListInventoryResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListItemsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListItemsRequest" /> class.
            </summary>
            <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListItemsRequest.BatchToken">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsRequest.Equals(Square.Connect.Model.V1ListItemsRequest)">
            <summary>
            Returns true if V1ListItemsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListItemsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListItemsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Item})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListItemsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListItemsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsResponse.Equals(Square.Connect.Model.V1ListItemsResponse)">
            <summary>
            Returns true if V1ListItemsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListItemsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListItemsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListLocationsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListLocationsRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsRequest.Equals(Square.Connect.Model.V1ListLocationsRequest)">
            <summary>
            Returns true if V1ListLocationsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListLocationsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListLocationsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Merchant})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListLocationsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListLocationsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsResponse.Equals(Square.Connect.Model.V1ListLocationsResponse)">
            <summary>
            Returns true if V1ListLocationsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListLocationsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListLocationsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListModifierListsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListModifierListsRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsRequest.Equals(Square.Connect.Model.V1ListModifierListsRequest)">
            <summary>
            Returns true if V1ListModifierListsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListModifierListsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListModifierListsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1ModifierList})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListModifierListsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListModifierListsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsResponse.Equals(Square.Connect.Model.V1ListModifierListsResponse)">
            <summary>
            Returns true if V1ListModifierListsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListModifierListsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListModifierListsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListOrdersRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListOrdersRequest.OrderEnum">
            <summary>
            TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListOrdersRequest.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListOrdersRequest.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1ListOrdersRequest.Order">
            <summary>
            TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersRequest.#ctor(System.Nullable{Square.Connect.Model.V1ListOrdersRequest.OrderEnum},System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListOrdersRequest" /> class.
            </summary>
            <param name="Order">TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="Limit">The maximum number of payments to return in a single response. This value cannot exceed 200..</param>
            <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListOrdersRequest.Limit">
            <summary>
            The maximum number of payments to return in a single response. This value cannot exceed 200.
            </summary>
            <value>The maximum number of payments to return in a single response. This value cannot exceed 200.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListOrdersRequest.BatchToken">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersRequest.Equals(Square.Connect.Model.V1ListOrdersRequest)">
            <summary>
            Returns true if V1ListOrdersRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListOrdersRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListOrdersResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Order})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListOrdersResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListOrdersResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersResponse.Equals(Square.Connect.Model.V1ListOrdersResponse)">
            <summary>
            Returns true if V1ListOrdersResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListOrdersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListOrdersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListPagesRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListPagesRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesRequest.Equals(Square.Connect.Model.V1ListPagesRequest)">
            <summary>
            Returns true if V1ListPagesRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListPagesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListPagesResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Page})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListPagesResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListPagesResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesResponse.Equals(Square.Connect.Model.V1ListPagesResponse)">
            <summary>
            Returns true if V1ListPagesResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListPagesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPagesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListPaymentsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListPaymentsRequest.OrderEnum">
            <summary>
            The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListPaymentsRequest.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListPaymentsRequest.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1ListPaymentsRequest.Order">
            <summary>
            The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsRequest.#ctor(System.Nullable{Square.Connect.Model.V1ListPaymentsRequest.OrderEnum},System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListPaymentsRequest" /> class.
            </summary>
            <param name="Order">The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="BeginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year..</param>
            <param name="EndTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time..</param>
            <param name="Limit">The maximum number of payments to return in a single response. This value cannot exceed 200..</param>
            <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
            <param name="IncludePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListPaymentsRequest.BeginTime">
            <summary>
            The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
            </summary>
            <value>The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListPaymentsRequest.EndTime">
            <summary>
            The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
            </summary>
            <value>The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListPaymentsRequest.Limit">
            <summary>
            The maximum number of payments to return in a single response. This value cannot exceed 200.
            </summary>
            <value>The maximum number of payments to return in a single response. This value cannot exceed 200.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListPaymentsRequest.BatchToken">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListPaymentsRequest.IncludePartial">
            <summary>
            Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
            </summary>
            <value>Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsRequest.Equals(Square.Connect.Model.V1ListPaymentsRequest)">
            <summary>
            Returns true if V1ListPaymentsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListPaymentsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListPaymentsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Payment})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListPaymentsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListPaymentsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsResponse.Equals(Square.Connect.Model.V1ListPaymentsResponse)">
            <summary>
            Returns true if V1ListPaymentsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListPaymentsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListPaymentsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListRefundsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListRefundsRequest.OrderEnum">
            <summary>
            TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListRefundsRequest.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListRefundsRequest.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1ListRefundsRequest.Order">
            <summary>
            TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsRequest.#ctor(System.Nullable{Square.Connect.Model.V1ListRefundsRequest.OrderEnum},System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListRefundsRequest" /> class.
            </summary>
            <param name="Order">TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="BeginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year..</param>
            <param name="EndTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time..</param>
            <param name="Limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods..</param>
            <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListRefundsRequest.BeginTime">
            <summary>
            The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
            </summary>
            <value>The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListRefundsRequest.EndTime">
            <summary>
            The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
            </summary>
            <value>The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListRefundsRequest.Limit">
            <summary>
            The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
            </summary>
            <value>The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListRefundsRequest.BatchToken">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsRequest.Equals(Square.Connect.Model.V1ListRefundsRequest)">
            <summary>
            Returns true if V1ListRefundsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListRefundsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListRefundsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Refund})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListRefundsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListRefundsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsResponse.Equals(Square.Connect.Model.V1ListRefundsResponse)">
            <summary>
            Returns true if V1ListRefundsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListRefundsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListRefundsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListSettlementsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListSettlementsRequest.OrderEnum">
            <summary>
            TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListSettlementsRequest.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListSettlementsRequest.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListSettlementsRequest.StatusEnum">
            <summary>
            Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). See [V1ListSettlementsRequestStatus](#type-v1listsettlementsrequeststatus) for possible values
            </summary>
            <value>Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). See [V1ListSettlementsRequestStatus](#type-v1listsettlementsrequeststatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListSettlementsRequest.StatusEnum.SENT">
            <summary>
            Enum SENT for "SENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListSettlementsRequest.StatusEnum.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1ListSettlementsRequest.Order">
            <summary>
            TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListSettlementsRequest.Status">
            <summary>
            Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). See [V1ListSettlementsRequestStatus](#type-v1listsettlementsrequeststatus) for possible values
            </summary>
            <value>Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). See [V1ListSettlementsRequestStatus](#type-v1listsettlementsrequeststatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsRequest.#ctor(System.Nullable{Square.Connect.Model.V1ListSettlementsRequest.OrderEnum},System.String,System.String,System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.V1ListSettlementsRequest.StatusEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListSettlementsRequest" /> class.
            </summary>
            <param name="Order">TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="BeginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year..</param>
            <param name="EndTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time..</param>
            <param name="Limit">The maximum number of payments to return in a single response. This value cannot exceed 200..</param>
            <param name="Status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). See [V1ListSettlementsRequestStatus](#type-v1listsettlementsrequeststatus) for possible values.</param>
            <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListSettlementsRequest.BeginTime">
            <summary>
            The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
            </summary>
            <value>The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListSettlementsRequest.EndTime">
            <summary>
            The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
            </summary>
            <value>The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListSettlementsRequest.Limit">
            <summary>
            The maximum number of payments to return in a single response. This value cannot exceed 200.
            </summary>
            <value>The maximum number of payments to return in a single response. This value cannot exceed 200.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListSettlementsRequest.BatchToken">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsRequest.Equals(Square.Connect.Model.V1ListSettlementsRequest)">
            <summary>
            Returns true if V1ListSettlementsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListSettlementsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListSettlementsRequestStatus">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1ListSettlementsRequestStatus.SENT">
            <summary>
            Enum SENT for "SENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListSettlementsRequestStatus.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListSettlementsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Settlement})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListSettlementsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListSettlementsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsResponse.Equals(Square.Connect.Model.V1ListSettlementsResponse)">
            <summary>
            Returns true if V1ListSettlementsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListSettlementsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListSettlementsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListTimecardEventsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListTimecardEventsRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsRequest.Equals(Square.Connect.Model.V1ListTimecardEventsRequest)">
            <summary>
            Returns true if V1ListTimecardEventsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListTimecardEventsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListTimecardEventsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1TimecardEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListTimecardEventsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardEventsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsResponse.Equals(Square.Connect.Model.V1ListTimecardEventsResponse)">
            <summary>
            Returns true if V1ListTimecardEventsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListTimecardEventsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardEventsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListTimecardsRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ListTimecardsRequest.OrderEnum">
            <summary>
            The order in which timecards are listed in the response, based on their created_at field. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which timecards are listed in the response, based on their created_at field. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ListTimecardsRequest.OrderEnum.DESC">
            <summary>
            Enum DESC for "DESC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ListTimecardsRequest.OrderEnum.ASC">
            <summary>
            Enum ASC for "ASC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.Order">
            <summary>
            The order in which timecards are listed in the response, based on their created_at field. See [SortOrder](#type-sortorder) for possible values
            </summary>
            <value>The order in which timecards are listed in the response, based on their created_at field. See [SortOrder](#type-sortorder) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsRequest.#ctor(System.Nullable{Square.Connect.Model.V1ListTimecardsRequest.OrderEnum},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListTimecardsRequest" /> class.
            </summary>
            <param name="Order">The order in which timecards are listed in the response, based on their created_at field. See [SortOrder](#type-sortorder) for possible values.</param>
            <param name="EmployeeId">If provided, the endpoint returns only timecards for the employee with the specified ID..</param>
            <param name="BeginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format..</param>
            <param name="EndClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format..</param>
            <param name="BeginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format..</param>
            <param name="EndClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format..</param>
            <param name="BeginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format..</param>
            <param name="EndUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format..</param>
            <param name="Deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned..</param>
            <param name="Limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200..</param>
            <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.EmployeeId">
            <summary>
            If provided, the endpoint returns only timecards for the employee with the specified ID.
            </summary>
            <value>If provided, the endpoint returns only timecards for the employee with the specified ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.BeginClockinTime">
            <summary>
            If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
            </summary>
            <value>If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.EndClockinTime">
            <summary>
            If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
            </summary>
            <value>If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.BeginClockoutTime">
            <summary>
            If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
            </summary>
            <value>If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.EndClockoutTime">
            <summary>
            If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
            </summary>
            <value>If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.BeginUpdatedAt">
            <summary>
            If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
            </summary>
            <value>If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.EndUpdatedAt">
            <summary>
            If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
            </summary>
            <value>If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.Deleted">
            <summary>
            If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned.
            </summary>
            <value>If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.Limit">
            <summary>
            The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
            </summary>
            <value>The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsRequest.BatchToken">
            <summary>
            A pagination cursor to retrieve the next set of results for your original query to the endpoint.
            </summary>
            <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsRequest.Equals(Square.Connect.Model.V1ListTimecardsRequest)">
            <summary>
            Returns true if V1ListTimecardsRequest instances are equal
            </summary>
            <param name="other">Instance of V1ListTimecardsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ListTimecardsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.V1Timecard})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ListTimecardsResponse" /> class.
            </summary>
            <param name="Items">.</param>
        </member>
        <member name="P:Square.Connect.Model.V1ListTimecardsResponse.Items">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsResponse.Equals(Square.Connect.Model.V1ListTimecardsResponse)">
            <summary>
            Returns true if V1ListTimecardsResponse instances are equal
            </summary>
            <param name="other">Instance of V1ListTimecardsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ListTimecardsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1Merchant">
            <summary>
            Defines the fields that are included in the response body of a request to the **RetrieveBusiness** endpoint.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Merchant.AccountTypeEnum">
            <summary>
            Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION. See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values
            </summary>
            <value>Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION. See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.AccountTypeEnum.LOCATION">
            <summary>
            Enum LOCATION for "LOCATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.AccountTypeEnum.BUSINESS">
            <summary>
            Enum BUSINESS for "BUSINESS"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Merchant.BusinessTypeEnum">
            <summary>
            The type of business operated by the merchant. See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values
            </summary>
            <value>The type of business operated by the merchant. See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.ACCOUNTING">
            <summary>
            Enum ACCOUNTING for "ACCOUNTING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.APPARELANDACCESSORYSHOPS">
            <summary>
            Enum APPARELANDACCESSORYSHOPS for "APPAREL_AND_ACCESSORY_SHOPS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.ARTDEALERSGALLERIES">
            <summary>
            Enum ARTDEALERSGALLERIES for "ART_DEALERS_GALLERIES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.ARTDESIGNANDPHOTOGRAPHY">
            <summary>
            Enum ARTDESIGNANDPHOTOGRAPHY for "ART_DESIGN_AND_PHOTOGRAPHY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.BARCLUBLOUNGE">
            <summary>
            Enum BARCLUBLOUNGE for "BAR_CLUB_LOUNGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.BEAUTYANDBARBERSHOPS">
            <summary>
            Enum BEAUTYANDBARBERSHOPS for "BEAUTY_AND_BARBER_SHOPS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.BOOKSTORES">
            <summary>
            Enum BOOKSTORES for "BOOK_STORES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.BUSINESSSERVICES">
            <summary>
            Enum BUSINESSSERVICES for "BUSINESS_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CATERING">
            <summary>
            Enum CATERING for "CATERING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CHARITABLESOCIALSERVICEORGANIZATIONS">
            <summary>
            Enum CHARITABLESOCIALSERVICEORGANIZATIONS for "CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CHARITIBLEORGS">
            <summary>
            Enum CHARITIBLEORGS for "CHARITIBLE_ORGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CLEANINGSERVICES">
            <summary>
            Enum CLEANINGSERVICES for "CLEANING_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.COMPUTEREQUIPMENTSOFTWAREMAINTENANCEREPAIRSERVICES">
            <summary>
            Enum COMPUTEREQUIPMENTSOFTWAREMAINTENANCEREPAIRSERVICES for "COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CONSULTANT">
            <summary>
            Enum CONSULTANT for "CONSULTANT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CONTRACTORS">
            <summary>
            Enum CONTRACTORS for "CONTRACTORS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.DELIVERYSERVICES">
            <summary>
            Enum DELIVERYSERVICES for "DELIVERY_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.DENTISTRY">
            <summary>
            Enum DENTISTRY for "DENTISTRY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.EDUCATION">
            <summary>
            Enum EDUCATION for "EDUCATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.FOODSTORESCONVENIENCESTORESANDSPECIALTYMARKETS">
            <summary>
            Enum FOODSTORESCONVENIENCESTORESANDSPECIALTYMARKETS for "FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.FOODTRUCKCART">
            <summary>
            Enum FOODTRUCKCART for "FOOD_TRUCK_CART"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.FURNITUREHOMEANDOFFICEEQUIPMENT">
            <summary>
            Enum FURNITUREHOMEANDOFFICEEQUIPMENT for "FURNITURE_HOME_AND_OFFICE_EQUIPMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.FURNITUREHOMEGOODS">
            <summary>
            Enum FURNITUREHOMEGOODS for "FURNITURE_HOME_GOODS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.HOTELSANDLODGING">
            <summary>
            Enum HOTELSANDLODGING for "HOTELS_AND_LODGING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.INDIVIDUALUSE">
            <summary>
            Enum INDIVIDUALUSE for "INDIVIDUAL_USE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.JEWELRYANDWATCHES">
            <summary>
            Enum JEWELRYANDWATCHES for "JEWELRY_AND_WATCHES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.LANDSCAPINGANDHORTICULTURALSERVICES">
            <summary>
            Enum LANDSCAPINGANDHORTICULTURALSERVICES for "LANDSCAPING_AND_HORTICULTURAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.LANGUAGESCHOOLS">
            <summary>
            Enum LANGUAGESCHOOLS for "LANGUAGE_SCHOOLS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.LEGALSERVICES">
            <summary>
            Enum LEGALSERVICES for "LEGAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.MEDICALPRACTITIONERS">
            <summary>
            Enum MEDICALPRACTITIONERS for "MEDICAL_PRACTITIONERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.MEDICALSERVICESANDHEALTHPRACTITIONERS">
            <summary>
            Enum MEDICALSERVICESANDHEALTHPRACTITIONERS for "MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.MEMBERSHIPORGANIZATIONS">
            <summary>
            Enum MEMBERSHIPORGANIZATIONS for "MEMBERSHIP_ORGANIZATIONS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.MUSICANDENTERTAINMENT">
            <summary>
            Enum MUSICANDENTERTAINMENT for "MUSIC_AND_ENTERTAINMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.OUTDOORMARKETS">
            <summary>
            Enum OUTDOORMARKETS for "OUTDOOR_MARKETS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.PERSONALSERVICES">
            <summary>
            Enum PERSONALSERVICES for "PERSONAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.POLITICALORGANIZATIONS">
            <summary>
            Enum POLITICALORGANIZATIONS for "POLITICAL_ORGANIZATIONS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.PROFESSIONALSERVICES">
            <summary>
            Enum PROFESSIONALSERVICES for "PROFESSIONAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.REALESTATE">
            <summary>
            Enum REALESTATE for "REAL_ESTATE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.RECREATIONSERVICES">
            <summary>
            Enum RECREATIONSERVICES for "RECREATION_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.REPAIRSHOPSANDRELATEDSERVICES">
            <summary>
            Enum REPAIRSHOPSANDRELATEDSERVICES for "REPAIR_SHOPS_AND_RELATED_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.RESTAURANTS">
            <summary>
            Enum RESTAURANTS for "RESTAURANTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.RETAILSHOPS">
            <summary>
            Enum RETAILSHOPS for "RETAIL_SHOPS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.SCHOOLSANDEDUCATIONALSERVICES">
            <summary>
            Enum SCHOOLSANDEDUCATIONALSERVICES for "SCHOOLS_AND_EDUCATIONAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.SPORTINGGOODS">
            <summary>
            Enum SPORTINGGOODS for "SPORTING_GOODS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.TAXICABSANDLIMOUSINES">
            <summary>
            Enum TAXICABSANDLIMOUSINES for "TAXICABS_AND_LIMOUSINES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.TICKETSALES">
            <summary>
            Enum TICKETSALES for "TICKET_SALES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.TOURISM">
            <summary>
            Enum TOURISM for "TOURISM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.TRAVELTOURISM">
            <summary>
            Enum TRAVELTOURISM for "TRAVEL_TOURISM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.VETERINARYSERVICES">
            <summary>
            Enum VETERINARYSERVICES for "VETERINARY_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.WEBDEVDESIGN">
            <summary>
            Enum WEBDEVDESIGN for "WEB_DEV_DESIGN"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.AccountType">
            <summary>
            Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION. See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values
            </summary>
            <value>Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION. See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.BusinessType">
            <summary>
            The type of business operated by the merchant. See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values
            </summary>
            <value>The type of business operated by the merchant. See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Merchant.#ctor(System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Merchant.AccountTypeEnum},System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,Square.Connect.Model.Address,Square.Connect.Model.V1PhoneNumber,System.Nullable{Square.Connect.Model.V1Merchant.BusinessTypeEnum},Square.Connect.Model.Address,Square.Connect.Model.V1MerchantLocationDetails,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Merchant" /> class.
            </summary>
            <param name="Id">The merchant account&#39;s unique identifier..</param>
            <param name="Name">The name associated with the merchant account..</param>
            <param name="Email">The email address associated with the merchant account..</param>
            <param name="AccountType">Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION. See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values.</param>
            <param name="AccountCapabilities">Capabilities that are enabled for the merchant&#39;s Square account. Capabilities that are not listed in this array are not enabled for the account..</param>
            <param name="CountryCode">The country associated with the merchant account, in ISO 3166-1-alpha-2 format..</param>
            <param name="LanguageCode">The language associated with the merchant account, in BCP 47 format..</param>
            <param name="CurrencyCode">The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD..</param>
            <param name="BusinessName">The name of the merchant&#39;s business..</param>
            <param name="BusinessAddress">The address of the merchant&#39;s business..</param>
            <param name="BusinessPhone">The phone number of the merchant&#39;s business..</param>
            <param name="BusinessType">The type of business operated by the merchant. See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values.</param>
            <param name="ShippingAddress">The merchant&#39;s shipping address..</param>
            <param name="LocationDetails">Additional information for a single-location account specified by its associated business account, if it has one..</param>
            <param name="MarketUrl">The URL of the merchant&#39;s online store..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.Id">
            <summary>
            The merchant account&#39;s unique identifier.
            </summary>
            <value>The merchant account&#39;s unique identifier.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.Name">
            <summary>
            The name associated with the merchant account.
            </summary>
            <value>The name associated with the merchant account.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.Email">
            <summary>
            The email address associated with the merchant account.
            </summary>
            <value>The email address associated with the merchant account.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.AccountCapabilities">
            <summary>
            Capabilities that are enabled for the merchant&#39;s Square account. Capabilities that are not listed in this array are not enabled for the account.
            </summary>
            <value>Capabilities that are enabled for the merchant&#39;s Square account. Capabilities that are not listed in this array are not enabled for the account.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.CountryCode">
            <summary>
            The country associated with the merchant account, in ISO 3166-1-alpha-2 format.
            </summary>
            <value>The country associated with the merchant account, in ISO 3166-1-alpha-2 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.LanguageCode">
            <summary>
            The language associated with the merchant account, in BCP 47 format.
            </summary>
            <value>The language associated with the merchant account, in BCP 47 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.CurrencyCode">
            <summary>
            The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.
            </summary>
            <value>The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.BusinessName">
            <summary>
            The name of the merchant&#39;s business.
            </summary>
            <value>The name of the merchant&#39;s business.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.BusinessAddress">
            <summary>
            The address of the merchant&#39;s business.
            </summary>
            <value>The address of the merchant&#39;s business.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.BusinessPhone">
            <summary>
            The phone number of the merchant&#39;s business.
            </summary>
            <value>The phone number of the merchant&#39;s business.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.ShippingAddress">
            <summary>
            The merchant&#39;s shipping address.
            </summary>
            <value>The merchant&#39;s shipping address.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.LocationDetails">
            <summary>
            Additional information for a single-location account specified by its associated business account, if it has one.
            </summary>
            <value>Additional information for a single-location account specified by its associated business account, if it has one.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Merchant.MarketUrl">
            <summary>
            The URL of the merchant&#39;s online store.
            </summary>
            <value>The URL of the merchant&#39;s online store.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Merchant.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Merchant.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Merchant.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Merchant.Equals(Square.Connect.Model.V1Merchant)">
            <summary>
            Returns true if V1Merchant instances are equal
            </summary>
            <param name="other">Instance of V1Merchant to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Merchant.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1MerchantAccountType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantAccountType.LOCATION">
            <summary>
            Enum LOCATION for "LOCATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantAccountType.BUSINESS">
            <summary>
            Enum BUSINESS for "BUSINESS"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1MerchantBusinessType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.ACCOUNTING">
            <summary>
            Enum ACCOUNTING for "ACCOUNTING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.APPARELANDACCESSORYSHOPS">
            <summary>
            Enum APPARELANDACCESSORYSHOPS for "APPAREL_AND_ACCESSORY_SHOPS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.ARTDEALERSGALLERIES">
            <summary>
            Enum ARTDEALERSGALLERIES for "ART_DEALERS_GALLERIES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.ARTDESIGNANDPHOTOGRAPHY">
            <summary>
            Enum ARTDESIGNANDPHOTOGRAPHY for "ART_DESIGN_AND_PHOTOGRAPHY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.BARCLUBLOUNGE">
            <summary>
            Enum BARCLUBLOUNGE for "BAR_CLUB_LOUNGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.BEAUTYANDBARBERSHOPS">
            <summary>
            Enum BEAUTYANDBARBERSHOPS for "BEAUTY_AND_BARBER_SHOPS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.BOOKSTORES">
            <summary>
            Enum BOOKSTORES for "BOOK_STORES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.BUSINESSSERVICES">
            <summary>
            Enum BUSINESSSERVICES for "BUSINESS_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.CATERING">
            <summary>
            Enum CATERING for "CATERING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.CHARITABLESOCIALSERVICEORGANIZATIONS">
            <summary>
            Enum CHARITABLESOCIALSERVICEORGANIZATIONS for "CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.CHARITIBLEORGS">
            <summary>
            Enum CHARITIBLEORGS for "CHARITIBLE_ORGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.CLEANINGSERVICES">
            <summary>
            Enum CLEANINGSERVICES for "CLEANING_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.COMPUTEREQUIPMENTSOFTWAREMAINTENANCEREPAIRSERVICES">
            <summary>
            Enum COMPUTEREQUIPMENTSOFTWAREMAINTENANCEREPAIRSERVICES for "COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.CONSULTANT">
            <summary>
            Enum CONSULTANT for "CONSULTANT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.CONTRACTORS">
            <summary>
            Enum CONTRACTORS for "CONTRACTORS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.DELIVERYSERVICES">
            <summary>
            Enum DELIVERYSERVICES for "DELIVERY_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.DENTISTRY">
            <summary>
            Enum DENTISTRY for "DENTISTRY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.EDUCATION">
            <summary>
            Enum EDUCATION for "EDUCATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.FOODSTORESCONVENIENCESTORESANDSPECIALTYMARKETS">
            <summary>
            Enum FOODSTORESCONVENIENCESTORESANDSPECIALTYMARKETS for "FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.FOODTRUCKCART">
            <summary>
            Enum FOODTRUCKCART for "FOOD_TRUCK_CART"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.FURNITUREHOMEANDOFFICEEQUIPMENT">
            <summary>
            Enum FURNITUREHOMEANDOFFICEEQUIPMENT for "FURNITURE_HOME_AND_OFFICE_EQUIPMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.FURNITUREHOMEGOODS">
            <summary>
            Enum FURNITUREHOMEGOODS for "FURNITURE_HOME_GOODS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.HOTELSANDLODGING">
            <summary>
            Enum HOTELSANDLODGING for "HOTELS_AND_LODGING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.INDIVIDUALUSE">
            <summary>
            Enum INDIVIDUALUSE for "INDIVIDUAL_USE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.JEWELRYANDWATCHES">
            <summary>
            Enum JEWELRYANDWATCHES for "JEWELRY_AND_WATCHES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.LANDSCAPINGANDHORTICULTURALSERVICES">
            <summary>
            Enum LANDSCAPINGANDHORTICULTURALSERVICES for "LANDSCAPING_AND_HORTICULTURAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.LANGUAGESCHOOLS">
            <summary>
            Enum LANGUAGESCHOOLS for "LANGUAGE_SCHOOLS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.LEGALSERVICES">
            <summary>
            Enum LEGALSERVICES for "LEGAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.MEDICALPRACTITIONERS">
            <summary>
            Enum MEDICALPRACTITIONERS for "MEDICAL_PRACTITIONERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.MEDICALSERVICESANDHEALTHPRACTITIONERS">
            <summary>
            Enum MEDICALSERVICESANDHEALTHPRACTITIONERS for "MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.MEMBERSHIPORGANIZATIONS">
            <summary>
            Enum MEMBERSHIPORGANIZATIONS for "MEMBERSHIP_ORGANIZATIONS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.MUSICANDENTERTAINMENT">
            <summary>
            Enum MUSICANDENTERTAINMENT for "MUSIC_AND_ENTERTAINMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.OUTDOORMARKETS">
            <summary>
            Enum OUTDOORMARKETS for "OUTDOOR_MARKETS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.PERSONALSERVICES">
            <summary>
            Enum PERSONALSERVICES for "PERSONAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.POLITICALORGANIZATIONS">
            <summary>
            Enum POLITICALORGANIZATIONS for "POLITICAL_ORGANIZATIONS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.PROFESSIONALSERVICES">
            <summary>
            Enum PROFESSIONALSERVICES for "PROFESSIONAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.REALESTATE">
            <summary>
            Enum REALESTATE for "REAL_ESTATE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.RECREATIONSERVICES">
            <summary>
            Enum RECREATIONSERVICES for "RECREATION_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.REPAIRSHOPSANDRELATEDSERVICES">
            <summary>
            Enum REPAIRSHOPSANDRELATEDSERVICES for "REPAIR_SHOPS_AND_RELATED_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.RESTAURANTS">
            <summary>
            Enum RESTAURANTS for "RESTAURANTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.RETAILSHOPS">
            <summary>
            Enum RETAILSHOPS for "RETAIL_SHOPS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.SCHOOLSANDEDUCATIONALSERVICES">
            <summary>
            Enum SCHOOLSANDEDUCATIONALSERVICES for "SCHOOLS_AND_EDUCATIONAL_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.SPORTINGGOODS">
            <summary>
            Enum SPORTINGGOODS for "SPORTING_GOODS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.TAXICABSANDLIMOUSINES">
            <summary>
            Enum TAXICABSANDLIMOUSINES for "TAXICABS_AND_LIMOUSINES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.TICKETSALES">
            <summary>
            Enum TICKETSALES for "TICKET_SALES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.TOURISM">
            <summary>
            Enum TOURISM for "TOURISM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.TRAVELTOURISM">
            <summary>
            Enum TRAVELTOURISM for "TRAVEL_TOURISM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.VETERINARYSERVICES">
            <summary>
            Enum VETERINARYSERVICES for "VETERINARY_SERVICES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1MerchantBusinessType.WEBDEVDESIGN">
            <summary>
            Enum WEBDEVDESIGN for "WEB_DEV_DESIGN"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1MerchantLocationDetails">
            <summary>
            Additional information for a single-location account specified by its associated business account, if it has one.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1MerchantLocationDetails" /> class.
            </summary>
            <param name="Nickname">The nickname assigned to the single-location account by the parent business. This value appears in the parent business&#39;s multi-location dashboard..</param>
        </member>
        <member name="P:Square.Connect.Model.V1MerchantLocationDetails.Nickname">
            <summary>
            The nickname assigned to the single-location account by the parent business. This value appears in the parent business&#39;s multi-location dashboard.
            </summary>
            <value>The nickname assigned to the single-location account by the parent business. This value appears in the parent business&#39;s multi-location dashboard.</value>
        </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.Equals(Square.Connect.Model.V1MerchantLocationDetails)">
            <summary>
            Returns true if V1MerchantLocationDetails instances are equal
            </summary>
            <param name="other">Instance of V1MerchantLocationDetails to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ModifierList">
            <summary>
            V1ModifierList
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ModifierList.SelectionTypeEnum">
            <summary>
            Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item. See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values
            </summary>
            <value>Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item. See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1ModifierList.SelectionTypeEnum.SINGLE">
            <summary>
            Enum SINGLE for "SINGLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ModifierList.SelectionTypeEnum.MULTIPLE">
            <summary>
            Enum MULTIPLE for "MULTIPLE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierList.SelectionType">
            <summary>
            Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item. See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values
            </summary>
            <value>Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item. See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierList.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.V1ModifierList.SelectionTypeEnum},System.Collections.Generic.List{Square.Connect.Model.V1ModifierOption},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ModifierList" /> class.
            </summary>
            <param name="Id">The modifier list&#39;s unique ID..</param>
            <param name="Name">The modifier list&#39;s name..</param>
            <param name="SelectionType">Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item. See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values.</param>
            <param name="ModifierOptions">The options included in the modifier list..</param>
            <param name="V2Id">The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierList.Id">
            <summary>
            The modifier list&#39;s unique ID.
            </summary>
            <value>The modifier list&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierList.Name">
            <summary>
            The modifier list&#39;s name.
            </summary>
            <value>The modifier list&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierList.ModifierOptions">
            <summary>
            The options included in the modifier list.
            </summary>
            <value>The options included in the modifier list.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierList.V2Id">
            <summary>
            The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
            </summary>
            <value>The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierList.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierList.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierList.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierList.Equals(Square.Connect.Model.V1ModifierList)">
            <summary>
            Returns true if V1ModifierList instances are equal
            </summary>
            <param name="other">Instance of V1ModifierList to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierList.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1ModifierListSelectionType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1ModifierListSelectionType.SINGLE">
            <summary>
            Enum SINGLE for "SINGLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1ModifierListSelectionType.MULTIPLE">
            <summary>
            Enum MULTIPLE for "MULTIPLE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1ModifierOption">
            <summary>
            V1ModifierOption
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.#ctor(System.String,System.String,Square.Connect.Model.V1Money,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ModifierOption" /> class.
            </summary>
            <param name="Id">The modifier option&#39;s unique ID..</param>
            <param name="Name">The modifier option&#39;s name..</param>
            <param name="PriceMoney">The modifier option&#39;s price..</param>
            <param name="OnByDefault">If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE..</param>
            <param name="Ordinal">Indicates the modifier option&#39;s list position when displayed in Square Register and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order..</param>
            <param name="ModifierListId">The ID of the modifier list the option belongs to..</param>
            <param name="V2Id">The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.Id">
            <summary>
            The modifier option&#39;s unique ID.
            </summary>
            <value>The modifier option&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.Name">
            <summary>
            The modifier option&#39;s name.
            </summary>
            <value>The modifier option&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.PriceMoney">
            <summary>
            The modifier option&#39;s price.
            </summary>
            <value>The modifier option&#39;s price.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.OnByDefault">
            <summary>
            If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE.
            </summary>
            <value>If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.Ordinal">
            <summary>
            Indicates the modifier option&#39;s list position when displayed in Square Register and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order.
            </summary>
            <value>Indicates the modifier option&#39;s list position when displayed in Square Register and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.ModifierListId">
            <summary>
            The ID of the modifier list the option belongs to.
            </summary>
            <value>The ID of the modifier list the option belongs to.</value>
        </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.V2Id">
            <summary>
            The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
            </summary>
            <value>The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.Equals(Square.Connect.Model.V1ModifierOption)">
            <summary>
            Returns true if V1ModifierOption instances are equal
            </summary>
            <param name="other">Instance of V1ModifierOption to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1Money">
            <summary>
            
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Money.CurrencyCodeEnum">
            <summary>
             See [Currency](#type-currency) for possible values
            </summary>
            <value> See [Currency](#type-currency) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UNKNOWNCURRENCY">
            <summary>
            Enum UNKNOWNCURRENCY for "UNKNOWN_CURRENCY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AED">
            <summary>
            Enum AED for "AED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AFN">
            <summary>
            Enum AFN for "AFN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ALL">
            <summary>
            Enum ALL for "ALL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AMD">
            <summary>
            Enum AMD for "AMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ANG">
            <summary>
            Enum ANG for "ANG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AOA">
            <summary>
            Enum AOA for "AOA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ARS">
            <summary>
            Enum ARS for "ARS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AUD">
            <summary>
            Enum AUD for "AUD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AWG">
            <summary>
            Enum AWG for "AWG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AZN">
            <summary>
            Enum AZN for "AZN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BAM">
            <summary>
            Enum BAM for "BAM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BBD">
            <summary>
            Enum BBD for "BBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BDT">
            <summary>
            Enum BDT for "BDT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BGN">
            <summary>
            Enum BGN for "BGN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BHD">
            <summary>
            Enum BHD for "BHD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BIF">
            <summary>
            Enum BIF for "BIF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BMD">
            <summary>
            Enum BMD for "BMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BND">
            <summary>
            Enum BND for "BND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BOB">
            <summary>
            Enum BOB for "BOB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BOV">
            <summary>
            Enum BOV for "BOV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BRL">
            <summary>
            Enum BRL for "BRL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BSD">
            <summary>
            Enum BSD for "BSD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BTN">
            <summary>
            Enum BTN for "BTN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BWP">
            <summary>
            Enum BWP for "BWP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BYR">
            <summary>
            Enum BYR for "BYR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BZD">
            <summary>
            Enum BZD for "BZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CAD">
            <summary>
            Enum CAD for "CAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CDF">
            <summary>
            Enum CDF for "CDF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CHE">
            <summary>
            Enum CHE for "CHE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CHF">
            <summary>
            Enum CHF for "CHF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CHW">
            <summary>
            Enum CHW for "CHW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CLF">
            <summary>
            Enum CLF for "CLF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CLP">
            <summary>
            Enum CLP for "CLP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CNY">
            <summary>
            Enum CNY for "CNY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.COP">
            <summary>
            Enum COP for "COP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.COU">
            <summary>
            Enum COU for "COU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CRC">
            <summary>
            Enum CRC for "CRC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CUC">
            <summary>
            Enum CUC for "CUC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CUP">
            <summary>
            Enum CUP for "CUP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CVE">
            <summary>
            Enum CVE for "CVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CZK">
            <summary>
            Enum CZK for "CZK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.DJF">
            <summary>
            Enum DJF for "DJF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.DKK">
            <summary>
            Enum DKK for "DKK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.DOP">
            <summary>
            Enum DOP for "DOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.DZD">
            <summary>
            Enum DZD for "DZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.EGP">
            <summary>
            Enum EGP for "EGP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ERN">
            <summary>
            Enum ERN for "ERN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ETB">
            <summary>
            Enum ETB for "ETB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.EUR">
            <summary>
            Enum EUR for "EUR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.FJD">
            <summary>
            Enum FJD for "FJD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.FKP">
            <summary>
            Enum FKP for "FKP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GBP">
            <summary>
            Enum GBP for "GBP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GEL">
            <summary>
            Enum GEL for "GEL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GHS">
            <summary>
            Enum GHS for "GHS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GIP">
            <summary>
            Enum GIP for "GIP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GMD">
            <summary>
            Enum GMD for "GMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GNF">
            <summary>
            Enum GNF for "GNF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GTQ">
            <summary>
            Enum GTQ for "GTQ"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GYD">
            <summary>
            Enum GYD for "GYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HKD">
            <summary>
            Enum HKD for "HKD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HNL">
            <summary>
            Enum HNL for "HNL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HRK">
            <summary>
            Enum HRK for "HRK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HTG">
            <summary>
            Enum HTG for "HTG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HUF">
            <summary>
            Enum HUF for "HUF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.IDR">
            <summary>
            Enum IDR for "IDR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ILS">
            <summary>
            Enum ILS for "ILS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.INR">
            <summary>
            Enum INR for "INR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.IQD">
            <summary>
            Enum IQD for "IQD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.IRR">
            <summary>
            Enum IRR for "IRR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ISK">
            <summary>
            Enum ISK for "ISK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.JMD">
            <summary>
            Enum JMD for "JMD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.JOD">
            <summary>
            Enum JOD for "JOD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.JPY">
            <summary>
            Enum JPY for "JPY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KES">
            <summary>
            Enum KES for "KES"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KGS">
            <summary>
            Enum KGS for "KGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KHR">
            <summary>
            Enum KHR for "KHR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KMF">
            <summary>
            Enum KMF for "KMF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KPW">
            <summary>
            Enum KPW for "KPW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KRW">
            <summary>
            Enum KRW for "KRW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KWD">
            <summary>
            Enum KWD for "KWD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KYD">
            <summary>
            Enum KYD for "KYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KZT">
            <summary>
            Enum KZT for "KZT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LAK">
            <summary>
            Enum LAK for "LAK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LBP">
            <summary>
            Enum LBP for "LBP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LKR">
            <summary>
            Enum LKR for "LKR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LRD">
            <summary>
            Enum LRD for "LRD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LSL">
            <summary>
            Enum LSL for "LSL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LTL">
            <summary>
            Enum LTL for "LTL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LVL">
            <summary>
            Enum LVL for "LVL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LYD">
            <summary>
            Enum LYD for "LYD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MAD">
            <summary>
            Enum MAD for "MAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MDL">
            <summary>
            Enum MDL for "MDL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MGA">
            <summary>
            Enum MGA for "MGA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MKD">
            <summary>
            Enum MKD for "MKD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MMK">
            <summary>
            Enum MMK for "MMK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MNT">
            <summary>
            Enum MNT for "MNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MOP">
            <summary>
            Enum MOP for "MOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MRO">
            <summary>
            Enum MRO for "MRO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MUR">
            <summary>
            Enum MUR for "MUR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MVR">
            <summary>
            Enum MVR for "MVR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MWK">
            <summary>
            Enum MWK for "MWK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MXN">
            <summary>
            Enum MXN for "MXN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MXV">
            <summary>
            Enum MXV for "MXV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MYR">
            <summary>
            Enum MYR for "MYR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MZN">
            <summary>
            Enum MZN for "MZN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NAD">
            <summary>
            Enum NAD for "NAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NGN">
            <summary>
            Enum NGN for "NGN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NIO">
            <summary>
            Enum NIO for "NIO"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NOK">
            <summary>
            Enum NOK for "NOK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NPR">
            <summary>
            Enum NPR for "NPR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NZD">
            <summary>
            Enum NZD for "NZD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.OMR">
            <summary>
            Enum OMR for "OMR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PAB">
            <summary>
            Enum PAB for "PAB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PEN">
            <summary>
            Enum PEN for "PEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PGK">
            <summary>
            Enum PGK for "PGK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PHP">
            <summary>
            Enum PHP for "PHP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PKR">
            <summary>
            Enum PKR for "PKR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PLN">
            <summary>
            Enum PLN for "PLN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PYG">
            <summary>
            Enum PYG for "PYG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.QAR">
            <summary>
            Enum QAR for "QAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.RON">
            <summary>
            Enum RON for "RON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.RSD">
            <summary>
            Enum RSD for "RSD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.RUB">
            <summary>
            Enum RUB for "RUB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.RWF">
            <summary>
            Enum RWF for "RWF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SAR">
            <summary>
            Enum SAR for "SAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SBD">
            <summary>
            Enum SBD for "SBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SCR">
            <summary>
            Enum SCR for "SCR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SDG">
            <summary>
            Enum SDG for "SDG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SEK">
            <summary>
            Enum SEK for "SEK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SGD">
            <summary>
            Enum SGD for "SGD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SHP">
            <summary>
            Enum SHP for "SHP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SLL">
            <summary>
            Enum SLL for "SLL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SOS">
            <summary>
            Enum SOS for "SOS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SRD">
            <summary>
            Enum SRD for "SRD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SSP">
            <summary>
            Enum SSP for "SSP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.STD">
            <summary>
            Enum STD for "STD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SVC">
            <summary>
            Enum SVC for "SVC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SYP">
            <summary>
            Enum SYP for "SYP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SZL">
            <summary>
            Enum SZL for "SZL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.THB">
            <summary>
            Enum THB for "THB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TJS">
            <summary>
            Enum TJS for "TJS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TMT">
            <summary>
            Enum TMT for "TMT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TND">
            <summary>
            Enum TND for "TND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TOP">
            <summary>
            Enum TOP for "TOP"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TRY">
            <summary>
            Enum TRY for "TRY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TTD">
            <summary>
            Enum TTD for "TTD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TWD">
            <summary>
            Enum TWD for "TWD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TZS">
            <summary>
            Enum TZS for "TZS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UAH">
            <summary>
            Enum UAH for "UAH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UGX">
            <summary>
            Enum UGX for "UGX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.USD">
            <summary>
            Enum USD for "USD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.USN">
            <summary>
            Enum USN for "USN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.USS">
            <summary>
            Enum USS for "USS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UYI">
            <summary>
            Enum UYI for "UYI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UYU">
            <summary>
            Enum UYU for "UYU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UZS">
            <summary>
            Enum UZS for "UZS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.VEF">
            <summary>
            Enum VEF for "VEF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.VND">
            <summary>
            Enum VND for "VND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.VUV">
            <summary>
            Enum VUV for "VUV"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.WST">
            <summary>
            Enum WST for "WST"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XAF">
            <summary>
            Enum XAF for "XAF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XAG">
            <summary>
            Enum XAG for "XAG"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XAU">
            <summary>
            Enum XAU for "XAU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XBA">
            <summary>
            Enum XBA for "XBA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XBB">
            <summary>
            Enum XBB for "XBB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XBC">
            <summary>
            Enum XBC for "XBC"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XBD">
            <summary>
            Enum XBD for "XBD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XCD">
            <summary>
            Enum XCD for "XCD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XDR">
            <summary>
            Enum XDR for "XDR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XOF">
            <summary>
            Enum XOF for "XOF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XPD">
            <summary>
            Enum XPD for "XPD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XPF">
            <summary>
            Enum XPF for "XPF"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XPT">
            <summary>
            Enum XPT for "XPT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XTS">
            <summary>
            Enum XTS for "XTS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XXX">
            <summary>
            Enum XXX for "XXX"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.YER">
            <summary>
            Enum YER for "YER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ZAR">
            <summary>
            Enum ZAR for "ZAR"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ZMK">
            <summary>
            Enum ZMK for "ZMK"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ZMW">
            <summary>
            Enum ZMW for "ZMW"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BTC">
            <summary>
            Enum BTC for "BTC"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Money.CurrencyCode">
            <summary>
             See [Currency](#type-currency) for possible values
            </summary>
            <value> See [Currency](#type-currency) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Money.#ctor(System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.V1Money.CurrencyCodeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Money" /> class.
            </summary>
            <param name="Amount">Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a &#39;cent&#39; concept)..</param>
            <param name="CurrencyCode"> See [Currency](#type-currency) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.V1Money.Amount">
            <summary>
            Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a &#39;cent&#39; concept).
            </summary>
            <value>Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a &#39;cent&#39; concept).</value>
        </member>
        <member name="M:Square.Connect.Model.V1Money.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Money.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Money.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Money.Equals(Square.Connect.Model.V1Money)">
            <summary>
            Returns true if V1Money instances are equal
            </summary>
            <param name="other">Instance of V1Money to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Money.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1Order">
            <summary>
            V1Order
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Order.StateEnum">
            <summary>
            Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1OrderState](#type-v1orderstate) for possible values
            </summary>
            <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1OrderState](#type-v1orderstate) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.PENDING">
            <summary>
            Enum PENDING for "PENDING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.REFUNDED">
            <summary>
            Enum REFUNDED for "REFUNDED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.REJECTED">
            <summary>
            Enum REJECTED for "REJECTED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Order.State">
            <summary>
            Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1OrderState](#type-v1orderstate) for possible values
            </summary>
            <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1OrderState](#type-v1orderstate) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Order.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Order.StateEnum},Square.Connect.Model.Address,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.V1Tender,System.Collections.Generic.List{Square.Connect.Model.V1OrderHistoryEntry},System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Order" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Id">The order&#39;s unique identifier..</param>
            <param name="BuyerEmail">The email address of the order&#39;s buyer..</param>
            <param name="RecipientName">The name of the order&#39;s buyer..</param>
            <param name="RecipientPhoneNumber">The phone number to use for the order&#39;s delivery..</param>
            <param name="State">Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1OrderState](#type-v1orderstate) for possible values.</param>
            <param name="ShippingAddress">The address to ship the order to..</param>
            <param name="SubtotalMoney">The amount of all items purchased in the order, before taxes and shipping..</param>
            <param name="TotalShippingMoney">The shipping cost for the order..</param>
            <param name="TotalTaxMoney">The total of all taxes applied to the order..</param>
            <param name="TotalPriceMoney">The total cost of the order..</param>
            <param name="TotalDiscountMoney">The total of all discounts applied to the order..</param>
            <param name="CreatedAt">The time when the order was created, in ISO 8601 format..</param>
            <param name="UpdatedAt">The time when the order was last modified, in ISO 8601 format..</param>
            <param name="ExpiresAt">The time when the order expires if no action is taken, in ISO 8601 format..</param>
            <param name="PaymentId">The unique identifier of the payment associated with the order..</param>
            <param name="BuyerNote">A note provided by the buyer when the order was created, if any..</param>
            <param name="CompletedNote">A note provided by the merchant when the order&#39;s state was set to COMPLETED, if any.</param>
            <param name="RefundedNote">A note provided by the merchant when the order&#39;s state was set to REFUNDED, if any..</param>
            <param name="CanceledNote">A note provided by the merchant when the order&#39;s state was set to CANCELED, if any..</param>
            <param name="Tender">The tender used to pay for the order..</param>
            <param name="OrderHistory">The history of actions associated with the order..</param>
            <param name="PromoCode">The promo code provided by the buyer, if any..</param>
            <param name="BtcReceiveAddress">For Bitcoin transactions, the address that the buyer sent Bitcoin to..</param>
            <param name="BtcPriceSatoshi">For Bitcoin transactions, the price of the buyer&#39;s order in satoshi (100 million satoshi equals 1 BTC)..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Order.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.Id">
            <summary>
            The order&#39;s unique identifier.
            </summary>
            <value>The order&#39;s unique identifier.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.BuyerEmail">
            <summary>
            The email address of the order&#39;s buyer.
            </summary>
            <value>The email address of the order&#39;s buyer.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.RecipientName">
            <summary>
            The name of the order&#39;s buyer.
            </summary>
            <value>The name of the order&#39;s buyer.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.RecipientPhoneNumber">
            <summary>
            The phone number to use for the order&#39;s delivery.
            </summary>
            <value>The phone number to use for the order&#39;s delivery.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.ShippingAddress">
            <summary>
            The address to ship the order to.
            </summary>
            <value>The address to ship the order to.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.SubtotalMoney">
            <summary>
            The amount of all items purchased in the order, before taxes and shipping.
            </summary>
            <value>The amount of all items purchased in the order, before taxes and shipping.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.TotalShippingMoney">
            <summary>
            The shipping cost for the order.
            </summary>
            <value>The shipping cost for the order.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.TotalTaxMoney">
            <summary>
            The total of all taxes applied to the order.
            </summary>
            <value>The total of all taxes applied to the order.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.TotalPriceMoney">
            <summary>
            The total cost of the order.
            </summary>
            <value>The total cost of the order.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.TotalDiscountMoney">
            <summary>
            The total of all discounts applied to the order.
            </summary>
            <value>The total of all discounts applied to the order.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.CreatedAt">
            <summary>
            The time when the order was created, in ISO 8601 format.
            </summary>
            <value>The time when the order was created, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.UpdatedAt">
            <summary>
            The time when the order was last modified, in ISO 8601 format.
            </summary>
            <value>The time when the order was last modified, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.ExpiresAt">
            <summary>
            The time when the order expires if no action is taken, in ISO 8601 format.
            </summary>
            <value>The time when the order expires if no action is taken, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.PaymentId">
            <summary>
            The unique identifier of the payment associated with the order.
            </summary>
            <value>The unique identifier of the payment associated with the order.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.BuyerNote">
            <summary>
            A note provided by the buyer when the order was created, if any.
            </summary>
            <value>A note provided by the buyer when the order was created, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.CompletedNote">
            <summary>
            A note provided by the merchant when the order&#39;s state was set to COMPLETED, if any
            </summary>
            <value>A note provided by the merchant when the order&#39;s state was set to COMPLETED, if any</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.RefundedNote">
            <summary>
            A note provided by the merchant when the order&#39;s state was set to REFUNDED, if any.
            </summary>
            <value>A note provided by the merchant when the order&#39;s state was set to REFUNDED, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.CanceledNote">
            <summary>
            A note provided by the merchant when the order&#39;s state was set to CANCELED, if any.
            </summary>
            <value>A note provided by the merchant when the order&#39;s state was set to CANCELED, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.Tender">
            <summary>
            The tender used to pay for the order.
            </summary>
            <value>The tender used to pay for the order.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.OrderHistory">
            <summary>
            The history of actions associated with the order.
            </summary>
            <value>The history of actions associated with the order.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.PromoCode">
            <summary>
            The promo code provided by the buyer, if any.
            </summary>
            <value>The promo code provided by the buyer, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.BtcReceiveAddress">
            <summary>
            For Bitcoin transactions, the address that the buyer sent Bitcoin to.
            </summary>
            <value>For Bitcoin transactions, the address that the buyer sent Bitcoin to.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Order.BtcPriceSatoshi">
            <summary>
            For Bitcoin transactions, the price of the buyer&#39;s order in satoshi (100 million satoshi equals 1 BTC).
            </summary>
            <value>For Bitcoin transactions, the price of the buyer&#39;s order in satoshi (100 million satoshi equals 1 BTC).</value>
        </member>
        <member name="M:Square.Connect.Model.V1Order.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Order.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Order.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Order.Equals(Square.Connect.Model.V1Order)">
            <summary>
            Returns true if V1Order instances are equal
            </summary>
            <param name="other">Instance of V1Order to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Order.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1OrderHistoryEntry">
            <summary>
            V1OrderHistoryEntry
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum">
            <summary>
            The type of action performed on the order. See [V1OrderHistoryEntryAction](#type-v1orderhistoryentryaction) for possible values
            </summary>
            <value>The type of action performed on the order. See [V1OrderHistoryEntryAction](#type-v1orderhistoryentryaction) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.ORDERPLACED">
            <summary>
            Enum ORDERPLACED for "ORDER_PLACED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.DECLINED">
            <summary>
            Enum DECLINED for "DECLINED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.PAYMENTRECEIVED">
            <summary>
            Enum PAYMENTRECEIVED for "PAYMENT_RECEIVED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.REFUNDED">
            <summary>
            Enum REFUNDED for "REFUNDED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.EXPIRED">
            <summary>
            Enum EXPIRED for "EXPIRED"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1OrderHistoryEntry.Action">
            <summary>
            The type of action performed on the order. See [V1OrderHistoryEntryAction](#type-v1orderhistoryentryaction) for possible values
            </summary>
            <value>The type of action performed on the order. See [V1OrderHistoryEntryAction](#type-v1orderhistoryentryaction) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.#ctor(System.Nullable{Square.Connect.Model.V1OrderHistoryEntry.ActionEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1OrderHistoryEntry" /> class.
            </summary>
            <param name="Action">The type of action performed on the order. See [V1OrderHistoryEntryAction](#type-v1orderhistoryentryaction) for possible values.</param>
            <param name="CreatedAt">The time when the action was performed, in ISO 8601 format..</param>
        </member>
        <member name="P:Square.Connect.Model.V1OrderHistoryEntry.CreatedAt">
            <summary>
            The time when the action was performed, in ISO 8601 format.
            </summary>
            <value>The time when the action was performed, in ISO 8601 format.</value>
        </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.Equals(Square.Connect.Model.V1OrderHistoryEntry)">
            <summary>
            Returns true if V1OrderHistoryEntry instances are equal
            </summary>
            <param name="other">Instance of V1OrderHistoryEntry to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1OrderHistoryEntryAction">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntryAction.ORDERPLACED">
            <summary>
            Enum ORDERPLACED for "ORDER_PLACED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntryAction.DECLINED">
            <summary>
            Enum DECLINED for "DECLINED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntryAction.PAYMENTRECEIVED">
            <summary>
            Enum PAYMENTRECEIVED for "PAYMENT_RECEIVED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntryAction.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntryAction.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntryAction.REFUNDED">
            <summary>
            Enum REFUNDED for "REFUNDED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntryAction.EXPIRED">
            <summary>
            Enum EXPIRED for "EXPIRED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1OrderState">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1OrderState.PENDING">
            <summary>
            Enum PENDING for "PENDING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderState.OPEN">
            <summary>
            Enum OPEN for "OPEN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderState.COMPLETED">
            <summary>
            Enum COMPLETED for "COMPLETED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderState.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderState.REFUNDED">
            <summary>
            Enum REFUNDED for "REFUNDED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1OrderState.REJECTED">
            <summary>
            Enum REJECTED for "REJECTED"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Page">
            <summary>
            V1Page
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1Page.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.List{Square.Connect.Model.V1PageCell})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Page" /> class.
            </summary>
            <param name="Id">The page&#39;s unique identifier..</param>
            <param name="Name">The page&#39;s name, if any..</param>
            <param name="PageIndex">The page&#39;s position in the merchant&#39;s list of pages. Always an integer between 0 and 6, inclusive..</param>
            <param name="Cells">The cells included on the page..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Page.Id">
            <summary>
            The page&#39;s unique identifier.
            </summary>
            <value>The page&#39;s unique identifier.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Page.Name">
            <summary>
            The page&#39;s name, if any.
            </summary>
            <value>The page&#39;s name, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Page.PageIndex">
            <summary>
            The page&#39;s position in the merchant&#39;s list of pages. Always an integer between 0 and 6, inclusive.
            </summary>
            <value>The page&#39;s position in the merchant&#39;s list of pages. Always an integer between 0 and 6, inclusive.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Page.Cells">
            <summary>
            The cells included on the page.
            </summary>
            <value>The cells included on the page.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Page.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Page.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Page.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Page.Equals(Square.Connect.Model.V1Page)">
            <summary>
            Returns true if V1Page instances are equal
            </summary>
            <param name="other">Instance of V1Page to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Page.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1PageCell">
            <summary>
            V1PageCell
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1PageCell.ObjectTypeEnum">
            <summary>
            The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER). See [V1PageCellObjectType](#type-v1pagecellobjecttype) for possible values
            </summary>
            <value>The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER). See [V1PageCellObjectType](#type-v1pagecellobjecttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1PageCell.ObjectTypeEnum.ITEM">
            <summary>
            Enum ITEM for "ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCell.ObjectTypeEnum.DISCOUNT">
            <summary>
            Enum DISCOUNT for "DISCOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCell.ObjectTypeEnum.CATEGORY">
            <summary>
            Enum CATEGORY for "CATEGORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCell.ObjectTypeEnum.PLACEHOLDER">
            <summary>
            Enum PLACEHOLDER for "PLACEHOLDER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1PageCell.PlaceholderTypeEnum">
            <summary>
            For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior. See [V1PageCellPlaceholderType](#type-v1pagecellplaceholdertype) for possible values
            </summary>
            <value>For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior. See [V1PageCellPlaceholderType](#type-v1pagecellplaceholdertype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1PageCell.PlaceholderTypeEnum.ALLITEMS">
            <summary>
            Enum ALLITEMS for "ALL_ITEMS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCell.PlaceholderTypeEnum.DISCOUNTSCATEGORY">
            <summary>
            Enum DISCOUNTSCATEGORY for "DISCOUNTS_CATEGORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCell.PlaceholderTypeEnum.REWARDSFINDER">
            <summary>
            Enum REWARDSFINDER for "REWARDS_FINDER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1PageCell.ObjectType">
            <summary>
            The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER). See [V1PageCellObjectType](#type-v1pagecellobjecttype) for possible values
            </summary>
            <value>The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER). See [V1PageCellObjectType](#type-v1pagecellobjecttype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1PageCell.PlaceholderType">
            <summary>
            For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior. See [V1PageCellPlaceholderType](#type-v1pagecellplaceholdertype) for possible values
            </summary>
            <value>For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior. See [V1PageCellPlaceholderType](#type-v1pagecellplaceholdertype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1PageCell.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.V1PageCell.ObjectTypeEnum},System.String,System.Nullable{Square.Connect.Model.V1PageCell.PlaceholderTypeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PageCell" /> class.
            </summary>
            <param name="PageId">The unique identifier of the page the cell is included on..</param>
            <param name="Row">The row of the cell. Always an integer between 0 and 4, inclusive..</param>
            <param name="Column">The column of the cell. Always an integer between 0 and 4, inclusive..</param>
            <param name="ObjectType">The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER). See [V1PageCellObjectType](#type-v1pagecellobjecttype) for possible values.</param>
            <param name="ObjectId">The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER..</param>
            <param name="PlaceholderType">For a cell with an object_type of PLACEHOLDER, this value indicates the cell&#39;s special behavior. See [V1PageCellPlaceholderType](#type-v1pagecellplaceholdertype) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.V1PageCell.PageId">
            <summary>
            The unique identifier of the page the cell is included on.
            </summary>
            <value>The unique identifier of the page the cell is included on.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PageCell.Row">
            <summary>
            The row of the cell. Always an integer between 0 and 4, inclusive.
            </summary>
            <value>The row of the cell. Always an integer between 0 and 4, inclusive.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PageCell.Column">
            <summary>
            The column of the cell. Always an integer between 0 and 4, inclusive.
            </summary>
            <value>The column of the cell. Always an integer between 0 and 4, inclusive.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PageCell.ObjectId">
            <summary>
            The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.
            </summary>
            <value>The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.</value>
        </member>
        <member name="M:Square.Connect.Model.V1PageCell.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PageCell.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PageCell.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PageCell.Equals(Square.Connect.Model.V1PageCell)">
            <summary>
            Returns true if V1PageCell instances are equal
            </summary>
            <param name="other">Instance of V1PageCell to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PageCell.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1PageCellObjectType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1PageCellObjectType.ITEM">
            <summary>
            Enum ITEM for "ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCellObjectType.DISCOUNT">
            <summary>
            Enum DISCOUNT for "DISCOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCellObjectType.CATEGORY">
            <summary>
            Enum CATEGORY for "CATEGORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCellObjectType.PLACEHOLDER">
            <summary>
            Enum PLACEHOLDER for "PLACEHOLDER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1PageCellPlaceholderType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1PageCellPlaceholderType.ALLITEMS">
            <summary>
            Enum ALLITEMS for "ALL_ITEMS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCellPlaceholderType.DISCOUNTSCATEGORY">
            <summary>
            Enum DISCOUNTSCATEGORY for "DISCOUNTS_CATEGORY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PageCellPlaceholderType.REWARDSFINDER">
            <summary>
            Enum REWARDSFINDER for "REWARDS_FINDER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Payment">
            <summary>
            A payment represents a paid transaction between a Square merchant and a customer. Payment details are usually available from Connect API endpoints within a few minutes after the transaction completes.  Each Payment object includes several fields that end in &#x60;_money&#x60;. These fields describe the various amounts of money that contribute to the payment total:  &lt;ul&gt; &lt;li&gt; Monetary values are &lt;b&gt;positive&lt;/b&gt; if they represent an &lt;em&gt;increase&lt;/em&gt; in the amount of money the merchant receives (e.g., &lt;code&gt;tax_money&lt;/code&gt;, &lt;code&gt;tip_money&lt;/code&gt;). &lt;/li&gt; &lt;li&gt; Monetary values are &lt;b&gt;negative&lt;/b&gt; if they represent an &lt;em&gt;decrease&lt;/em&gt; in the amount of money the merchant receives (e.g., &lt;code&gt;discount_money&lt;/code&gt;, &lt;code&gt;refunded_money&lt;/code&gt;). &lt;/li&gt; &lt;/ul&gt;
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1Payment.#ctor(System.String,System.String,System.String,System.String,Square.Connect.Model.Device,System.String,System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.Collections.Generic.List{Square.Connect.Model.V1PaymentTax},System.Collections.Generic.List{Square.Connect.Model.V1PaymentTax},System.Collections.Generic.List{Square.Connect.Model.V1Tender},System.Collections.Generic.List{Square.Connect.Model.V1Refund},System.Collections.Generic.List{Square.Connect.Model.V1PaymentItemization},Square.Connect.Model.V1Money,System.Collections.Generic.List{Square.Connect.Model.V1PaymentSurcharge},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Payment" /> class.
            </summary>
            <param name="Id">The payment&#39;s unique identifier..</param>
            <param name="MerchantId">The unique identifier of the merchant that took the payment..</param>
            <param name="CreatedAt">The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise..</param>
            <param name="CreatorId">The unique identifier of the Square account that took the payment..</param>
            <param name="Device">The device that took the payment..</param>
            <param name="PaymentUrl">The URL of the payment&#39;s detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page..</param>
            <param name="ReceiptUrl">The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment&#39;s tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment..</param>
            <param name="InclusiveTaxMoney">The sum of all inclusive taxes associated with the payment..</param>
            <param name="AdditiveTaxMoney">The sum of all additive taxes associated with the payment..</param>
            <param name="TaxMoney">The total of all taxes applied to the payment. This is always the sum of inclusive_tax_money and additive_tax_money..</param>
            <param name="TipMoney">The total of all tips applied to the payment..</param>
            <param name="DiscountMoney">The total of all discounts applied to the payment..</param>
            <param name="TotalCollectedMoney">The total of all discounts applied to the payment..</param>
            <param name="ProcessingFeeMoney">The total of all processing fees collected by Square for the payment..</param>
            <param name="NetTotalMoney">The amount to be deposited into the merchant&#39;s bank account for the payment..</param>
            <param name="RefundedMoney">The total of all refunds applied to the payment..</param>
            <param name="SwedishRoundingMoney">The total of all sales, including any applicable taxes, rounded to the smallest legal unit of currency (e.g., the nearest penny in USD, the nearest nickel in CAD).</param>
            <param name="GrossSalesMoney">The total of all sales, including any applicable taxes..</param>
            <param name="NetSalesMoney">The total of all sales, minus any applicable taxes..</param>
            <param name="InclusiveTax">All of the inclusive taxes associated with the payment..</param>
            <param name="AdditiveTax">All of the additive taxes associated with the payment..</param>
            <param name="Tender">All of the tenders associated with the payment..</param>
            <param name="Refunds">All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange..</param>
            <param name="Itemizations">The items purchased in the payment..</param>
            <param name="SurchargeMoney">The total of all surcharges applied to the payment..</param>
            <param name="Surcharges">A list of all surcharges associated with the payment..</param>
            <param name="IsPartial">Indicates whether or not the payment is only partially paid for. If true, this payment will have the tenders collected so far, but the itemizations will be empty until the payment is completed..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.Id">
            <summary>
            The payment&#39;s unique identifier.
            </summary>
            <value>The payment&#39;s unique identifier.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.MerchantId">
            <summary>
            The unique identifier of the merchant that took the payment.
            </summary>
            <value>The unique identifier of the merchant that took the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.CreatedAt">
            <summary>
            The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise.
            </summary>
            <value>The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.CreatorId">
            <summary>
            The unique identifier of the Square account that took the payment.
            </summary>
            <value>The unique identifier of the Square account that took the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.Device">
            <summary>
            The device that took the payment.
            </summary>
            <value>The device that took the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.PaymentUrl">
            <summary>
            The URL of the payment&#39;s detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
            </summary>
            <value>The URL of the payment&#39;s detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.ReceiptUrl">
            <summary>
            The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment&#39;s tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.
            </summary>
            <value>The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment&#39;s tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.InclusiveTaxMoney">
            <summary>
            The sum of all inclusive taxes associated with the payment.
            </summary>
            <value>The sum of all inclusive taxes associated with the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.AdditiveTaxMoney">
            <summary>
            The sum of all additive taxes associated with the payment.
            </summary>
            <value>The sum of all additive taxes associated with the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.TaxMoney">
            <summary>
            The total of all taxes applied to the payment. This is always the sum of inclusive_tax_money and additive_tax_money.
            </summary>
            <value>The total of all taxes applied to the payment. This is always the sum of inclusive_tax_money and additive_tax_money.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.TipMoney">
            <summary>
            The total of all tips applied to the payment.
            </summary>
            <value>The total of all tips applied to the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.DiscountMoney">
            <summary>
            The total of all discounts applied to the payment.
            </summary>
            <value>The total of all discounts applied to the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.TotalCollectedMoney">
            <summary>
            The total of all discounts applied to the payment.
            </summary>
            <value>The total of all discounts applied to the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.ProcessingFeeMoney">
            <summary>
            The total of all processing fees collected by Square for the payment.
            </summary>
            <value>The total of all processing fees collected by Square for the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.NetTotalMoney">
            <summary>
            The amount to be deposited into the merchant&#39;s bank account for the payment.
            </summary>
            <value>The amount to be deposited into the merchant&#39;s bank account for the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.RefundedMoney">
            <summary>
            The total of all refunds applied to the payment.
            </summary>
            <value>The total of all refunds applied to the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.SwedishRoundingMoney">
            <summary>
            The total of all sales, including any applicable taxes, rounded to the smallest legal unit of currency (e.g., the nearest penny in USD, the nearest nickel in CAD)
            </summary>
            <value>The total of all sales, including any applicable taxes, rounded to the smallest legal unit of currency (e.g., the nearest penny in USD, the nearest nickel in CAD)</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.GrossSalesMoney">
            <summary>
            The total of all sales, including any applicable taxes.
            </summary>
            <value>The total of all sales, including any applicable taxes.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.NetSalesMoney">
            <summary>
            The total of all sales, minus any applicable taxes.
            </summary>
            <value>The total of all sales, minus any applicable taxes.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.InclusiveTax">
            <summary>
            All of the inclusive taxes associated with the payment.
            </summary>
            <value>All of the inclusive taxes associated with the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.AdditiveTax">
            <summary>
            All of the additive taxes associated with the payment.
            </summary>
            <value>All of the additive taxes associated with the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.Tender">
            <summary>
            All of the tenders associated with the payment.
            </summary>
            <value>All of the tenders associated with the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.Refunds">
            <summary>
            All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange.
            </summary>
            <value>All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.Itemizations">
            <summary>
            The items purchased in the payment.
            </summary>
            <value>The items purchased in the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.SurchargeMoney">
            <summary>
            The total of all surcharges applied to the payment.
            </summary>
            <value>The total of all surcharges applied to the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.Surcharges">
            <summary>
            A list of all surcharges associated with the payment.
            </summary>
            <value>A list of all surcharges associated with the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Payment.IsPartial">
            <summary>
            Indicates whether or not the payment is only partially paid for. If true, this payment will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
            </summary>
            <value>Indicates whether or not the payment is only partially paid for. If true, this payment will have the tenders collected so far, but the itemizations will be empty until the payment is completed.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Payment.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Payment.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Payment.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Payment.Equals(Square.Connect.Model.V1Payment)">
            <summary>
            Returns true if V1Payment instances are equal
            </summary>
            <param name="other">Instance of V1Payment to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Payment.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentDiscount">
            <summary>
            V1PaymentDiscount
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.#ctor(System.String,Square.Connect.Model.V1Money,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentDiscount" /> class.
            </summary>
            <param name="Name">The discount&#39;s name..</param>
            <param name="AppliedMoney">The amount of money that this discount adds to the payment (note that this value is always negative or zero)..</param>
            <param name="DiscountId">The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentDiscount.Name">
            <summary>
            The discount&#39;s name.
            </summary>
            <value>The discount&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentDiscount.AppliedMoney">
            <summary>
            The amount of money that this discount adds to the payment (note that this value is always negative or zero).
            </summary>
            <value>The amount of money that this discount adds to the payment (note that this value is always negative or zero).</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentDiscount.DiscountId">
            <summary>
            The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.
            </summary>
            <value>The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.Equals(Square.Connect.Model.V1PaymentDiscount)">
            <summary>
            Returns true if V1PaymentDiscount instances are equal
            </summary>
            <param name="other">Instance of V1PaymentDiscount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentItemDetail">
            <summary>
            V1PaymentItemDetail
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentItemDetail" /> class.
            </summary>
            <param name="CategoryName">The name of the item&#39;s merchant-defined category, if any..</param>
            <param name="Sku"> The item&#39;s merchant-defined SKU, if any..</param>
            <param name="ItemId">The unique ID of the item purchased, if any..</param>
            <param name="ItemVariationId">The unique ID of the item variation purchased, if any..</param>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemDetail.CategoryName">
            <summary>
            The name of the item&#39;s merchant-defined category, if any.
            </summary>
            <value>The name of the item&#39;s merchant-defined category, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemDetail.Sku">
            <summary>
             The item&#39;s merchant-defined SKU, if any.
            </summary>
            <value> The item&#39;s merchant-defined SKU, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemDetail.ItemId">
            <summary>
            The unique ID of the item purchased, if any.
            </summary>
            <value>The unique ID of the item purchased, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemDetail.ItemVariationId">
            <summary>
            The unique ID of the item variation purchased, if any.
            </summary>
            <value>The unique ID of the item variation purchased, if any.</value>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.Equals(Square.Connect.Model.V1PaymentItemDetail)">
            <summary>
            Returns true if V1PaymentItemDetail instances are equal
            </summary>
            <param name="other">Instance of V1PaymentItemDetail to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentItemization">
            <summary>
            Payment include an&#x60; itemizations&#x60; field that lists the items purchased, along with associated fees, modifiers, and discounts. Each itemization has an &#x60;itemization_type&#x60; field that indicates which of the following the itemization represents:  &lt;ul&gt; &lt;li&gt;An item variation from the merchant&#39;s item library&lt;/li&gt; &lt;li&gt;A custom monetary amount&lt;/li&gt; &lt;li&gt; An action performed on a Square gift card, such as activating or reloading it. &lt;/li&gt; &lt;/ul&gt;  *Note**: itemization information included in a &#x60;Payment&#x60; object reflects details collected **at the time of the payment**. Details such as the name or price of items might have changed since the payment was processed.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum">
            <summary>
            The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT See [V1PaymentItemizationItemizationType](#type-v1paymentitemizationitemizationtype) for possible values
            </summary>
            <value>The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT See [V1PaymentItemizationItemizationType](#type-v1paymentitemizationitemizationtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.ITEM">
            <summary>
            Enum ITEM for "ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.CUSTOMAMOUNT">
            <summary>
            Enum CUSTOMAMOUNT for "CUSTOM_AMOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.GIFTCARDACTIVATION">
            <summary>
            Enum GIFTCARDACTIVATION for "GIFT_CARD_ACTIVATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.GIFTCARDRELOAD">
            <summary>
            Enum GIFTCARDRELOAD for "GIFT_CARD_RELOAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.GIFTCARDUNKNOWN">
            <summary>
            Enum GIFTCARDUNKNOWN for "GIFT_CARD_UNKNOWN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.ItemizationType">
            <summary>
            The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT See [V1PaymentItemizationItemizationType](#type-v1paymentitemizationitemizationtype) for possible values
            </summary>
            <value>The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT See [V1PaymentItemizationItemizationType](#type-v1paymentitemizationitemizationtype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.#ctor(System.String,System.Nullable{System.Decimal},System.Nullable{Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum},Square.Connect.Model.V1PaymentItemDetail,System.String,System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.Collections.Generic.List{Square.Connect.Model.V1PaymentTax},System.Collections.Generic.List{Square.Connect.Model.V1PaymentDiscount},System.Collections.Generic.List{Square.Connect.Model.V1PaymentModifier})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentItemization" /> class.
            </summary>
            <param name="Name">The item&#39;s name..</param>
            <param name="Quantity">The quantity of the item purchased. This can be a decimal value..</param>
            <param name="ItemizationType">The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT See [V1PaymentItemizationItemizationType](#type-v1paymentitemizationitemizationtype) for possible values.</param>
            <param name="ItemDetail">Details of the item, including its unique identifier and the identifier of the item variation purchased..</param>
            <param name="Notes">Notes entered by the merchant about the item at the time of payment, if any..</param>
            <param name="ItemVariationName">The name of the item variation purchased, if any..</param>
            <param name="TotalMoney">The total cost of the item, including all taxes and discounts..</param>
            <param name="SingleQuantityMoney">The cost of a single unit of this item..</param>
            <param name="GrossSalesMoney">The total cost of the itemization and its modifiers, not including taxes or discounts..</param>
            <param name="DiscountMoney">The total of all discounts applied to the itemization. This value is always negative or zero..</param>
            <param name="NetSalesMoney">The sum of gross_sales_money and discount_money..</param>
            <param name="Taxes">All taxes applied to this itemization..</param>
            <param name="Discounts">All discounts applied to this itemization..</param>
            <param name="Modifiers">All modifier options applied to this itemization..</param>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Name">
            <summary>
            The item&#39;s name.
            </summary>
            <value>The item&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Quantity">
            <summary>
            The quantity of the item purchased. This can be a decimal value.
            </summary>
            <value>The quantity of the item purchased. This can be a decimal value.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.ItemDetail">
            <summary>
            Details of the item, including its unique identifier and the identifier of the item variation purchased.
            </summary>
            <value>Details of the item, including its unique identifier and the identifier of the item variation purchased.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Notes">
            <summary>
            Notes entered by the merchant about the item at the time of payment, if any.
            </summary>
            <value>Notes entered by the merchant about the item at the time of payment, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.ItemVariationName">
            <summary>
            The name of the item variation purchased, if any.
            </summary>
            <value>The name of the item variation purchased, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.TotalMoney">
            <summary>
            The total cost of the item, including all taxes and discounts.
            </summary>
            <value>The total cost of the item, including all taxes and discounts.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.SingleQuantityMoney">
            <summary>
            The cost of a single unit of this item.
            </summary>
            <value>The cost of a single unit of this item.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.GrossSalesMoney">
            <summary>
            The total cost of the itemization and its modifiers, not including taxes or discounts.
            </summary>
            <value>The total cost of the itemization and its modifiers, not including taxes or discounts.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.DiscountMoney">
            <summary>
            The total of all discounts applied to the itemization. This value is always negative or zero.
            </summary>
            <value>The total of all discounts applied to the itemization. This value is always negative or zero.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.NetSalesMoney">
            <summary>
            The sum of gross_sales_money and discount_money.
            </summary>
            <value>The sum of gross_sales_money and discount_money.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Taxes">
            <summary>
            All taxes applied to this itemization.
            </summary>
            <value>All taxes applied to this itemization.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Discounts">
            <summary>
            All discounts applied to this itemization.
            </summary>
            <value>All discounts applied to this itemization.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Modifiers">
            <summary>
            All modifier options applied to this itemization.
            </summary>
            <value>All modifier options applied to this itemization.</value>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.Equals(Square.Connect.Model.V1PaymentItemization)">
            <summary>
            Returns true if V1PaymentItemization instances are equal
            </summary>
            <param name="other">Instance of V1PaymentItemization to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentItemizationItemizationType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemizationItemizationType.ITEM">
            <summary>
            Enum ITEM for "ITEM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemizationItemizationType.CUSTOMAMOUNT">
            <summary>
            Enum CUSTOMAMOUNT for "CUSTOM_AMOUNT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemizationItemizationType.GIFTCARDACTIVATION">
            <summary>
            Enum GIFTCARDACTIVATION for "GIFT_CARD_ACTIVATION"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemizationItemizationType.GIFTCARDRELOAD">
            <summary>
            Enum GIFTCARDRELOAD for "GIFT_CARD_RELOAD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemizationItemizationType.GIFTCARDUNKNOWN">
            <summary>
            Enum GIFTCARDUNKNOWN for "GIFT_CARD_UNKNOWN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentItemizationItemizationType.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentModifier">
            <summary>
            V1PaymentModifier
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.#ctor(System.String,Square.Connect.Model.V1Money,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentModifier" /> class.
            </summary>
            <param name="Name">The modifier option&#39;s name..</param>
            <param name="AppliedMoney">The amount of money that this modifier option adds to the payment..</param>
            <param name="ModifierOptionId">TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentModifier.Name">
            <summary>
            The modifier option&#39;s name.
            </summary>
            <value>The modifier option&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentModifier.AppliedMoney">
            <summary>
            The amount of money that this modifier option adds to the payment.
            </summary>
            <value>The amount of money that this modifier option adds to the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentModifier.ModifierOptionId">
            <summary>
            TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID.
            </summary>
            <value>TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.Equals(Square.Connect.Model.V1PaymentModifier)">
            <summary>
            Returns true if V1PaymentModifier instances are equal
            </summary>
            <param name="other">Instance of V1PaymentModifier to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentSurcharge">
            <summary>
            V1PaymentSurcharge
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentSurcharge.TypeEnum">
            <summary>
            Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group. See [V1PaymentSurchargeType](#type-v1paymentsurchargetype) for possible values
            </summary>
            <value>Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group. See [V1PaymentSurchargeType](#type-v1paymentsurchargetype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentSurcharge.TypeEnum.UNKNOWN">
            <summary>
            Enum UNKNOWN for "UNKNOWN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentSurcharge.TypeEnum.AUTOGRATUITY">
            <summary>
            Enum AUTOGRATUITY for "AUTO_GRATUITY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentSurcharge.TypeEnum.CUSTOM">
            <summary>
            Enum CUSTOM for "CUSTOM"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentSurcharge.Type">
            <summary>
            Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group. See [V1PaymentSurchargeType](#type-v1paymentsurchargetype) for possible values
            </summary>
            <value>Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group. See [V1PaymentSurchargeType](#type-v1paymentsurchargetype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentSurcharge.#ctor(System.String,Square.Connect.Model.V1Money,System.String,Square.Connect.Model.V1Money,System.Nullable{Square.Connect.Model.V1PaymentSurcharge.TypeEnum},System.Nullable{System.Boolean},System.Collections.Generic.List{Square.Connect.Model.V1PaymentTax},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentSurcharge" /> class.
            </summary>
            <param name="Name">The name of the surcharge..</param>
            <param name="AppliedMoney">The amount of money applied to the order as a result of the surcharge..</param>
            <param name="Rate">The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \&quot;0.7\&quot; corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set..</param>
            <param name="AmountMoney">The amount of the surcharge as a Money object. Exactly one of rate or amount_money should be set..</param>
            <param name="Type">Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group. See [V1PaymentSurchargeType](#type-v1paymentsurchargetype) for possible values.</param>
            <param name="Taxable">Indicates whether the surcharge is taxable..</param>
            <param name="Taxes">The list of taxes that should be applied to the surcharge..</param>
            <param name="SurchargeId">A Square-issued unique identifier associated with the surcharge..</param>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentSurcharge.Name">
            <summary>
            The name of the surcharge.
            </summary>
            <value>The name of the surcharge.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentSurcharge.AppliedMoney">
            <summary>
            The amount of money applied to the order as a result of the surcharge.
            </summary>
            <value>The amount of money applied to the order as a result of the surcharge.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentSurcharge.Rate">
            <summary>
            The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \&quot;0.7\&quot; corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set.
            </summary>
            <value>The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \&quot;0.7\&quot; corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentSurcharge.AmountMoney">
            <summary>
            The amount of the surcharge as a Money object. Exactly one of rate or amount_money should be set.
            </summary>
            <value>The amount of the surcharge as a Money object. Exactly one of rate or amount_money should be set.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentSurcharge.Taxable">
            <summary>
            Indicates whether the surcharge is taxable.
            </summary>
            <value>Indicates whether the surcharge is taxable.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentSurcharge.Taxes">
            <summary>
            The list of taxes that should be applied to the surcharge.
            </summary>
            <value>The list of taxes that should be applied to the surcharge.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentSurcharge.SurchargeId">
            <summary>
            A Square-issued unique identifier associated with the surcharge.
            </summary>
            <value>A Square-issued unique identifier associated with the surcharge.</value>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentSurcharge.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentSurcharge.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentSurcharge.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentSurcharge.Equals(Square.Connect.Model.V1PaymentSurcharge)">
            <summary>
            Returns true if V1PaymentSurcharge instances are equal
            </summary>
            <param name="other">Instance of V1PaymentSurcharge to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentSurcharge.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentSurchargeType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentSurchargeType.UNKNOWN">
            <summary>
            Enum UNKNOWN for "UNKNOWN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentSurchargeType.AUTOGRATUITY">
            <summary>
            Enum AUTOGRATUITY for "AUTO_GRATUITY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentSurchargeType.CUSTOM">
            <summary>
            Enum CUSTOM for "CUSTOM"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentTax">
            <summary>
            V1PaymentTax
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentTax.InclusionTypeEnum">
            <summary>
            Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1PaymentTaxInclusionType](#type-v1paymenttaxinclusiontype) for possible values
            </summary>
            <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1PaymentTaxInclusionType](#type-v1paymenttaxinclusiontype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentTax.InclusionTypeEnum.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentTax.InclusionTypeEnum.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.InclusionType">
            <summary>
            Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1PaymentTaxInclusionType](#type-v1paymenttaxinclusiontype) for possible values
            </summary>
            <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1PaymentTaxInclusionType](#type-v1paymenttaxinclusiontype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String,Square.Connect.Model.V1Money,System.String,System.Nullable{Square.Connect.Model.V1PaymentTax.InclusionTypeEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentTax" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
            <param name="Name">The merchant-defined name of the tax..</param>
            <param name="AppliedMoney">The amount of money that this tax adds to the payment..</param>
            <param name="Rate">The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%..</param>
            <param name="InclusionType">Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1PaymentTaxInclusionType](#type-v1paymenttaxinclusiontype) for possible values.</param>
            <param name="FeeId">The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.Name">
            <summary>
            The merchant-defined name of the tax.
            </summary>
            <value>The merchant-defined name of the tax.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.AppliedMoney">
            <summary>
            The amount of money that this tax adds to the payment.
            </summary>
            <value>The amount of money that this tax adds to the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.Rate">
            <summary>
            The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
            </summary>
            <value>The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.FeeId">
            <summary>
            The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
            </summary>
            <value>The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.Equals(Square.Connect.Model.V1PaymentTax)">
            <summary>
            Returns true if V1PaymentTax instances are equal
            </summary>
            <param name="other">Instance of V1PaymentTax to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1PaymentTaxInclusionType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentTaxInclusionType.ADDITIVE">
            <summary>
            Enum ADDITIVE for "ADDITIVE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1PaymentTaxInclusionType.INCLUSIVE">
            <summary>
            Enum INCLUSIVE for "INCLUSIVE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1PhoneNumber">
            <summary>
            Represents a phone number.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PhoneNumber" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PhoneNumber" /> class.
            </summary>
            <param name="CallingCode">The phone number&#39;s international calling code. For US phone numbers, this value is +1. (required).</param>
            <param name="Number">The phone number. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1PhoneNumber.CallingCode">
            <summary>
            The phone number&#39;s international calling code. For US phone numbers, this value is +1.
            </summary>
            <value>The phone number&#39;s international calling code. For US phone numbers, this value is +1.</value>
        </member>
        <member name="P:Square.Connect.Model.V1PhoneNumber.Number">
            <summary>
            The phone number.
            </summary>
            <value>The phone number.</value>
        </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.Equals(Square.Connect.Model.V1PhoneNumber)">
            <summary>
            Returns true if V1PhoneNumber instances are equal
            </summary>
            <param name="other">Instance of V1PhoneNumber to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1Refund">
            <summary>
            V1Refund
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Refund.TypeEnum">
            <summary>
            The type of refund See [V1RefundType](#type-v1refundtype) for possible values
            </summary>
            <value>The type of refund See [V1RefundType](#type-v1refundtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Refund.TypeEnum.FULL">
            <summary>
            Enum FULL for "FULL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Refund.TypeEnum.PARTIAL">
            <summary>
            Enum PARTIAL for "PARTIAL"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.Type">
            <summary>
            The type of refund See [V1RefundType](#type-v1refundtype) for possible values
            </summary>
            <value>The type of refund See [V1RefundType](#type-v1refundtype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Refund.#ctor(System.Nullable{Square.Connect.Model.V1Refund.TypeEnum},System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.Collections.Generic.List{Square.Connect.Model.V1PaymentTax},Square.Connect.Model.V1Money,System.Collections.Generic.List{Square.Connect.Model.V1PaymentTax},Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.Collections.Generic.List{Square.Connect.Model.V1PaymentSurcharge},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Refund" /> class.
            </summary>
            <param name="Type">The type of refund See [V1RefundType](#type-v1refundtype) for possible values.</param>
            <param name="Reason">The merchant-specified reason for the refund..</param>
            <param name="RefundedMoney">The amount of money refunded. This amount is always negative..</param>
            <param name="RefundedProcessingFeeMoney">The amount of processing fee money refunded. This amount is always positive..</param>
            <param name="RefundedTaxMoney">The total amount of tax money refunded. This amount is always negative..</param>
            <param name="RefundedAdditiveTaxMoney">The amount of additive tax money refunded. This amount is always negative..</param>
            <param name="RefundedAdditiveTax">All of the additive taxes associated with the refund..</param>
            <param name="RefundedInclusiveTaxMoney">The amount of inclusive tax money refunded. This amount is always negative..</param>
            <param name="RefundedInclusiveTax">All of the inclusive taxes associated with the refund..</param>
            <param name="RefundedTipMoney">The amount of tip money refunded. This amount is always negative..</param>
            <param name="RefundedDiscountMoney">The amount of discount money refunded. This amount is always positive..</param>
            <param name="RefundedSurchargeMoney">The amount of surcharge money refunded. This amount is always negative..</param>
            <param name="RefundedSurcharges">A list of all surcharges associated with the refund..</param>
            <param name="CreatedAt">The time when the merchant initiated the refund for Square to process, in ISO 8601 format..</param>
            <param name="ProcessedAt">The time when Square processed the refund on behalf of the merchant, in ISO 8601 format..</param>
            <param name="PaymentId">A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange &#x3D;&#x3D; true), payment_id is the ID of the original payment ID even if the payment includes other tenders..</param>
            <param name="MerchantId">.</param>
            <param name="IsExchange">Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.Reason">
            <summary>
            The merchant-specified reason for the refund.
            </summary>
            <value>The merchant-specified reason for the refund.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedMoney">
            <summary>
            The amount of money refunded. This amount is always negative.
            </summary>
            <value>The amount of money refunded. This amount is always negative.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedProcessingFeeMoney">
            <summary>
            The amount of processing fee money refunded. This amount is always positive.
            </summary>
            <value>The amount of processing fee money refunded. This amount is always positive.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedTaxMoney">
            <summary>
            The total amount of tax money refunded. This amount is always negative.
            </summary>
            <value>The total amount of tax money refunded. This amount is always negative.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedAdditiveTaxMoney">
            <summary>
            The amount of additive tax money refunded. This amount is always negative.
            </summary>
            <value>The amount of additive tax money refunded. This amount is always negative.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedAdditiveTax">
            <summary>
            All of the additive taxes associated with the refund.
            </summary>
            <value>All of the additive taxes associated with the refund.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedInclusiveTaxMoney">
            <summary>
            The amount of inclusive tax money refunded. This amount is always negative.
            </summary>
            <value>The amount of inclusive tax money refunded. This amount is always negative.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedInclusiveTax">
            <summary>
            All of the inclusive taxes associated with the refund.
            </summary>
            <value>All of the inclusive taxes associated with the refund.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedTipMoney">
            <summary>
            The amount of tip money refunded. This amount is always negative.
            </summary>
            <value>The amount of tip money refunded. This amount is always negative.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedDiscountMoney">
            <summary>
            The amount of discount money refunded. This amount is always positive.
            </summary>
            <value>The amount of discount money refunded. This amount is always positive.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedSurchargeMoney">
            <summary>
            The amount of surcharge money refunded. This amount is always negative.
            </summary>
            <value>The amount of surcharge money refunded. This amount is always negative.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedSurcharges">
            <summary>
            A list of all surcharges associated with the refund.
            </summary>
            <value>A list of all surcharges associated with the refund.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.CreatedAt">
            <summary>
            The time when the merchant initiated the refund for Square to process, in ISO 8601 format.
            </summary>
            <value>The time when the merchant initiated the refund for Square to process, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.ProcessedAt">
            <summary>
            The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
            </summary>
            <value>The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.PaymentId">
            <summary>
            A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange &#x3D;&#x3D; true), payment_id is the ID of the original payment ID even if the payment includes other tenders.
            </summary>
            <value>A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange &#x3D;&#x3D; true), payment_id is the ID of the original payment ID even if the payment includes other tenders.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.MerchantId">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Square.Connect.Model.V1Refund.IsExchange">
            <summary>
            Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded.
            </summary>
            <value>Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Refund.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Refund.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Refund.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Refund.Equals(Square.Connect.Model.V1Refund)">
            <summary>
            Returns true if V1Refund instances are equal
            </summary>
            <param name="other">Instance of V1Refund to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Refund.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RefundType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1RefundType.FULL">
            <summary>
            Enum FULL for "FULL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1RefundType.PARTIAL">
            <summary>
            Enum PARTIAL for "PARTIAL"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1RemoveFeeRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveFeeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RemoveFeeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveFeeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveFeeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveFeeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveFeeRequest.Equals(Square.Connect.Model.V1RemoveFeeRequest)">
            <summary>
            Returns true if V1RemoveFeeRequest instances are equal
            </summary>
            <param name="other">Instance of V1RemoveFeeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveFeeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RemoveModifierListRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveModifierListRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RemoveModifierListRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveModifierListRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveModifierListRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveModifierListRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveModifierListRequest.Equals(Square.Connect.Model.V1RemoveModifierListRequest)">
            <summary>
            Returns true if V1RemoveModifierListRequest instances are equal
            </summary>
            <param name="other">Instance of V1RemoveModifierListRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RemoveModifierListRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveBankAccountRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBankAccountRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveBankAccountRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBankAccountRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBankAccountRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBankAccountRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBankAccountRequest.Equals(Square.Connect.Model.V1RetrieveBankAccountRequest)">
            <summary>
            Returns true if V1RetrieveBankAccountRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveBankAccountRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBankAccountRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveBusinessRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBusinessRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveBusinessRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBusinessRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBusinessRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBusinessRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBusinessRequest.Equals(Square.Connect.Model.V1RetrieveBusinessRequest)">
            <summary>
            Returns true if V1RetrieveBusinessRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveBusinessRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveBusinessRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveCashDrawerShiftRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveCashDrawerShiftRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveCashDrawerShiftRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveCashDrawerShiftRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveCashDrawerShiftRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveCashDrawerShiftRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveCashDrawerShiftRequest.Equals(Square.Connect.Model.V1RetrieveCashDrawerShiftRequest)">
            <summary>
            Returns true if V1RetrieveCashDrawerShiftRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveCashDrawerShiftRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveCashDrawerShiftRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveEmployeeRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveEmployeeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRequest.Equals(Square.Connect.Model.V1RetrieveEmployeeRequest)">
            <summary>
            Returns true if V1RetrieveEmployeeRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveEmployeeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveEmployeeRoleRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRoleRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveEmployeeRoleRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRoleRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRoleRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRoleRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRoleRequest.Equals(Square.Connect.Model.V1RetrieveEmployeeRoleRequest)">
            <summary>
            Returns true if V1RetrieveEmployeeRoleRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveEmployeeRoleRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveEmployeeRoleRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveItemRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveItemRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveItemRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveItemRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveItemRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveItemRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveItemRequest.Equals(Square.Connect.Model.V1RetrieveItemRequest)">
            <summary>
            Returns true if V1RetrieveItemRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveItemRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveItemRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveModifierListRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveModifierListRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveModifierListRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveModifierListRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveModifierListRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveModifierListRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveModifierListRequest.Equals(Square.Connect.Model.V1RetrieveModifierListRequest)">
            <summary>
            Returns true if V1RetrieveModifierListRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveModifierListRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveModifierListRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveOrderRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveOrderRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveOrderRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveOrderRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveOrderRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveOrderRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveOrderRequest.Equals(Square.Connect.Model.V1RetrieveOrderRequest)">
            <summary>
            Returns true if V1RetrieveOrderRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveOrderRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveOrderRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrievePaymentRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrievePaymentRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrievePaymentRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrievePaymentRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrievePaymentRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrievePaymentRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrievePaymentRequest.Equals(Square.Connect.Model.V1RetrievePaymentRequest)">
            <summary>
            Returns true if V1RetrievePaymentRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrievePaymentRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrievePaymentRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveSettlementRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveSettlementRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveSettlementRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveSettlementRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveSettlementRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveSettlementRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveSettlementRequest.Equals(Square.Connect.Model.V1RetrieveSettlementRequest)">
            <summary>
            Returns true if V1RetrieveSettlementRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveSettlementRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveSettlementRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1RetrieveTimecardRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveTimecardRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1RetrieveTimecardRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveTimecardRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveTimecardRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveTimecardRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveTimecardRequest.Equals(Square.Connect.Model.V1RetrieveTimecardRequest)">
            <summary>
            Returns true if V1RetrieveTimecardRequest instances are equal
            </summary>
            <param name="other">Instance of V1RetrieveTimecardRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1RetrieveTimecardRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1Settlement">
            <summary>
            V1Settlement
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Settlement.StatusEnum">
            <summary>
            The settlement's current status. See [V1SettlementStatus](#type-v1settlementstatus) for possible values
            </summary>
            <value>The settlement's current status. See [V1SettlementStatus](#type-v1settlementstatus) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Settlement.StatusEnum.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Settlement.StatusEnum.SENT">
            <summary>
            Enum SENT for "SENT"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Settlement.Status">
            <summary>
            The settlement's current status. See [V1SettlementStatus](#type-v1settlementstatus) for possible values
            </summary>
            <value>The settlement's current status. See [V1SettlementStatus](#type-v1settlementstatus) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Settlement.#ctor(System.String,System.Nullable{Square.Connect.Model.V1Settlement.StatusEnum},Square.Connect.Model.V1Money,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.V1SettlementEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Settlement" /> class.
            </summary>
            <param name="Id">The settlement&#39;s unique identifier..</param>
            <param name="Status">The settlement&#39;s current status. See [V1SettlementStatus](#type-v1settlementstatus) for possible values.</param>
            <param name="TotalMoney">The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero..</param>
            <param name="InitiatedAt">The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format..</param>
            <param name="BankAccountId">The Square-issued unique identifier for the bank account associated with the settlement..</param>
            <param name="Entries">The entries included in this settlement..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Settlement.Id">
            <summary>
            The settlement&#39;s unique identifier.
            </summary>
            <value>The settlement&#39;s unique identifier.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Settlement.TotalMoney">
            <summary>
            The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.
            </summary>
            <value>The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Settlement.InitiatedAt">
            <summary>
            The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
            </summary>
            <value>The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Settlement.BankAccountId">
            <summary>
            The Square-issued unique identifier for the bank account associated with the settlement.
            </summary>
            <value>The Square-issued unique identifier for the bank account associated with the settlement.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Settlement.Entries">
            <summary>
            The entries included in this settlement.
            </summary>
            <value>The entries included in this settlement.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Settlement.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Settlement.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Settlement.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Settlement.Equals(Square.Connect.Model.V1Settlement)">
            <summary>
            Returns true if V1Settlement instances are equal
            </summary>
            <param name="other">Instance of V1Settlement to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Settlement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1SettlementEntry">
            <summary>
            V1SettlementEntry
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1SettlementEntry.TypeEnum">
            <summary>
            The settlement's current status. See [V1SettlementEntryType](#type-v1settlemententrytype) for possible values
            </summary>
            <value>The settlement's current status. See [V1SettlementEntryType](#type-v1settlemententrytype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.ADJUSTMENT">
            <summary>
            Enum ADJUSTMENT for "ADJUSTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.BALANCECHARGE">
            <summary>
            Enum BALANCECHARGE for "BALANCE_CHARGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.CHARGE">
            <summary>
            Enum CHARGE for "CHARGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.FREEPROCESSING">
            <summary>
            Enum FREEPROCESSING for "FREE_PROCESSING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.HOLDADJUSTMENT">
            <summary>
            Enum HOLDADJUSTMENT for "HOLD_ADJUSTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.PAIDSERVICEFEE">
            <summary>
            Enum PAIDSERVICEFEE for "PAID_SERVICE_FEE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.PAIDSERVICEFEEREFUND">
            <summary>
            Enum PAIDSERVICEFEEREFUND for "PAID_SERVICE_FEE_REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.REDEMPTIONCODE">
            <summary>
            Enum REDEMPTIONCODE for "REDEMPTION_CODE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.REFUND">
            <summary>
            Enum REFUND for "REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.RETURNEDPAYOUT">
            <summary>
            Enum RETURNEDPAYOUT for "RETURNED_PAYOUT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SQUARECAPITALADVANCE">
            <summary>
            Enum SQUARECAPITALADVANCE for "SQUARE_CAPITAL_ADVANCE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SQUARECAPITALPAYMENT">
            <summary>
            Enum SQUARECAPITALPAYMENT for "SQUARE_CAPITAL_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SQUARECAPITALREVERSEDPAYMENT">
            <summary>
            Enum SQUARECAPITALREVERSEDPAYMENT for "SQUARE_CAPITAL_REVERSED_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SUBSCRIPTIONFEE">
            <summary>
            Enum SUBSCRIPTIONFEE for "SUBSCRIPTION_FEE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SUBSCRIPTIONFEEREFUND">
            <summary>
            Enum SUBSCRIPTIONFEEREFUND for "SUBSCRIPTION_FEE_REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.INCENTEDPAYMENT">
            <summary>
            Enum INCENTEDPAYMENT for "INCENTED_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.RETURNEDACHENTRY">
            <summary>
            Enum RETURNEDACHENTRY for "RETURNED_ACH_ENTRY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.RETURNEDSQUARE275">
            <summary>
            Enum RETURNEDSQUARE275 for "RETURNED_SQUARE_275"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SQUARE275">
            <summary>
            Enum SQUARE275 for "SQUARE_275"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SQUARECARD">
            <summary>
            Enum SQUARECARD for "SQUARE_CARD"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1SettlementEntry.Type">
            <summary>
            The settlement's current status. See [V1SettlementEntryType](#type-v1settlemententrytype) for possible values
            </summary>
            <value>The settlement's current status. See [V1SettlementEntryType](#type-v1settlemententrytype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.#ctor(System.String,System.Nullable{Square.Connect.Model.V1SettlementEntry.TypeEnum},Square.Connect.Model.V1Money,Square.Connect.Model.V1Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1SettlementEntry" /> class.
            </summary>
            <param name="PaymentId">The settlement&#39;s unique identifier..</param>
            <param name="Type">The settlement&#39;s current status. See [V1SettlementEntryType](#type-v1settlemententrytype) for possible values.</param>
            <param name="AmountMoney">The total amount of money this entry contributes to the total settlement amount..</param>
            <param name="FeeMoney">The amount of all Square fees associated with this settlement entry. This value is always negative or zero..</param>
        </member>
        <member name="P:Square.Connect.Model.V1SettlementEntry.PaymentId">
            <summary>
            The settlement&#39;s unique identifier.
            </summary>
            <value>The settlement&#39;s unique identifier.</value>
        </member>
        <member name="P:Square.Connect.Model.V1SettlementEntry.AmountMoney">
            <summary>
            The total amount of money this entry contributes to the total settlement amount.
            </summary>
            <value>The total amount of money this entry contributes to the total settlement amount.</value>
        </member>
        <member name="P:Square.Connect.Model.V1SettlementEntry.FeeMoney">
            <summary>
            The amount of all Square fees associated with this settlement entry. This value is always negative or zero.
            </summary>
            <value>The amount of all Square fees associated with this settlement entry. This value is always negative or zero.</value>
        </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.Equals(Square.Connect.Model.V1SettlementEntry)">
            <summary>
            Returns true if V1SettlementEntry instances are equal
            </summary>
            <param name="other">Instance of V1SettlementEntry to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1SettlementEntryType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.ADJUSTMENT">
            <summary>
            Enum ADJUSTMENT for "ADJUSTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.BALANCECHARGE">
            <summary>
            Enum BALANCECHARGE for "BALANCE_CHARGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.CHARGE">
            <summary>
            Enum CHARGE for "CHARGE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.FREEPROCESSING">
            <summary>
            Enum FREEPROCESSING for "FREE_PROCESSING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.HOLDADJUSTMENT">
            <summary>
            Enum HOLDADJUSTMENT for "HOLD_ADJUSTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.PAIDSERVICEFEE">
            <summary>
            Enum PAIDSERVICEFEE for "PAID_SERVICE_FEE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.PAIDSERVICEFEEREFUND">
            <summary>
            Enum PAIDSERVICEFEEREFUND for "PAID_SERVICE_FEE_REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.REDEMPTIONCODE">
            <summary>
            Enum REDEMPTIONCODE for "REDEMPTION_CODE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.REFUND">
            <summary>
            Enum REFUND for "REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.RETURNEDPAYOUT">
            <summary>
            Enum RETURNEDPAYOUT for "RETURNED_PAYOUT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.SQUARECAPITALADVANCE">
            <summary>
            Enum SQUARECAPITALADVANCE for "SQUARE_CAPITAL_ADVANCE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.SQUARECAPITALPAYMENT">
            <summary>
            Enum SQUARECAPITALPAYMENT for "SQUARE_CAPITAL_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.SQUARECAPITALREVERSEDPAYMENT">
            <summary>
            Enum SQUARECAPITALREVERSEDPAYMENT for "SQUARE_CAPITAL_REVERSED_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.SUBSCRIPTIONFEE">
            <summary>
            Enum SUBSCRIPTIONFEE for "SUBSCRIPTION_FEE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.SUBSCRIPTIONFEEREFUND">
            <summary>
            Enum SUBSCRIPTIONFEEREFUND for "SUBSCRIPTION_FEE_REFUND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.INCENTEDPAYMENT">
            <summary>
            Enum INCENTEDPAYMENT for "INCENTED_PAYMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.RETURNEDACHENTRY">
            <summary>
            Enum RETURNEDACHENTRY for "RETURNED_ACH_ENTRY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.RETURNEDSQUARE275">
            <summary>
            Enum RETURNEDSQUARE275 for "RETURNED_SQUARE_275"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.SQUARE275">
            <summary>
            Enum SQUARE275 for "SQUARE_275"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementEntryType.SQUARECARD">
            <summary>
            Enum SQUARECARD for "SQUARE_CARD"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1SettlementStatus">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementStatus.FAILED">
            <summary>
            Enum FAILED for "FAILED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1SettlementStatus.SENT">
            <summary>
            Enum SENT for "SENT"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Tender">
            <summary>
            A tender represents a discrete monetary exchange. Square represents this exchange as a money object with a specific currency and amount, where the amount is given in the smallest denomination of the given currency.  Square POS can accept more than one form of tender for a single payment (such as by splitting a bill between a credit card and a gift card). The &#x60;tender&#x60; field of the Payment object lists all forms of tender used for the payment.  Split tender payments behave slightly differently from single tender payments:  The receipt_url for a split tender corresponds only to the first tender listed in the tender field. To get the receipt URLs for the remaining tenders, use the receipt_url fields of the corresponding Tender objects.  *A note on gift cards**: when a customer purchases a Square gift card from a merchant, the merchant receives the full amount of the gift card in the associated payment.  When that gift card is used as a tender, the balance of the gift card is reduced and the merchant receives no funds. A &#x60;Tender&#x60; object with a type of &#x60;SQUARE_GIFT_CARD&#x60; indicates a gift card was used for some or all of the associated payment.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Tender.TypeEnum">
            <summary>
            The type of tender. See [V1TenderType](#type-v1tendertype) for possible values
            </summary>
            <value>The type of tender. See [V1TenderType](#type-v1tendertype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.CREDITCARD">
            <summary>
            Enum CREDITCARD for "CREDIT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.CASH">
            <summary>
            Enum CASH for "CASH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.THIRDPARTYCARD">
            <summary>
            Enum THIRDPARTYCARD for "THIRD_PARTY_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.NOSALE">
            <summary>
            Enum NOSALE for "NO_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.SQUAREWALLET">
            <summary>
            Enum SQUAREWALLET for "SQUARE_WALLET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.SQUAREGIFTCARD">
            <summary>
            Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.UNKNOWN">
            <summary>
            Enum UNKNOWN for "UNKNOWN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Tender.CardBrandEnum">
            <summary>
            The brand of credit card provided. See [V1TenderCardBrand](#type-v1tendercardbrand) for possible values
            </summary>
            <value>The brand of credit card provided. See [V1TenderCardBrand](#type-v1tendercardbrand) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.OTHERBRAND">
            <summary>
            Enum OTHERBRAND for "OTHER_BRAND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.VISA">
            <summary>
            Enum VISA for "VISA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.MASTERCARD">
            <summary>
            Enum MASTERCARD for "MASTER_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.AMERICANEXPRESS">
            <summary>
            Enum AMERICANEXPRESS for "AMERICAN_EXPRESS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.DISCOVER">
            <summary>
            Enum DISCOVER for "DISCOVER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.DISCOVERDINERS">
            <summary>
            Enum DISCOVERDINERS for "DISCOVER_DINERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.JCB">
            <summary>
            Enum JCB for "JCB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.CHINAUNIONPAY">
            <summary>
            Enum CHINAUNIONPAY for "CHINA_UNIONPAY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.SQUAREGIFTCARD">
            <summary>
            Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Tender.EntryMethodEnum">
            <summary>
            The tender's unique ID. See [V1TenderEntryMethod](#type-v1tenderentrymethod) for possible values
            </summary>
            <value>The tender's unique ID. See [V1TenderEntryMethod](#type-v1tenderentrymethod) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.MANUAL">
            <summary>
            Enum MANUAL for "MANUAL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.SCANNED">
            <summary>
            Enum SCANNED for "SCANNED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.SQUARECASH">
            <summary>
            Enum SQUARECASH for "SQUARE_CASH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.SQUAREWALLET">
            <summary>
            Enum SQUAREWALLET for "SQUARE_WALLET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.SWIPED">
            <summary>
            Enum SWIPED for "SWIPED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.WEBFORM">
            <summary>
            Enum WEBFORM for "WEB_FORM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.Type">
            <summary>
            The type of tender. See [V1TenderType](#type-v1tendertype) for possible values
            </summary>
            <value>The type of tender. See [V1TenderType](#type-v1tendertype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.CardBrand">
            <summary>
            The brand of credit card provided. See [V1TenderCardBrand](#type-v1tendercardbrand) for possible values
            </summary>
            <value>The brand of credit card provided. See [V1TenderCardBrand](#type-v1tendercardbrand) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.EntryMethod">
            <summary>
            The tender's unique ID. See [V1TenderEntryMethod](#type-v1tenderentrymethod) for possible values
            </summary>
            <value>The tender's unique ID. See [V1TenderEntryMethod](#type-v1tenderentrymethod) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Tender.#ctor(System.String,System.Nullable{Square.Connect.Model.V1Tender.TypeEnum},System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Tender.CardBrandEnum},System.String,System.Nullable{Square.Connect.Model.V1Tender.EntryMethodEnum},System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.String,System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Tender" /> class.
            </summary>
            <param name="Id">The tender&#39;s unique ID..</param>
            <param name="Type">The type of tender. See [V1TenderType](#type-v1tendertype) for possible values.</param>
            <param name="Name">A human-readable description of the tender..</param>
            <param name="EmployeeId">The ID of the employee that processed the tender..</param>
            <param name="ReceiptUrl">The URL of the receipt for the tender..</param>
            <param name="CardBrand">The brand of credit card provided. See [V1TenderCardBrand](#type-v1tendercardbrand) for possible values.</param>
            <param name="PanSuffix">The last four digits of the provided credit card&#39;s account number..</param>
            <param name="EntryMethod">The tender&#39;s unique ID. See [V1TenderEntryMethod](#type-v1tenderentrymethod) for possible values.</param>
            <param name="PaymentNote">Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER..</param>
            <param name="TotalMoney">The total amount of money provided in this form of tender..</param>
            <param name="TenderedMoney">The amount of total_money applied to the payment..</param>
            <param name="TenderedAt">The time when the tender was created, in ISO 8601 format..</param>
            <param name="SettledAt">The time when the tender was settled, in ISO 8601 format..</param>
            <param name="ChangeBackMoney">The amount of total_money returned to the buyer as change..</param>
            <param name="RefundedMoney">The total of all refunds applied to this tender. This amount is always negative or zero..</param>
            <param name="IsExchange">Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.Id">
            <summary>
            The tender&#39;s unique ID.
            </summary>
            <value>The tender&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.Name">
            <summary>
            A human-readable description of the tender.
            </summary>
            <value>A human-readable description of the tender.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.EmployeeId">
            <summary>
            The ID of the employee that processed the tender.
            </summary>
            <value>The ID of the employee that processed the tender.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.ReceiptUrl">
            <summary>
            The URL of the receipt for the tender.
            </summary>
            <value>The URL of the receipt for the tender.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.PanSuffix">
            <summary>
            The last four digits of the provided credit card&#39;s account number.
            </summary>
            <value>The last four digits of the provided credit card&#39;s account number.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.PaymentNote">
            <summary>
            Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
            </summary>
            <value>Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.TotalMoney">
            <summary>
            The total amount of money provided in this form of tender.
            </summary>
            <value>The total amount of money provided in this form of tender.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.TenderedMoney">
            <summary>
            The amount of total_money applied to the payment.
            </summary>
            <value>The amount of total_money applied to the payment.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.TenderedAt">
            <summary>
            The time when the tender was created, in ISO 8601 format.
            </summary>
            <value>The time when the tender was created, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.SettledAt">
            <summary>
            The time when the tender was settled, in ISO 8601 format.
            </summary>
            <value>The time when the tender was settled, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.ChangeBackMoney">
            <summary>
            The amount of total_money returned to the buyer as change.
            </summary>
            <value>The amount of total_money returned to the buyer as change.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.RefundedMoney">
            <summary>
            The total of all refunds applied to this tender. This amount is always negative or zero.
            </summary>
            <value>The total of all refunds applied to this tender. This amount is always negative or zero.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Tender.IsExchange">
            <summary>
            Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.
            </summary>
            <value>Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Tender.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Tender.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Tender.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Tender.Equals(Square.Connect.Model.V1Tender)">
            <summary>
            Returns true if V1Tender instances are equal
            </summary>
            <param name="other">Instance of V1Tender to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Tender.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1TenderCardBrand">
            <summary>
            The brand of a credit card.
            </summary>
            <value>The brand of a credit card.</value>
        </member>
        <member name="F:Square.Connect.Model.V1TenderCardBrand.OTHERBRAND">
            <summary>
            Enum OTHERBRAND for "OTHER_BRAND"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderCardBrand.VISA">
            <summary>
            Enum VISA for "VISA"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderCardBrand.MASTERCARD">
            <summary>
            Enum MASTERCARD for "MASTER_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderCardBrand.AMERICANEXPRESS">
            <summary>
            Enum AMERICANEXPRESS for "AMERICAN_EXPRESS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderCardBrand.DISCOVER">
            <summary>
            Enum DISCOVER for "DISCOVER"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderCardBrand.DISCOVERDINERS">
            <summary>
            Enum DISCOVERDINERS for "DISCOVER_DINERS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderCardBrand.JCB">
            <summary>
            Enum JCB for "JCB"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderCardBrand.CHINAUNIONPAY">
            <summary>
            Enum CHINAUNIONPAY for "CHINA_UNIONPAY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderCardBrand.SQUAREGIFTCARD">
            <summary>
            Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1TenderEntryMethod">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1TenderEntryMethod.MANUAL">
            <summary>
            Enum MANUAL for "MANUAL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderEntryMethod.SCANNED">
            <summary>
            Enum SCANNED for "SCANNED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderEntryMethod.SQUARECASH">
            <summary>
            Enum SQUARECASH for "SQUARE_CASH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderEntryMethod.SQUAREWALLET">
            <summary>
            Enum SQUAREWALLET for "SQUARE_WALLET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderEntryMethod.SWIPED">
            <summary>
            Enum SWIPED for "SWIPED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderEntryMethod.WEBFORM">
            <summary>
            Enum WEBFORM for "WEB_FORM"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderEntryMethod.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1TenderType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1TenderType.CREDITCARD">
            <summary>
            Enum CREDITCARD for "CREDIT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderType.CASH">
            <summary>
            Enum CASH for "CASH"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderType.THIRDPARTYCARD">
            <summary>
            Enum THIRDPARTYCARD for "THIRD_PARTY_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderType.NOSALE">
            <summary>
            Enum NOSALE for "NO_SALE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderType.SQUAREWALLET">
            <summary>
            Enum SQUAREWALLET for "SQUARE_WALLET"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderType.SQUAREGIFTCARD">
            <summary>
            Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderType.UNKNOWN">
            <summary>
            Enum UNKNOWN for "UNKNOWN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TenderType.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Timecard">
            <summary>
            Represents a timecard for an employee.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1Timecard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Timecard" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1Timecard.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Timecard" /> class.
            </summary>
            <param name="Id">The timecard&#39;s unique ID..</param>
            <param name="EmployeeId">The ID of the employee the timecard is associated with. (required).</param>
            <param name="Deleted">If true, the timecard was deleted by the merchant, and it is no longer valid..</param>
            <param name="ClockinTime">The clock-in time for the timecard, in ISO 8601 format..</param>
            <param name="ClockoutTime">The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system..</param>
            <param name="ClockinLocationId">The ID of the location the employee clocked in from. We strongly reccomend providing a clockin_location_id. Square uses the clockin_location_id to determine a timecard’s timezone and overtime rules..</param>
            <param name="ClockoutLocationId">The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system..</param>
            <param name="CreatedAt">The time when the timecard was created, in ISO 8601 format..</param>
            <param name="UpdatedAt">The time when the timecard was most recently updated, in ISO 8601 format..</param>
            <param name="RegularSecondsWorked">The total number of regular (non-overtime) seconds worked in the timecard..</param>
            <param name="OvertimeSecondsWorked">The total number of overtime seconds worked in the timecard..</param>
            <param name="DoubletimeSecondsWorked">The total number of doubletime seconds worked in the timecard..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.Id">
            <summary>
            The timecard&#39;s unique ID.
            </summary>
            <value>The timecard&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.EmployeeId">
            <summary>
            The ID of the employee the timecard is associated with.
            </summary>
            <value>The ID of the employee the timecard is associated with.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.Deleted">
            <summary>
            If true, the timecard was deleted by the merchant, and it is no longer valid.
            </summary>
            <value>If true, the timecard was deleted by the merchant, and it is no longer valid.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.ClockinTime">
            <summary>
            The clock-in time for the timecard, in ISO 8601 format.
            </summary>
            <value>The clock-in time for the timecard, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.ClockoutTime">
            <summary>
            The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.
            </summary>
            <value>The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.ClockinLocationId">
            <summary>
            The ID of the location the employee clocked in from. We strongly reccomend providing a clockin_location_id. Square uses the clockin_location_id to determine a timecard’s timezone and overtime rules.
            </summary>
            <value>The ID of the location the employee clocked in from. We strongly reccomend providing a clockin_location_id. Square uses the clockin_location_id to determine a timecard’s timezone and overtime rules.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.ClockoutLocationId">
            <summary>
            The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.
            </summary>
            <value>The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.CreatedAt">
            <summary>
            The time when the timecard was created, in ISO 8601 format.
            </summary>
            <value>The time when the timecard was created, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.UpdatedAt">
            <summary>
            The time when the timecard was most recently updated, in ISO 8601 format.
            </summary>
            <value>The time when the timecard was most recently updated, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.RegularSecondsWorked">
            <summary>
            The total number of regular (non-overtime) seconds worked in the timecard.
            </summary>
            <value>The total number of regular (non-overtime) seconds worked in the timecard.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.OvertimeSecondsWorked">
            <summary>
            The total number of overtime seconds worked in the timecard.
            </summary>
            <value>The total number of overtime seconds worked in the timecard.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Timecard.DoubletimeSecondsWorked">
            <summary>
            The total number of doubletime seconds worked in the timecard.
            </summary>
            <value>The total number of doubletime seconds worked in the timecard.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Timecard.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Timecard.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Timecard.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Timecard.Equals(Square.Connect.Model.V1Timecard)">
            <summary>
            Returns true if V1Timecard instances are equal
            </summary>
            <param name="other">Instance of V1Timecard to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Timecard.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1TimecardEvent">
            <summary>
            V1TimecardEvent
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1TimecardEvent.EventTypeEnum">
            <summary>
            The ID of the timecard to list events for. See [V1TimecardEventEventType](#type-v1timecardeventeventtype) for possible values
            </summary>
            <value>The ID of the timecard to list events for. See [V1TimecardEventEventType](#type-v1timecardeventeventtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.APICREATE">
            <summary>
            Enum APICREATE for "API_CREATE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.APIEDIT">
            <summary>
            Enum APIEDIT for "API_EDIT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.APIDELETE">
            <summary>
            Enum APIDELETE for "API_DELETE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.REGISTERCLOCKIN">
            <summary>
            Enum REGISTERCLOCKIN for "REGISTER_CLOCKIN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.REGISTERCLOCKOUT">
            <summary>
            Enum REGISTERCLOCKOUT for "REGISTER_CLOCKOUT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.DASHBOARDSUPERVISORCLOSE">
            <summary>
            Enum DASHBOARDSUPERVISORCLOSE for "DASHBOARD_SUPERVISOR_CLOSE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.DASHBOARDEDIT">
            <summary>
            Enum DASHBOARDEDIT for "DASHBOARD_EDIT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.DASHBOARDDELETE">
            <summary>
            Enum DASHBOARDDELETE for "DASHBOARD_DELETE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.EventType">
            <summary>
            The ID of the timecard to list events for. See [V1TimecardEventEventType](#type-v1timecardeventeventtype) for possible values
            </summary>
            <value>The ID of the timecard to list events for. See [V1TimecardEventEventType](#type-v1timecardeventeventtype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.#ctor(System.String,System.Nullable{Square.Connect.Model.V1TimecardEvent.EventTypeEnum},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1TimecardEvent" /> class.
            </summary>
            <param name="Id">The event&#39;s unique ID..</param>
            <param name="EventType">The ID of the timecard to list events for. See [V1TimecardEventEventType](#type-v1timecardeventeventtype) for possible values.</param>
            <param name="ClockinTime">The time the employee clocked in, in ISO 8601 format..</param>
            <param name="ClockoutTime">The time the employee clocked out, in ISO 8601 format..</param>
            <param name="CreatedAt">The time when the event was created, in ISO 8601 format..</param>
        </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.Id">
            <summary>
            The event&#39;s unique ID.
            </summary>
            <value>The event&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.ClockinTime">
            <summary>
            The time the employee clocked in, in ISO 8601 format.
            </summary>
            <value>The time the employee clocked in, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.ClockoutTime">
            <summary>
            The time the employee clocked out, in ISO 8601 format.
            </summary>
            <value>The time the employee clocked out, in ISO 8601 format.</value>
        </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.CreatedAt">
            <summary>
            The time when the event was created, in ISO 8601 format.
            </summary>
            <value>The time when the event was created, in ISO 8601 format.</value>
        </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.Equals(Square.Connect.Model.V1TimecardEvent)">
            <summary>
            Returns true if V1TimecardEvent instances are equal
            </summary>
            <param name="other">Instance of V1TimecardEvent to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1TimecardEventEventType">
            <summary>
            Actions that resulted in a change to a timecard. All timecard events created with the Connect API have an event type that begins with `API`.
            </summary>
            <value>Actions that resulted in a change to a timecard. All timecard events created with the Connect API have an event type that begins with `API`.</value>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEventEventType.APICREATE">
            <summary>
            Enum APICREATE for "API_CREATE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEventEventType.APIEDIT">
            <summary>
            Enum APIEDIT for "API_EDIT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEventEventType.APIDELETE">
            <summary>
            Enum APIDELETE for "API_DELETE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEventEventType.REGISTERCLOCKIN">
            <summary>
            Enum REGISTERCLOCKIN for "REGISTER_CLOCKIN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEventEventType.REGISTERCLOCKOUT">
            <summary>
            Enum REGISTERCLOCKOUT for "REGISTER_CLOCKOUT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEventEventType.DASHBOARDSUPERVISORCLOSE">
            <summary>
            Enum DASHBOARDSUPERVISORCLOSE for "DASHBOARD_SUPERVISOR_CLOSE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEventEventType.DASHBOARDEDIT">
            <summary>
            Enum DASHBOARDEDIT for "DASHBOARD_EDIT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1TimecardEventEventType.DASHBOARDDELETE">
            <summary>
            Enum DASHBOARDDELETE for "DASHBOARD_DELETE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateCategoryRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateCategoryRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateCategoryRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateCategoryRequest.#ctor(Square.Connect.Model.V1Category)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateCategoryRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateCategoryRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateCategoryRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateCategoryRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateCategoryRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateCategoryRequest.Equals(Square.Connect.Model.V1UpdateCategoryRequest)">
            <summary>
            Returns true if V1UpdateCategoryRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateCategoryRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateCategoryRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateDiscountRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateDiscountRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateDiscountRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateDiscountRequest.#ctor(Square.Connect.Model.V1Discount)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateDiscountRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateDiscountRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateDiscountRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateDiscountRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateDiscountRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateDiscountRequest.Equals(Square.Connect.Model.V1UpdateDiscountRequest)">
            <summary>
            Returns true if V1UpdateDiscountRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateDiscountRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateDiscountRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateEmployeeRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateEmployeeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRequest.#ctor(Square.Connect.Model.V1Employee)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateEmployeeRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateEmployeeRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRequest.Equals(Square.Connect.Model.V1UpdateEmployeeRequest)">
            <summary>
            Returns true if V1UpdateEmployeeRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateEmployeeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateEmployeeRoleRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRoleRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateEmployeeRoleRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRoleRequest.#ctor(Square.Connect.Model.V1EmployeeRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateEmployeeRoleRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateEmployeeRoleRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRoleRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRoleRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRoleRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRoleRequest.Equals(Square.Connect.Model.V1UpdateEmployeeRoleRequest)">
            <summary>
            Returns true if V1UpdateEmployeeRoleRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateEmployeeRoleRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateEmployeeRoleRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateFeeRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateFeeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateFeeRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateFeeRequest.#ctor(Square.Connect.Model.V1Fee)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateFeeRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateFeeRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateFeeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateFeeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateFeeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateFeeRequest.Equals(Square.Connect.Model.V1UpdateFeeRequest)">
            <summary>
            Returns true if V1UpdateFeeRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateFeeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateFeeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateItemRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateItemRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateItemRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateItemRequest.#ctor(Square.Connect.Model.V1Item)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateItemRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateItemRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateItemRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateItemRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateItemRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateItemRequest.Equals(Square.Connect.Model.V1UpdateItemRequest)">
            <summary>
            Returns true if V1UpdateItemRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateItemRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateItemRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateModifierListRequest">
            <summary>
            V1UpdateModifierListRequest
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateModifierListRequest.SelectionTypeEnum">
            <summary>
            Indicates whether multiple options from the modifier list can be applied to a single item. See [V1UpdateModifierListRequestSelectionType](#type-v1updatemodifierlistrequestselectiontype) for possible values
            </summary>
            <value>Indicates whether multiple options from the modifier list can be applied to a single item. See [V1UpdateModifierListRequestSelectionType](#type-v1updatemodifierlistrequestselectiontype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateModifierListRequest.SelectionTypeEnum.SINGLE">
            <summary>
            Enum SINGLE for "SINGLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateModifierListRequest.SelectionTypeEnum.MULTIPLE">
            <summary>
            Enum MULTIPLE for "MULTIPLE"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateModifierListRequest.SelectionType">
            <summary>
            Indicates whether multiple options from the modifier list can be applied to a single item. See [V1UpdateModifierListRequestSelectionType](#type-v1updatemodifierlistrequestselectiontype) for possible values
            </summary>
            <value>Indicates whether multiple options from the modifier list can be applied to a single item. See [V1UpdateModifierListRequestSelectionType](#type-v1updatemodifierlistrequestselectiontype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.#ctor(System.String,System.Nullable{Square.Connect.Model.V1UpdateModifierListRequest.SelectionTypeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateModifierListRequest" /> class.
            </summary>
            <param name="Name">The modifier list&#39;s name..</param>
            <param name="SelectionType">Indicates whether multiple options from the modifier list can be applied to a single item. See [V1UpdateModifierListRequestSelectionType](#type-v1updatemodifierlistrequestselectiontype) for possible values.</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateModifierListRequest.Name">
            <summary>
            The modifier list&#39;s name.
            </summary>
            <value>The modifier list&#39;s name.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.Equals(Square.Connect.Model.V1UpdateModifierListRequest)">
            <summary>
            Returns true if V1UpdateModifierListRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateModifierListRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateModifierListRequestSelectionType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateModifierListRequestSelectionType.SINGLE">
            <summary>
            Enum SINGLE for "SINGLE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateModifierListRequestSelectionType.MULTIPLE">
            <summary>
            Enum MULTIPLE for "MULTIPLE"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateModifierOptionRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierOptionRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateModifierOptionRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierOptionRequest.#ctor(Square.Connect.Model.V1ModifierOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateModifierOptionRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateModifierOptionRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierOptionRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierOptionRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierOptionRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierOptionRequest.Equals(Square.Connect.Model.V1UpdateModifierOptionRequest)">
            <summary>
            Returns true if V1UpdateModifierOptionRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateModifierOptionRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierOptionRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateOrderRequest">
            <summary>
            V1UpdateOrderRequest
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateOrderRequest.ActionEnum">
            <summary>
            The action to perform on the order (COMPLETE, CANCEL, or REFUND). See [V1UpdateOrderRequestAction](#type-v1updateorderrequestaction) for possible values
            </summary>
            <value>The action to perform on the order (COMPLETE, CANCEL, or REFUND). See [V1UpdateOrderRequestAction](#type-v1updateorderrequestaction) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateOrderRequest.ActionEnum.COMPLETE">
            <summary>
            Enum COMPLETE for "COMPLETE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateOrderRequest.ActionEnum.CANCEL">
            <summary>
            Enum CANCEL for "CANCEL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateOrderRequest.ActionEnum.REFUND">
            <summary>
            Enum REFUND for "REFUND"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.Action">
            <summary>
            The action to perform on the order (COMPLETE, CANCEL, or REFUND). See [V1UpdateOrderRequestAction](#type-v1updateorderrequestaction) for possible values
            </summary>
            <value>The action to perform on the order (COMPLETE, CANCEL, or REFUND). See [V1UpdateOrderRequestAction](#type-v1updateorderrequestaction) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateOrderRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.#ctor(System.Nullable{Square.Connect.Model.V1UpdateOrderRequest.ActionEnum},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateOrderRequest" /> class.
            </summary>
            <param name="Action">The action to perform on the order (COMPLETE, CANCEL, or REFUND). See [V1UpdateOrderRequestAction](#type-v1updateorderrequestaction) for possible values (required).</param>
            <param name="ShippedTrackingNumber">The tracking number of the shipment associated with the order. Only valid if action is COMPLETE..</param>
            <param name="CompletedNote">A merchant-specified note about the completion of the order. Only valid if action is COMPLETE..</param>
            <param name="RefundedNote">A merchant-specified note about the refunding of the order. Only valid if action is REFUND..</param>
            <param name="CanceledNote">A merchant-specified note about the canceling of the order. Only valid if action is CANCEL..</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.ShippedTrackingNumber">
            <summary>
            The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
            </summary>
            <value>The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.</value>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.CompletedNote">
            <summary>
            A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
            </summary>
            <value>A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.</value>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.RefundedNote">
            <summary>
            A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
            </summary>
            <value>A merchant-specified note about the refunding of the order. Only valid if action is REFUND.</value>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.CanceledNote">
            <summary>
            A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
            </summary>
            <value>A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.Equals(Square.Connect.Model.V1UpdateOrderRequest)">
            <summary>
            Returns true if V1UpdateOrderRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateOrderRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateOrderRequestAction">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateOrderRequestAction.COMPLETE">
            <summary>
            Enum COMPLETE for "COMPLETE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateOrderRequestAction.CANCEL">
            <summary>
            Enum CANCEL for "CANCEL"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1UpdateOrderRequestAction.REFUND">
            <summary>
            Enum REFUND for "REFUND"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1UpdatePageCellRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageCellRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdatePageCellRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageCellRequest.#ctor(Square.Connect.Model.V1PageCell)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdatePageCellRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdatePageCellRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageCellRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageCellRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageCellRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageCellRequest.Equals(Square.Connect.Model.V1UpdatePageCellRequest)">
            <summary>
            Returns true if V1UpdatePageCellRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdatePageCellRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageCellRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdatePageRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdatePageRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageRequest.#ctor(Square.Connect.Model.V1Page)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdatePageRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdatePageRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageRequest.Equals(Square.Connect.Model.V1UpdatePageRequest)">
            <summary>
            Returns true if V1UpdatePageRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdatePageRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdatePageRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateTimecardRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateTimecardRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateTimecardRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateTimecardRequest.#ctor(Square.Connect.Model.V1Timecard)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateTimecardRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request. See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateTimecardRequest.Body">
            <summary>
            An object containing the fields to POST for the request. See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request. See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateTimecardRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateTimecardRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateTimecardRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateTimecardRequest.Equals(Square.Connect.Model.V1UpdateTimecardRequest)">
            <summary>
            Returns true if V1UpdateTimecardRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateTimecardRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateTimecardRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1UpdateVariationRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateVariationRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateVariationRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateVariationRequest.#ctor(Square.Connect.Model.V1Variation)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateVariationRequest" /> class.
            </summary>
            <param name="Body">An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required).</param>
        </member>
        <member name="P:Square.Connect.Model.V1UpdateVariationRequest.Body">
            <summary>
            An object containing the fields to POST for the request.  See the corresponding object definition for field details.
            </summary>
            <value>An object containing the fields to POST for the request.  See the corresponding object definition for field details.</value>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateVariationRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateVariationRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateVariationRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateVariationRequest.Equals(Square.Connect.Model.V1UpdateVariationRequest)">
            <summary>
            Returns true if V1UpdateVariationRequest instances are equal
            </summary>
            <param name="other">Instance of V1UpdateVariationRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1UpdateVariationRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1Variation">
            <summary>
            V1Variation
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Variation.PricingTypeEnum">
            <summary>
            Indicates whether the item variation's price is fixed or determined at the time of sale. See [V1VariationPricingType](#type-v1variationpricingtype) for possible values
            </summary>
            <value>Indicates whether the item variation's price is fixed or determined at the time of sale. See [V1VariationPricingType](#type-v1variationpricingtype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Variation.PricingTypeEnum.FIXEDPRICING">
            <summary>
            Enum FIXEDPRICING for "FIXED_PRICING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Variation.PricingTypeEnum.VARIABLEPRICING">
            <summary>
            Enum VARIABLEPRICING for "VARIABLE_PRICING"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum">
            <summary>
            Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold. See [V1VariationInventoryAlertType](#type-v1variationinventoryalerttype) for possible values
            </summary>
            <value>Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold. See [V1VariationInventoryAlertType](#type-v1variationinventoryalerttype) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.LOWQUANTITY">
            <summary>
            Enum LOWQUANTITY for "LOW_QUANTITY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.INVESTMENT">
            <summary>
            Enum INVESTMENT for "INVESTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.LOAN">
            <summary>
            Enum LOAN for "LOAN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.SAVINGS">
            <summary>
            Enum SAVINGS for "SAVINGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.PricingType">
            <summary>
            Indicates whether the item variation's price is fixed or determined at the time of sale. See [V1VariationPricingType](#type-v1variationpricingtype) for possible values
            </summary>
            <value>Indicates whether the item variation's price is fixed or determined at the time of sale. See [V1VariationPricingType](#type-v1variationpricingtype) for possible values</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.InventoryAlertType">
            <summary>
            Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold. See [V1VariationInventoryAlertType](#type-v1variationinventoryalerttype) for possible values
            </summary>
            <value>Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold. See [V1VariationInventoryAlertType](#type-v1variationinventoryalerttype) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.V1Variation.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.V1Variation.PricingTypeEnum},Square.Connect.Model.V1Money,System.String,System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.V1Variation.InventoryAlertTypeEnum},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Variation" /> class.
            </summary>
            <param name="Id">The item variation&#39;s unique ID..</param>
            <param name="Name">The item variation&#39;s name..</param>
            <param name="ItemId">The ID of the variation&#39;s associated item..</param>
            <param name="Ordinal">Indicates the variation&#39;s list position when displayed in Square Register and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order.</param>
            <param name="PricingType">Indicates whether the item variation&#39;s price is fixed or determined at the time of sale. See [V1VariationPricingType](#type-v1variationpricingtype) for possible values.</param>
            <param name="PriceMoney">The item variation&#39;s price, if any..</param>
            <param name="Sku">The item variation&#39;s SKU, if any..</param>
            <param name="TrackInventory">If true, inventory tracking is active for the variation..</param>
            <param name="InventoryAlertType">Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold. See [V1VariationInventoryAlertType](#type-v1variationinventoryalerttype) for possible values.</param>
            <param name="InventoryAlertThreshold">If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard..</param>
            <param name="UserData">Arbitrary metadata associated with the variation. Cannot exceed 255 characters..</param>
            <param name="V2Id">The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID..</param>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.Id">
            <summary>
            The item variation&#39;s unique ID.
            </summary>
            <value>The item variation&#39;s unique ID.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.Name">
            <summary>
            The item variation&#39;s name.
            </summary>
            <value>The item variation&#39;s name.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.ItemId">
            <summary>
            The ID of the variation&#39;s associated item.
            </summary>
            <value>The ID of the variation&#39;s associated item.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.Ordinal">
            <summary>
            Indicates the variation&#39;s list position when displayed in Square Register and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order
            </summary>
            <value>Indicates the variation&#39;s list position when displayed in Square Register and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.PriceMoney">
            <summary>
            The item variation&#39;s price, if any.
            </summary>
            <value>The item variation&#39;s price, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.Sku">
            <summary>
            The item variation&#39;s SKU, if any.
            </summary>
            <value>The item variation&#39;s SKU, if any.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.TrackInventory">
            <summary>
            If true, inventory tracking is active for the variation.
            </summary>
            <value>If true, inventory tracking is active for the variation.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.InventoryAlertThreshold">
            <summary>
            If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard.
            </summary>
            <value>If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.UserData">
            <summary>
            Arbitrary metadata associated with the variation. Cannot exceed 255 characters.
            </summary>
            <value>Arbitrary metadata associated with the variation. Cannot exceed 255 characters.</value>
        </member>
        <member name="P:Square.Connect.Model.V1Variation.V2Id">
            <summary>
            The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
            </summary>
            <value>The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.</value>
        </member>
        <member name="M:Square.Connect.Model.V1Variation.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Variation.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Variation.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Variation.Equals(Square.Connect.Model.V1Variation)">
            <summary>
            Returns true if V1Variation instances are equal
            </summary>
            <param name="other">Instance of V1Variation to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.V1Variation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.V1VariationInventoryAlertType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1VariationInventoryAlertType.LOWQUANTITY">
            <summary>
            Enum LOWQUANTITY for "LOW_QUANTITY"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1VariationInventoryAlertType.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1VariationInventoryAlertType.INVESTMENT">
            <summary>
            Enum INVESTMENT for "INVESTMENT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1VariationInventoryAlertType.LOAN">
            <summary>
            Enum LOAN for "LOAN"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1VariationInventoryAlertType.SAVINGS">
            <summary>
            Enum SAVINGS for "SAVINGS"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1VariationInventoryAlertType.OTHER">
            <summary>
            Enum OTHER for "OTHER"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.V1VariationPricingType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="F:Square.Connect.Model.V1VariationPricingType.FIXEDPRICING">
            <summary>
            Enum FIXEDPRICING for "FIXED_PRICING"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.V1VariationPricingType.VARIABLEPRICING">
            <summary>
            Enum VARIABLEPRICING for "VARIABLE_PRICING"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.VoidTransactionRequest">
            <summary>
            Defines the request body for calls to the VoidTransaction endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.VoidTransactionRequest" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.Equals(Square.Connect.Model.VoidTransactionRequest)">
            <summary>
            Returns true if VoidTransactionRequest instances are equal
            </summary>
            <param name="other">Instance of VoidTransactionRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.VoidTransactionResponse">
            <summary>
            Defines the fields that are included in the response body of a request to the VoidTransaction endpoint.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.VoidTransactionResponse" /> class.
            </summary>
            <param name="Errors">Any errors that occurred during the request..</param>
        </member>
        <member name="P:Square.Connect.Model.VoidTransactionResponse.Errors">
            <summary>
            Any errors that occurred during the request.
            </summary>
            <value>Any errors that occurred during the request.</value>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.Equals(Square.Connect.Model.VoidTransactionResponse)">
            <summary>
            Returns true if VoidTransactionResponse instances are equal
            </summary>
            <param name="other">Instance of VoidTransactionResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Square.Connect.Model.WebhookEvents">
            <summary>
            The type of an event that triggers a webhook notification to an application.
            </summary>
            <value>The type of an event that triggers a webhook notification to an application.</value>
        </member>
        <member name="F:Square.Connect.Model.WebhookEvents.Updated">
            <summary>
            Enum Updated for "inventory.count.updated"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.Weekday">
            <summary>
            The days of the week.
            </summary>
            <value>The days of the week.</value>
        </member>
        <member name="F:Square.Connect.Model.Weekday.MON">
            <summary>
            Enum MON for "MON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Weekday.TUE">
            <summary>
            Enum TUE for "TUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Weekday.WED">
            <summary>
            Enum WED for "WED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Weekday.THU">
            <summary>
            Enum THU for "THU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Weekday.FRI">
            <summary>
            Enum FRI for "FRI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Weekday.SAT">
            <summary>
            Enum SAT for "SAT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.Weekday.SUN">
            <summary>
            Enum SUN for "SUN"
            </summary>
        </member>
        <member name="T:Square.Connect.Model.WorkweekConfig">
            <summary>
            Sets the Day of the week and hour of the day that a business starts a  work week. Used for the calculation of overtime pay.
            </summary>
        </member>
        <member name="T:Square.Connect.Model.WorkweekConfig.StartOfWeekEnum">
            <summary>
            The day of the week on which a business week cuts over for compensation purposes. See [Weekday](#type-weekday) for possible values
            </summary>
            <value>The day of the week on which a business week cuts over for compensation purposes. See [Weekday](#type-weekday) for possible values</value>
        </member>
        <member name="F:Square.Connect.Model.WorkweekConfig.StartOfWeekEnum.MON">
            <summary>
            Enum MON for "MON"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.WorkweekConfig.StartOfWeekEnum.TUE">
            <summary>
            Enum TUE for "TUE"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.WorkweekConfig.StartOfWeekEnum.WED">
            <summary>
            Enum WED for "WED"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.WorkweekConfig.StartOfWeekEnum.THU">
            <summary>
            Enum THU for "THU"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.WorkweekConfig.StartOfWeekEnum.FRI">
            <summary>
            Enum FRI for "FRI"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.WorkweekConfig.StartOfWeekEnum.SAT">
            <summary>
            Enum SAT for "SAT"
            </summary>
        </member>
        <member name="F:Square.Connect.Model.WorkweekConfig.StartOfWeekEnum.SUN">
            <summary>
            Enum SUN for "SUN"
            </summary>
        </member>
        <member name="P:Square.Connect.Model.WorkweekConfig.StartOfWeek">
            <summary>
            The day of the week on which a business week cuts over for compensation purposes. See [Weekday](#type-weekday) for possible values
            </summary>
            <value>The day of the week on which a business week cuts over for compensation purposes. See [Weekday](#type-weekday) for possible values</value>
        </member>
        <member name="M:Square.Connect.Model.WorkweekConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.WorkweekConfig" /> class.
            </summary>
        </member>
        <member name="M:Square.Connect.Model.WorkweekConfig.#ctor(System.String,System.Nullable{Square.Connect.Model.WorkweekConfig.StartOfWeekEnum},System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Square.Connect.Model.WorkweekConfig" /> class.
            </summary>
            <param name="Id">UUID for this object.</param>
            <param name="StartOfWeek">The day of the week on which a business week cuts over for compensation purposes. See [Weekday](#type-weekday) for possible values (required).</param>
            <param name="StartOfDayLocalTime">The local time at which a business week cuts over. Represented as a string in &#x60;HH:MM&#x60; format (&#x60;HH:MM:SS&#x60; is also accepted, but seconds are truncated). (required).</param>
            <param name="Version">Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write..</param>
            <param name="CreatedAt">A read-only timestamp in RFC 3339 format; presented in UTC.</param>
            <param name="UpdatedAt">A read-only timestamp in RFC 3339 format; presented in UTC.</param>
        </member>
        <member name="P:Square.Connect.Model.WorkweekConfig.Id">
            <summary>
            UUID for this object
            </summary>
            <value>UUID for this object</value>
        </member>
        <member name="P:Square.Connect.Model.WorkweekConfig.StartOfDayLocalTime">
            <summary>
            The local time at which a business week cuts over. Represented as a string in &#x60;HH:MM&#x60; format (&#x60;HH:MM:SS&#x60; is also accepted, but seconds are truncated).
            </summary>
            <value>The local time at which a business week cuts over. Represented as a string in &#x60;HH:MM&#x60; format (&#x60;HH:MM:SS&#x60; is also accepted, but seconds are truncated).</value>
        </member>
        <member name="P:Square.Connect.Model.WorkweekConfig.Version">
            <summary>
            Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write.
            </summary>
            <value>Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write.</value>
        </member>
        <member name="P:Square.Connect.Model.WorkweekConfig.CreatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format; presented in UTC
            </summary>
            <value>A read-only timestamp in RFC 3339 format; presented in UTC</value>
        </member>
        <member name="P:Square.Connect.Model.WorkweekConfig.UpdatedAt">
            <summary>
            A read-only timestamp in RFC 3339 format; presented in UTC
            </summary>
            <value>A read-only timestamp in RFC 3339 format; presented in UTC</value>
        </member>
        <member name="M:Square.Connect.Model.WorkweekConfig.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.WorkweekConfig.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Square.Connect.Model.WorkweekConfig.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.WorkweekConfig.Equals(Square.Connect.Model.WorkweekConfig)">
            <summary>
            Returns true if WorkweekConfig instances are equal
            </summary>
            <param name="other">Instance of WorkweekConfig to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Square.Connect.Model.WorkweekConfig.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
    </members>
</doc>
